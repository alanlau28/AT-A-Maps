<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (77 samples, 0.03%)</title><rect x="1189.5" y="261" width="0.3" height="15.0" fill="rgb(238,14,15)" rx="2" ry="2" />
<text  x="1192.51" y="271.5" ></text>
</g>
<g >
<title>_dl_relocate_object (52 samples, 0.02%)</title><rect x="10.7" y="213" width="0.2" height="15.0" fill="rgb(236,152,46)" rx="2" ry="2" />
<text  x="13.73" y="223.5" ></text>
</g>
<g >
<title>operator new (2,201 samples, 0.74%)</title><rect x="115.7" y="69" width="8.7" height="15.0" fill="rgb(244,84,29)" rx="2" ry="2" />
<text  x="118.72" y="79.5" ></text>
</g>
<g >
<title>findStreetSegmentLength (129 samples, 0.04%)</title><rect x="11.1" y="261" width="0.5" height="15.0" fill="rgb(249,221,12)" rx="2" ry="2" />
<text  x="14.14" y="271.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (122 samples, 0.04%)</title><rect x="24.4" y="85" width="0.5" height="15.0" fill="rgb(231,46,45)" rx="2" ry="2" />
<text  x="27.43" y="95.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (1,648 samples, 0.55%)</title><rect x="70.9" y="85" width="6.5" height="15.0" fill="rgb(242,56,20)" rx="2" ry="2" />
<text  x="73.88" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (50 samples, 0.02%)</title><rect x="201.6" y="69" width="0.1" height="15.0" fill="rgb(233,80,3)" rx="2" ry="2" />
<text  x="204.55" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (185 samples, 0.06%)</title><rect x="1030.0" y="101" width="0.7" height="15.0" fill="rgb(224,51,1)" rx="2" ry="2" />
<text  x="1033.02" y="111.5" ></text>
</g>
<g >
<title>std::__sort&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt; (42 samples, 0.01%)</title><rect x="17.0" y="261" width="0.2" height="15.0" fill="rgb(240,38,43)" rx="2" ry="2" />
<text  x="20.01" y="271.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (259 samples, 0.09%)</title><rect x="77.4" y="69" width="1.0" height="15.0" fill="rgb(211,204,11)" rx="2" ry="2" />
<text  x="80.38" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (215 samples, 0.07%)</title><rect x="190.4" y="85" width="0.9" height="15.0" fill="rgb(216,226,47)" rx="2" ry="2" />
<text  x="193.42" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement const*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (567 samples, 0.19%)</title><rect x="1164.3" y="101" width="2.3" height="15.0" fill="rgb(221,72,49)" rx="2" ry="2" />
<text  x="1167.35" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (2,141 samples, 0.72%)</title><rect x="18.7" y="245" width="8.4" height="15.0" fill="rgb(210,195,5)" rx="2" ry="2" />
<text  x="21.65" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (3,965 samples, 1.33%)</title><rect x="112.8" y="85" width="15.6" height="15.0" fill="rgb(213,221,48)" rx="2" ry="2" />
<text  x="115.81" y="95.5" ></text>
</g>
<g >
<title>getIntersectionStreetSegment (130 samples, 0.04%)</title><rect x="11.9" y="261" width="0.5" height="15.0" fill="rgb(240,49,18)" rx="2" ry="2" />
<text  x="14.89" y="271.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;, std::less&lt;waveElement&gt; &gt;::empty (1,212 samples, 0.41%)</title><rect x="559.9" y="133" width="4.8" height="15.0" fill="rgb(215,180,6)" rx="2" ry="2" />
<text  x="562.95" y="143.5" ></text>
</g>
<g >
<title>read@plt (55 samples, 0.02%)</title><rect x="24.7" y="37" width="0.2" height="15.0" fill="rgb(238,140,37)" rx="2" ry="2" />
<text  x="27.70" y="47.5" ></text>
</g>
<g >
<title>M3_Public_Perf_ (299,111 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(244,208,40)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >M3_Public_Perf_</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (286 samples, 0.10%)</title><rect x="1146.0" y="133" width="1.2" height="15.0" fill="rgb(226,113,0)" rx="2" ry="2" />
<text  x="1149.03" y="143.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (173 samples, 0.06%)</title><rect x="128.4" y="85" width="0.7" height="15.0" fill="rgb(229,184,29)" rx="2" ry="2" />
<text  x="131.45" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, int&gt; &gt;::_M_v (751 samples, 0.25%)</title><rect x="501.9" y="69" width="3.0" height="15.0" fill="rgb(205,126,23)" rx="2" ry="2" />
<text  x="504.94" y="79.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (408 samples, 0.14%)</title><rect x="174.5" y="101" width="1.6" height="15.0" fill="rgb(224,84,44)" rx="2" ry="2" />
<text  x="177.48" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int, double&gt; &gt; (38 samples, 0.01%)</title><rect x="15.2" y="245" width="0.1" height="15.0" fill="rgb(225,31,28)" rx="2" ry="2" />
<text  x="18.17" y="255.5" ></text>
</g>
<g >
<title>findEuclidianDistance (2,435 samples, 0.81%)</title><rect x="359.3" y="133" width="9.6" height="15.0" fill="rgb(238,6,27)" rx="2" ry="2" />
<text  x="362.30" y="143.5" ></text>
</g>
<g >
<title>std::forward&lt;Node const&amp;&gt; (112 samples, 0.04%)</title><rect x="151.4" y="101" width="0.5" height="15.0" fill="rgb(233,144,6)" rx="2" ry="2" />
<text  x="154.42" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (32 samples, 0.01%)</title><rect x="41.9" y="85" width="0.1" height="15.0" fill="rgb(219,155,23)" rx="2" ry="2" />
<text  x="44.91" y="95.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (48 samples, 0.02%)</title><rect x="39.6" y="101" width="0.2" height="15.0" fill="rgb(238,229,54)" rx="2" ry="2" />
<text  x="42.58" y="111.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (93 samples, 0.03%)</title><rect x="23.6" y="101" width="0.4" height="15.0" fill="rgb(253,45,2)" rx="2" ry="2" />
<text  x="26.62" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; (1,277 samples, 0.43%)</title><rect x="1050.4" y="117" width="5.1" height="15.0" fill="rgb(251,77,54)" rx="2" ry="2" />
<text  x="1053.43" y="127.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Node&gt; (3,970 samples, 1.33%)</title><rect x="1173.5" y="117" width="15.7" height="15.0" fill="rgb(228,208,53)" rx="2" ry="2" />
<text  x="1176.51" y="127.5" ></text>
</g>
<g >
<title>std::forward&lt;Node const&amp;&gt; (82 samples, 0.03%)</title><rect x="158.5" y="101" width="0.3" height="15.0" fill="rgb(253,29,10)" rx="2" ry="2" />
<text  x="161.47" y="111.5" ></text>
</g>
<g >
<title>std::push_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, std::less&lt;waveElement&gt; &gt; (10,161 samples, 3.40%)</title><rect x="1047.1" y="133" width="40.1" height="15.0" fill="rgb(221,223,3)" rx="2" ry="2" />
<text  x="1050.10" y="143.5" >std..</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (55 samples, 0.02%)</title><rect x="24.7" y="69" width="0.2" height="15.0" fill="rgb(234,174,15)" rx="2" ry="2" />
<text  x="27.70" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (415 samples, 0.14%)</title><rect x="395.9" y="133" width="1.6" height="15.0" fill="rgb(242,200,3)" rx="2" ry="2" />
<text  x="398.85" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; &gt;::load_object_data (67 samples, 0.02%)</title><rect x="13.4" y="197" width="0.2" height="15.0" fill="rgb(239,133,2)" rx="2" ry="2" />
<text  x="16.38" y="207.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, long, waveElement, __gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;waveElement&gt; &gt; &gt; (7,862 samples, 2.63%)</title><rect x="1055.5" y="117" width="31.0" height="15.0" fill="rgb(243,176,20)" rx="2" ry="2" />
<text  x="1058.47" y="127.5" >st..</text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;int const, int&gt; const&amp;&gt; (212 samples, 0.07%)</title><rect x="510.3" y="69" width="0.9" height="15.0" fill="rgb(213,198,7)" rx="2" ry="2" />
<text  x="513.33" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (46 samples, 0.02%)</title><rect x="18.1" y="261" width="0.2" height="15.0" fill="rgb(233,128,36)" rx="2" ry="2" />
<text  x="21.10" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (50 samples, 0.02%)</title><rect x="201.6" y="85" width="0.1" height="15.0" fill="rgb(237,176,1)" rx="2" ry="2" />
<text  x="204.55" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (44 samples, 0.01%)</title><rect x="115.5" y="53" width="0.2" height="15.0" fill="rgb(247,109,53)" rx="2" ry="2" />
<text  x="118.55" y="63.5" ></text>
</g>
<g >
<title>operator new (1,875 samples, 0.63%)</title><rect x="162.6" y="69" width="7.4" height="15.0" fill="rgb(215,127,39)" rx="2" ry="2" />
<text  x="165.57" y="79.5" ></text>
</g>
<g >
<title>findDistanceBetweenTwoPoints (44 samples, 0.01%)</title><rect x="11.2" y="245" width="0.1" height="15.0" fill="rgb(212,106,17)" rx="2" ry="2" />
<text  x="14.18" y="255.5" ></text>
</g>
<g >
<title>[unknown] (34 samples, 0.01%)</title><rect x="19.9" y="117" width="0.1" height="15.0" fill="rgb(244,202,49)" rx="2" ry="2" />
<text  x="22.91" y="127.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (257 samples, 0.09%)</title><rect x="144.2" y="85" width="1.0" height="15.0" fill="rgb(233,95,53)" rx="2" ry="2" />
<text  x="147.16" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (33 samples, 0.01%)</title><rect x="20.0" y="117" width="0.2" height="15.0" fill="rgb(219,215,35)" rx="2" ry="2" />
<text  x="23.04" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (44 samples, 0.01%)</title><rect x="162.4" y="53" width="0.2" height="15.0" fill="rgb(230,186,25)" rx="2" ry="2" />
<text  x="165.40" y="63.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (3,418 samples, 1.14%)</title><rect x="160.3" y="85" width="13.5" height="15.0" fill="rgb(217,152,6)" rx="2" ry="2" />
<text  x="163.29" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (35,938 samples, 12.01%)</title><rect x="405.6" y="117" width="141.7" height="15.0" fill="rgb(222,103,54)" rx="2" ry="2" />
<text  x="408.55" y="127.5" >std::_Hashtable&lt;in..</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::operator[] (88 samples, 0.03%)</title><rect x="149.4" y="117" width="0.3" height="15.0" fill="rgb(227,110,30)" rx="2" ry="2" />
<text  x="152.37" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (92 samples, 0.03%)</title><rect x="10.0" y="197" width="0.4" height="15.0" fill="rgb(215,61,10)" rx="2" ry="2" />
<text  x="13.04" y="207.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (134 samples, 0.04%)</title><rect x="70.3" y="69" width="0.6" height="15.0" fill="rgb(205,219,14)" rx="2" ry="2" />
<text  x="73.35" y="79.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (194 samples, 0.06%)</title><rect x="22.3" y="101" width="0.7" height="15.0" fill="rgb(206,82,4)" rx="2" ry="2" />
<text  x="25.27" y="111.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (373 samples, 0.12%)</title><rect x="13.7" y="197" width="1.5" height="15.0" fill="rgb(254,198,29)" rx="2" ry="2" />
<text  x="16.69" y="207.5" ></text>
</g>
<g >
<title>loadGraph (58,332 samples, 19.50%)</title><rect x="27.7" y="149" width="230.2" height="15.0" fill="rgb(251,156,11)" rx="2" ry="2" />
<text  x="30.74" y="159.5" >loadGraph</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (576 samples, 0.19%)</title><rect x="23.2" y="117" width="2.3" height="15.0" fill="rgb(246,21,18)" rx="2" ry="2" />
<text  x="26.18" y="127.5" ></text>
</g>
<g >
<title>UnitTest::TestRunner::RunTest (294,639 samples, 98.50%)</title><rect x="27.1" y="245" width="1162.4" height="15.0" fill="rgb(249,91,1)" rx="2" ry="2" />
<text  x="30.10" y="255.5" >UnitTest::TestRunner::RunTest</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_rehash (51 samples, 0.02%)</title><rect x="15.4" y="245" width="0.2" height="15.0" fill="rgb(245,142,16)" rx="2" ry="2" />
<text  x="18.40" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (49 samples, 0.02%)</title><rect x="11.6" y="245" width="0.2" height="15.0" fill="rgb(227,68,11)" rx="2" ry="2" />
<text  x="14.65" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_insert_multi_node (75 samples, 0.03%)</title><rect x="15.3" y="261" width="0.3" height="15.0" fill="rgb(214,137,40)" rx="2" ry="2" />
<text  x="18.33" y="271.5" ></text>
</g>
<g >
<title>UnitTest::ExecuteTest&lt;UnitTest::Test&gt; (294,639 samples, 98.50%)</title><rect x="27.1" y="229" width="1162.4" height="15.0" fill="rgb(247,208,42)" rx="2" ry="2" />
<text  x="30.10" y="239.5" >UnitTest::ExecuteTest&lt;UnitTest::Test&gt;</text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (59 samples, 0.02%)</title><rect x="1087.0" y="117" width="0.2" height="15.0" fill="rgb(233,32,40)" rx="2" ry="2" />
<text  x="1089.95" y="127.5" ></text>
</g>
<g >
<title>main (294,639 samples, 98.50%)</title><rect x="27.1" y="277" width="1162.4" height="15.0" fill="rgb(215,101,9)" rx="2" ry="2" />
<text  x="30.10" y="287.5" >main</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (92 samples, 0.03%)</title><rect x="10.0" y="181" width="0.4" height="15.0" fill="rgb(217,101,52)" rx="2" ry="2" />
<text  x="13.04" y="191.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;, std::less&lt;waveElement&gt; &gt;::push (8,372 samples, 2.80%)</title><rect x="1011.0" y="133" width="33.0" height="15.0" fill="rgb(227,78,30)" rx="2" ry="2" />
<text  x="1013.97" y="143.5" >st..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;*&gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;*&gt; (29 samples, 0.01%)</title><rect x="18.4" y="245" width="0.1" height="15.0" fill="rgb(217,146,45)" rx="2" ry="2" />
<text  x="21.41" y="255.5" ></text>
</g>
<g >
<title>memmove@plt (367 samples, 0.12%)</title><rect x="65.9" y="69" width="1.4" height="15.0" fill="rgb(221,152,24)" rx="2" ry="2" />
<text  x="68.85" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_rehash_aux (51 samples, 0.02%)</title><rect x="15.4" y="229" width="0.2" height="15.0" fill="rgb(253,175,52)" rx="2" ry="2" />
<text  x="18.40" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::end (661 samples, 0.22%)</title><rect x="1028.1" y="117" width="2.6" height="15.0" fill="rgb(254,194,10)" rx="2" ry="2" />
<text  x="1031.14" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::base (261 samples, 0.09%)</title><rect x="578.8" y="85" width="1.0" height="15.0" fill="rgb(237,78,29)" rx="2" ry="2" />
<text  x="581.76" y="95.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (4,683 samples, 1.57%)</title><rect x="198.2" y="117" width="18.5" height="15.0" fill="rgb(209,104,32)" rx="2" ry="2" />
<text  x="201.20" y="127.5" ></text>
</g>
<g >
<title>_int_malloc (110 samples, 0.04%)</title><rect x="26.1" y="101" width="0.4" height="15.0" fill="rgb(250,36,3)" rx="2" ry="2" />
<text  x="29.09" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement const*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::base (502 samples, 0.17%)</title><rect x="1155.3" y="101" width="2.0" height="15.0" fill="rgb(240,136,7)" rx="2" ry="2" />
<text  x="1158.34" y="111.5" ></text>
</g>
<g >
<title>getStreetSegmentCurvePoint (34 samples, 0.01%)</title><rect x="11.4" y="245" width="0.2" height="15.0" fill="rgb(235,102,27)" rx="2" ry="2" />
<text  x="14.43" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (295 samples, 0.10%)</title><rect x="147.9" y="85" width="1.2" height="15.0" fill="rgb(207,140,10)" rx="2" ry="2" />
<text  x="150.91" y="95.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (139 samples, 0.05%)</title><rect x="1085.9" y="101" width="0.6" height="15.0" fill="rgb(254,120,18)" rx="2" ry="2" />
<text  x="1088.93" y="111.5" ></text>
</g>
<g >
<title>malloc@plt (1,950 samples, 0.65%)</title><rect x="55.0" y="69" width="7.7" height="15.0" fill="rgb(206,54,47)" rx="2" ry="2" />
<text  x="58.02" y="79.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (3,791 samples, 1.27%)</title><rect x="159.5" y="101" width="15.0" height="15.0" fill="rgb(223,20,0)" rx="2" ry="2" />
<text  x="162.52" y="111.5" ></text>
</g>
<g >
<title>operator new (5,241 samples, 1.75%)</title><rect x="42.0" y="85" width="20.7" height="15.0" fill="rgb(223,107,15)" rx="2" ry="2" />
<text  x="45.04" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator+ (3,520 samples, 1.18%)</title><rect x="1066.1" y="101" width="13.9" height="15.0" fill="rgb(244,192,43)" rx="2" ry="2" />
<text  x="1069.11" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (186 samples, 0.06%)</title><rect x="158.8" y="101" width="0.7" height="15.0" fill="rgb(228,164,38)" rx="2" ry="2" />
<text  x="161.79" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (990 samples, 0.33%)</title><rect x="145.2" y="101" width="3.9" height="15.0" fill="rgb(205,70,25)" rx="2" ry="2" />
<text  x="148.17" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (175 samples, 0.06%)</title><rect x="13.8" y="149" width="0.7" height="15.0" fill="rgb(226,115,40)" rx="2" ry="2" />
<text  x="16.84" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement const*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (228 samples, 0.08%)</title><rect x="1169.3" y="101" width="0.9" height="15.0" fill="rgb(226,107,15)" rx="2" ry="2" />
<text  x="1172.27" y="111.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (259 samples, 0.09%)</title><rect x="77.4" y="85" width="1.0" height="15.0" fill="rgb(231,7,9)" rx="2" ry="2" />
<text  x="80.38" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (258 samples, 0.09%)</title><rect x="81.9" y="85" width="1.0" height="15.0" fill="rgb(253,158,51)" rx="2" ry="2" />
<text  x="84.93" y="95.5" ></text>
</g>
<g >
<title>operator new (49 samples, 0.02%)</title><rect x="14.9" y="165" width="0.1" height="15.0" fill="rgb(246,131,11)" rx="2" ry="2" />
<text  x="17.86" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (28 samples, 0.01%)</title><rect x="10.1" y="133" width="0.1" height="15.0" fill="rgb(236,5,9)" rx="2" ry="2" />
<text  x="13.08" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (326 samples, 0.11%)</title><rect x="85.4" y="117" width="1.3" height="15.0" fill="rgb(225,7,23)" rx="2" ry="2" />
<text  x="88.39" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; const&amp;&gt; (37 samples, 0.01%)</title><rect x="18.4" y="261" width="0.1" height="15.0" fill="rgb(232,110,16)" rx="2" ry="2" />
<text  x="21.40" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (1,614 samples, 0.54%)</title><rect x="137.8" y="101" width="6.4" height="15.0" fill="rgb(216,117,40)" rx="2" ry="2" />
<text  x="140.79" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator= (13,101 samples, 4.38%)</title><rect x="33.7" y="117" width="51.7" height="15.0" fill="rgb(243,220,45)" rx="2" ry="2" />
<text  x="36.70" y="127.5" >std::..</text>
</g>
<g >
<title>[unknown] (648 samples, 0.22%)</title><rect x="20.6" y="117" width="2.6" height="15.0" fill="rgb(240,189,5)" rx="2" ry="2" />
<text  x="23.62" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (8,298 samples, 2.77%)</title><rect x="158.8" y="117" width="32.7" height="15.0" fill="rgb(226,105,14)" rx="2" ry="2" />
<text  x="161.79" y="127.5" >st..</text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (90 samples, 0.03%)</title><rect x="10.1" y="165" width="0.3" height="15.0" fill="rgb(233,55,16)" rx="2" ry="2" />
<text  x="13.05" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;int, int&gt; &gt; (233 samples, 0.08%)</title><rect x="15.8" y="261" width="1.0" height="15.0" fill="rgb(216,49,10)" rx="2" ry="2" />
<text  x="18.85" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_buckets (27 samples, 0.01%)</title><rect x="16.2" y="197" width="0.1" height="15.0" fill="rgb(234,180,41)" rx="2" ry="2" />
<text  x="19.21" y="207.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (119 samples, 0.04%)</title><rect x="221.4" y="101" width="0.4" height="15.0" fill="rgb(216,66,21)" rx="2" ry="2" />
<text  x="224.36" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::front (908 samples, 0.30%)</title><rect x="1166.6" y="133" width="3.6" height="15.0" fill="rgb(253,62,46)" rx="2" ry="2" />
<text  x="1169.59" y="143.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (153 samples, 0.05%)</title><rect x="1005.0" y="85" width="0.6" height="15.0" fill="rgb(243,71,29)" rx="2" ry="2" />
<text  x="1008.04" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (92 samples, 0.03%)</title><rect x="10.0" y="213" width="0.4" height="15.0" fill="rgb(222,94,45)" rx="2" ry="2" />
<text  x="13.04" y="223.5" ></text>
</g>
<g >
<title>malloc (31 samples, 0.01%)</title><rect x="16.5" y="213" width="0.1" height="15.0" fill="rgb(235,211,38)" rx="2" ry="2" />
<text  x="19.47" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, unsigned long, false&gt;::_S_equals (2,018 samples, 0.67%)</title><rect x="501.9" y="85" width="8.0" height="15.0" fill="rgb(220,227,46)" rx="2" ry="2" />
<text  x="504.94" y="95.5" ></text>
</g>
<g >
<title>_start (63 samples, 0.02%)</title><rect x="10.7" y="277" width="0.2" height="15.0" fill="rgb(215,92,53)" rx="2" ry="2" />
<text  x="13.68" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (10,891 samples, 3.64%)</title><rect x="842.5" y="53" width="43.0" height="15.0" fill="rgb(254,138,52)" rx="2" ry="2" />
<text  x="845.51" y="63.5" >__gn..</text>
</g>
<g >
<title>findStreetSegmentTravelTime (6,831 samples, 2.28%)</title><rect x="368.9" y="133" width="27.0" height="15.0" fill="rgb(236,67,51)" rx="2" ry="2" />
<text  x="371.91" y="143.5" >f..</text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (60 samples, 0.02%)</title><rect x="19.4" y="133" width="0.2" height="15.0" fill="rgb(237,180,24)" rx="2" ry="2" />
<text  x="22.37" y="143.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;, std::less&lt;waveElement&gt; &gt;::top (781 samples, 0.26%)</title><rect x="1044.0" y="133" width="3.1" height="15.0" fill="rgb(206,69,39)" rx="2" ry="2" />
<text  x="1047.00" y="143.5" ></text>
</g>
<g >
<title>malloc@plt (1,875 samples, 0.63%)</title><rect x="162.6" y="53" width="7.4" height="15.0" fill="rgb(226,103,53)" rx="2" ry="2" />
<text  x="165.57" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::begin (2,348 samples, 0.78%)</title><rect x="1157.3" y="117" width="9.3" height="15.0" fill="rgb(240,224,28)" rx="2" ry="2" />
<text  x="1160.32" y="127.5" ></text>
</g>
<g >
<title>operator new (119 samples, 0.04%)</title><rect x="26.1" y="133" width="0.5" height="15.0" fill="rgb(212,71,5)" rx="2" ry="2" />
<text  x="29.09" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::push_back (3,359 samples, 1.12%)</title><rect x="1030.7" y="117" width="13.3" height="15.0" fill="rgb(206,80,26)" rx="2" ry="2" />
<text  x="1033.75" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;::_M_realloc_insert&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; const&amp;&gt; (29 samples, 0.01%)</title><rect x="15.0" y="181" width="0.2" height="15.0" fill="rgb(211,81,31)" rx="2" ry="2" />
<text  x="18.05" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, int&gt;, false, false&gt;::_Node_iterator (415 samples, 0.14%)</title><rect x="395.9" y="117" width="1.6" height="15.0" fill="rgb(254,106,36)" rx="2" ry="2" />
<text  x="398.85" y="127.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, int&gt; const&amp;&gt; (62 samples, 0.02%)</title><rect x="510.9" y="53" width="0.3" height="15.0" fill="rgb(229,139,22)" rx="2" ry="2" />
<text  x="513.92" y="63.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (965 samples, 0.32%)</title><rect x="176.1" y="101" width="3.8" height="15.0" fill="rgb(243,213,51)" rx="2" ry="2" />
<text  x="179.09" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, TypedOSMID&gt;::load_object_data (109 samples, 0.04%)</title><rect x="19.8" y="149" width="0.5" height="15.0" fill="rgb(240,114,14)" rx="2" ry="2" />
<text  x="22.83" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (35 samples, 0.01%)</title><rect x="14.3" y="101" width="0.1" height="15.0" fill="rgb(243,154,39)" rx="2" ry="2" />
<text  x="17.26" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,141 samples, 0.72%)</title><rect x="18.7" y="261" width="8.4" height="15.0" fill="rgb(209,43,6)" rx="2" ry="2" />
<text  x="21.65" y="271.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (253 samples, 0.08%)</title><rect x="1084.1" y="85" width="1.0" height="15.0" fill="rgb(248,145,44)" rx="2" ry="2" />
<text  x="1087.07" y="95.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (395 samples, 0.13%)</title><rect x="216.7" y="117" width="1.5" height="15.0" fill="rgb(221,205,22)" rx="2" ry="2" />
<text  x="219.68" y="127.5" ></text>
</g>
<g >
<title>do_lookup_x (36 samples, 0.01%)</title><rect x="10.8" y="181" width="0.1" height="15.0" fill="rgb(219,110,14)" rx="2" ry="2" />
<text  x="13.78" y="191.5" ></text>
</g>
<g >
<title>[unknown] (26 samples, 0.01%)</title><rect x="13.7" y="165" width="0.1" height="15.0" fill="rgb(246,133,5)" rx="2" ry="2" />
<text  x="16.69" y="175.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (257 samples, 0.09%)</title><rect x="144.2" y="101" width="1.0" height="15.0" fill="rgb(237,173,52)" rx="2" ry="2" />
<text  x="147.16" y="111.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (906 samples, 0.30%)</title><rect x="67.3" y="85" width="3.6" height="15.0" fill="rgb(214,0,28)" rx="2" ry="2" />
<text  x="70.30" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::empty (4,089 samples, 1.37%)</title><rect x="1150.5" y="133" width="16.1" height="15.0" fill="rgb(220,135,25)" rx="2" ry="2" />
<text  x="1153.46" y="143.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;int const, int&gt;, false&gt; (356 samples, 0.12%)</title><rect x="558.5" y="133" width="1.4" height="15.0" fill="rgb(219,144,31)" rx="2" ry="2" />
<text  x="561.54" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, Feature&gt;::load_object_data (2,016 samples, 0.67%)</title><rect x="18.9" y="181" width="8.0" height="15.0" fill="rgb(207,38,12)" rx="2" ry="2" />
<text  x="21.93" y="191.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Node*&gt; (3,997 samples, 1.34%)</title><rect x="1173.5" y="133" width="15.8" height="15.0" fill="rgb(245,14,14)" rx="2" ry="2" />
<text  x="1176.51" y="143.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (159 samples, 0.05%)</title><rect x="179.3" y="85" width="0.6" height="15.0" fill="rgb(212,211,45)" rx="2" ry="2" />
<text  x="182.27" y="95.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (1,549 samples, 0.52%)</title><rect x="221.8" y="117" width="6.1" height="15.0" fill="rgb(219,63,3)" rx="2" ry="2" />
<text  x="224.83" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement@plt (36 samples, 0.01%)</title><rect x="23.0" y="101" width="0.2" height="15.0" fill="rgb(249,134,28)" rx="2" ry="2" />
<text  x="26.04" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (70 samples, 0.02%)</title><rect x="10.1" y="149" width="0.2" height="15.0" fill="rgb(238,133,6)" rx="2" ry="2" />
<text  x="13.05" y="159.5" ></text>
</g>
<g >
<title>std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, std::less&lt;waveElement&gt; &gt; (110,686 samples, 37.00%)</title><rect x="569.0" y="117" width="436.6" height="15.0" fill="rgb(245,202,52)" rx="2" ry="2" />
<text  x="571.99" y="127.5" >std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, st..</text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (272 samples, 0.09%)</title><rect x="186.7" y="85" width="1.0" height="15.0" fill="rgb(241,88,41)" rx="2" ry="2" />
<text  x="189.67" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;waveElement&gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, waveElement&gt; (1,287 samples, 0.43%)</title><rect x="1080.0" y="101" width="5.1" height="15.0" fill="rgb(234,186,27)" rx="2" ry="2" />
<text  x="1082.99" y="111.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::_M_emplace_equal&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; (39 samples, 0.01%)</title><rect x="16.8" y="261" width="0.1" height="15.0" fill="rgb(215,144,16)" rx="2" ry="2" />
<text  x="19.77" y="271.5" ></text>
</g>
<g >
<title>memmove@plt (395 samples, 0.13%)</title><rect x="216.7" y="101" width="1.5" height="15.0" fill="rgb(228,187,23)" rx="2" ry="2" />
<text  x="219.68" y="111.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (44 samples, 0.01%)</title><rect x="10.7" y="197" width="0.2" height="15.0" fill="rgb(240,173,27)" rx="2" ry="2" />
<text  x="13.75" y="207.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (806 samples, 0.27%)</title><rect x="1000.7" y="69" width="3.2" height="15.0" fill="rgb(232,119,51)" rx="2" ry="2" />
<text  x="1003.75" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;double, double&gt;, std::allocator&lt;std::pair&lt;double, double&gt; &gt; &gt;::operator[] (467 samples, 0.16%)</title><rect x="1147.2" y="133" width="1.8" height="15.0" fill="rgb(233,185,0)" rx="2" ry="2" />
<text  x="1150.16" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (618 samples, 0.21%)</title><rect x="82.9" y="101" width="2.5" height="15.0" fill="rgb(218,155,38)" rx="2" ry="2" />
<text  x="85.94" y="111.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (272 samples, 0.09%)</title><rect x="186.7" y="101" width="1.0" height="15.0" fill="rgb(215,147,44)" rx="2" ry="2" />
<text  x="189.67" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (138 samples, 0.05%)</title><rect x="69.8" y="53" width="0.5" height="15.0" fill="rgb(210,54,1)" rx="2" ry="2" />
<text  x="72.80" y="63.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;Node*&gt;, Node*&gt; (33 samples, 0.01%)</title><rect x="149.7" y="117" width="0.2" height="15.0" fill="rgb(245,62,24)" rx="2" ry="2" />
<text  x="152.74" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (32 samples, 0.01%)</title><rect x="41.9" y="69" width="0.1" height="15.0" fill="rgb(246,16,6)" rx="2" ry="2" />
<text  x="44.91" y="79.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (137 samples, 0.05%)</title><rect x="24.9" y="85" width="0.6" height="15.0" fill="rgb(225,64,25)" rx="2" ry="2" />
<text  x="27.91" y="95.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::select_on_container_copy_construction (66 samples, 0.02%)</title><rect x="159.3" y="85" width="0.2" height="15.0" fill="rgb(208,179,10)" rx="2" ry="2" />
<text  x="162.26" y="95.5" ></text>
</g>
<g >
<title>memmove@plt (408 samples, 0.14%)</title><rect x="174.5" y="85" width="1.6" height="15.0" fill="rgb(221,55,28)" rx="2" ry="2" />
<text  x="177.48" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;int const, int&gt;&amp;&gt; (1,267 samples, 0.42%)</title><rect x="504.9" y="69" width="5.0" height="15.0" fill="rgb(232,45,33)" rx="2" ry="2" />
<text  x="507.90" y="79.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;, std::less&lt;waveElement&gt; &gt;::pop (113,115 samples, 37.82%)</title><rect x="564.7" y="133" width="446.3" height="15.0" fill="rgb(244,13,43)" rx="2" ry="2" />
<text  x="567.73" y="143.5" >std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std..</text>
</g>
<g >
<title>findStreetSegmentsOfIntersection (11,901 samples, 3.98%)</title><rect x="102.8" y="133" width="46.9" height="15.0" fill="rgb(211,10,52)" rx="2" ry="2" />
<text  x="105.76" y="143.5" >find..</text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (219 samples, 0.07%)</title><rect x="1085.1" y="101" width="0.8" height="15.0" fill="rgb(242,178,24)" rx="2" ry="2" />
<text  x="1088.07" y="111.5" ></text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (1,857 samples, 0.62%)</title><rect x="993.4" y="69" width="7.3" height="15.0" fill="rgb(215,101,44)" rx="2" ry="2" />
<text  x="996.42" y="79.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, EdgeProperties&gt;::load_object_data (215 samples, 0.07%)</title><rect x="13.8" y="165" width="0.8" height="15.0" fill="rgb(226,82,42)" rx="2" ry="2" />
<text  x="16.80" y="175.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (2,142 samples, 0.72%)</title><rect x="18.6" y="277" width="8.5" height="15.0" fill="rgb(231,7,17)" rx="2" ry="2" />
<text  x="21.65" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator() (26 samples, 0.01%)</title><rect x="511.2" y="69" width="0.1" height="15.0" fill="rgb(243,225,47)" rx="2" ry="2" />
<text  x="514.17" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2,043 samples, 0.68%)</title><rect x="397.5" y="117" width="8.1" height="15.0" fill="rgb(232,218,27)" rx="2" ry="2" />
<text  x="400.49" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (9,140 samples, 3.06%)</title><rect x="511.3" y="85" width="36.0" height="15.0" fill="rgb(243,139,53)" rx="2" ry="2" />
<text  x="514.27" y="95.5" >std..</text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (226 samples, 0.08%)</title><rect x="227.9" y="117" width="0.9" height="15.0" fill="rgb(254,148,39)" rx="2" ry="2" />
<text  x="230.94" y="127.5" ></text>
</g>
<g >
<title>std::_Construct&lt;waveElement, waveElement&gt; (29 samples, 0.01%)</title><rect x="1024.3" y="85" width="0.2" height="15.0" fill="rgb(240,161,48)" rx="2" ry="2" />
<text  x="1027.34" y="95.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Node&gt; &gt;::construct&lt;Node, Node const&amp;&gt; (1,756 samples, 0.59%)</title><rect x="151.9" y="117" width="6.9" height="15.0" fill="rgb(230,40,34)" rx="2" ry="2" />
<text  x="154.86" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator+ (49,042 samples, 16.40%)</title><rect x="692.0" y="69" width="193.5" height="15.0" fill="rgb(253,135,38)" rx="2" ry="2" />
<text  x="695.00" y="79.5" >__gnu_cxx::__normal_itera..</text>
</g>
<g >
<title>UnitTest::RunAllTests (294,639 samples, 98.50%)</title><rect x="27.1" y="261" width="1162.4" height="15.0" fill="rgb(230,33,51)" rx="2" ry="2" />
<text  x="30.10" y="271.5" >UnitTest::RunAllTests</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;waveElement&gt;::construct&lt;waveElement, waveElement const&amp;&gt; (492 samples, 0.16%)</title><rect x="1033.9" y="101" width="1.9" height="15.0" fill="rgb(253,53,41)" rx="2" ry="2" />
<text  x="1036.88" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (334 samples, 0.11%)</title><rect x="1049.1" y="101" width="1.3" height="15.0" fill="rgb(251,83,16)" rx="2" ry="2" />
<text  x="1052.11" y="111.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (155 samples, 0.05%)</title><rect x="992.8" y="53" width="0.6" height="15.0" fill="rgb(254,60,47)" rx="2" ry="2" />
<text  x="995.81" y="63.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (52 samples, 0.02%)</title><rect x="16.1" y="229" width="0.2" height="15.0" fill="rgb(228,41,3)" rx="2" ry="2" />
<text  x="19.11" y="239.5" ></text>
</g>
<g >
<title>malloc@plt (2,201 samples, 0.74%)</title><rect x="115.7" y="53" width="8.7" height="15.0" fill="rgb(229,119,2)" rx="2" ry="2" />
<text  x="118.72" y="63.5" ></text>
</g>
<g >
<title>malloc_consolidate (154 samples, 0.05%)</title><rect x="27.1" y="149" width="0.6" height="15.0" fill="rgb(211,28,48)" rx="2" ry="2" />
<text  x="30.11" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::end (657 samples, 0.22%)</title><rect x="1008.4" y="117" width="2.6" height="15.0" fill="rgb(209,180,17)" rx="2" ry="2" />
<text  x="1011.38" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (67 samples, 0.02%)</title><rect x="19.9" y="133" width="0.3" height="15.0" fill="rgb(248,137,1)" rx="2" ry="2" />
<text  x="22.91" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (293 samples, 0.10%)</title><rect x="1027.0" y="101" width="1.1" height="15.0" fill="rgb(212,137,52)" rx="2" ry="2" />
<text  x="1029.98" y="111.5" ></text>
</g>
<g >
<title>findPathBetweenIntersections (294,473 samples, 98.45%)</title><rect x="27.7" y="165" width="1161.7" height="15.0" fill="rgb(220,212,45)" rx="2" ry="2" />
<text  x="30.74" y="175.5" >findPathBetweenIntersections</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, int&gt; &gt;::_M_v (109 samples, 0.04%)</title><rect x="509.9" y="69" width="0.4" height="15.0" fill="rgb(223,205,38)" rx="2" ry="2" />
<text  x="512.90" y="79.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (55 samples, 0.02%)</title><rect x="24.7" y="53" width="0.2" height="15.0" fill="rgb(253,41,17)" rx="2" ry="2" />
<text  x="27.70" y="63.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::select_on_container_copy_construction (121 samples, 0.04%)</title><rect x="197.7" y="101" width="0.5" height="15.0" fill="rgb(205,15,6)" rx="2" ry="2" />
<text  x="200.72" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (337 samples, 0.11%)</title><rect x="215.3" y="101" width="1.4" height="15.0" fill="rgb(243,209,6)" rx="2" ry="2" />
<text  x="218.35" y="111.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (1,718 samples, 0.57%)</title><rect x="179.9" y="101" width="6.8" height="15.0" fill="rgb(246,38,40)" rx="2" ry="2" />
<text  x="182.90" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (38,697 samples, 12.94%)</title><rect x="397.5" y="133" width="152.7" height="15.0" fill="rgb(231,200,37)" rx="2" ry="2" />
<text  x="400.49" y="143.5" >std::_Hashtable&lt;int..</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;*&gt; (36 samples, 0.01%)</title><rect x="10.5" y="245" width="0.1" height="15.0" fill="rgb(220,161,45)" rx="2" ry="2" />
<text  x="13.50" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (144 samples, 0.05%)</title><rect x="178.7" y="69" width="0.6" height="15.0" fill="rgb(208,3,15)" rx="2" ry="2" />
<text  x="181.70" y="79.5" ></text>
</g>
<g >
<title>_int_free (154 samples, 0.05%)</title><rect x="27.1" y="165" width="0.6" height="15.0" fill="rgb(208,139,49)" rx="2" ry="2" />
<text  x="30.11" y="175.5" ></text>
</g>
<g >
<title>_dl_start (60 samples, 0.02%)</title><rect x="10.7" y="261" width="0.2" height="15.0" fill="rgb(242,103,15)" rx="2" ry="2" />
<text  x="13.69" y="271.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (26 samples, 0.01%)</title><rect x="19.1" y="149" width="0.1" height="15.0" fill="rgb(250,109,34)" rx="2" ry="2" />
<text  x="22.12" y="159.5" ></text>
</g>
<g >
<title>std::operator==&lt;waveElement*&gt; (28 samples, 0.01%)</title><rect x="1024.5" y="69" width="0.1" height="15.0" fill="rgb(248,208,19)" rx="2" ry="2" />
<text  x="1027.50" y="79.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,133 samples, 0.71%)</title><rect x="18.7" y="229" width="8.4" height="15.0" fill="rgb(249,104,27)" rx="2" ry="2" />
<text  x="21.68" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::_M_get_insert_equal_pos (32 samples, 0.01%)</title><rect x="16.8" y="245" width="0.1" height="15.0" fill="rgb(216,105,0)" rx="2" ry="2" />
<text  x="19.79" y="255.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, long, waveElement, __gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;waveElement&gt; &gt; &gt; (13,817 samples, 4.62%)</title><rect x="938.9" y="69" width="54.5" height="15.0" fill="rgb(251,160,31)" rx="2" ry="2" />
<text  x="941.91" y="79.5" >std::..</text>
</g>
<g >
<title>std::vector&lt;SegmentData, std::allocator&lt;SegmentData&gt; &gt;::operator[] (126 samples, 0.04%)</title><rect x="395.4" y="117" width="0.5" height="15.0" fill="rgb(239,4,5)" rx="2" ry="2" />
<text  x="398.36" y="127.5" ></text>
</g>
<g >
<title>strcmp@plt (54 samples, 0.02%)</title><rect x="19.6" y="117" width="0.2" height="15.0" fill="rgb(246,23,13)" rx="2" ry="2" />
<text  x="22.61" y="127.5" ></text>
</g>
<g >
<title>std::forward&lt;waveElement const&amp;&gt; (329 samples, 0.11%)</title><rect x="1042.7" y="85" width="1.3" height="15.0" fill="rgb(235,210,10)" rx="2" ry="2" />
<text  x="1045.70" y="95.5" ></text>
</g>
<g >
<title>operator new (2,117 samples, 0.71%)</title><rect x="201.7" y="85" width="8.4" height="15.0" fill="rgb(254,82,29)" rx="2" ry="2" />
<text  x="204.75" y="95.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (4,377 samples, 1.46%)</title><rect x="111.9" y="101" width="17.2" height="15.0" fill="rgb(231,0,5)" rx="2" ry="2" />
<text  x="114.86" y="111.5" ></text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (119 samples, 0.04%)</title><rect x="1086.5" y="117" width="0.5" height="15.0" fill="rgb(221,81,40)" rx="2" ry="2" />
<text  x="1089.48" y="127.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (471 samples, 0.16%)</title><rect x="989.8" y="37" width="1.8" height="15.0" fill="rgb(248,26,35)" rx="2" ry="2" />
<text  x="992.78" y="47.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (522 samples, 0.17%)</title><rect x="1144.0" y="133" width="2.0" height="15.0" fill="rgb(249,177,4)" rx="2" ry="2" />
<text  x="1146.97" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (453 samples, 0.15%)</title><rect x="13.4" y="213" width="1.8" height="15.0" fill="rgb(220,160,39)" rx="2" ry="2" />
<text  x="16.38" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (155 samples, 0.05%)</title><rect x="231.4" y="101" width="0.6" height="15.0" fill="rgb(237,196,52)" rx="2" ry="2" />
<text  x="234.40" y="111.5" ></text>
</g>
<g >
<title>memmove@plt (1,232 samples, 0.41%)</title><rect x="129.1" y="85" width="4.9" height="15.0" fill="rgb(246,207,37)" rx="2" ry="2" />
<text  x="132.13" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (224 samples, 0.07%)</title><rect x="1141.8" y="133" width="0.9" height="15.0" fill="rgb(213,226,54)" rx="2" ry="2" />
<text  x="1144.78" y="143.5" ></text>
</g>
<g >
<title>strcmp@plt (194 samples, 0.06%)</title><rect x="22.3" y="85" width="0.7" height="15.0" fill="rgb(228,169,40)" rx="2" ry="2" />
<text  x="25.27" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (1,626 samples, 0.54%)</title><rect x="20.3" y="149" width="6.4" height="15.0" fill="rgb(229,33,31)" rx="2" ry="2" />
<text  x="23.26" y="159.5" ></text>
</g>
<g >
<title>std::__addressof&lt;Node&gt; (27 samples, 0.01%)</title><rect x="1189.2" y="117" width="0.1" height="15.0" fill="rgb(250,55,25)" rx="2" ry="2" />
<text  x="1192.17" y="127.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (372 samples, 0.12%)</title><rect x="24.0" y="101" width="1.5" height="15.0" fill="rgb(250,79,27)" rx="2" ry="2" />
<text  x="26.99" y="111.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, long, waveElement, __gnu_cxx::__ops::_Iter_comp_iter&lt;std::less&lt;waveElement&gt; &gt; &gt; (103,725 samples, 34.68%)</title><rect x="594.7" y="85" width="409.2" height="15.0" fill="rgb(240,165,0)" rx="2" ry="2" />
<text  x="597.73" y="95.5" >std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;waveEle..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (47 samples, 0.02%)</title><rect x="16.1" y="213" width="0.2" height="15.0" fill="rgb(228,59,39)" rx="2" ry="2" />
<text  x="19.13" y="223.5" ></text>
</g>
<g >
<title>getStreetSegmentInfo (213 samples, 0.07%)</title><rect x="12.5" y="261" width="0.9" height="15.0" fill="rgb(218,157,24)" rx="2" ry="2" />
<text  x="15.54" y="271.5" ></text>
</g>
<g >
<title>[unknown] (27 samples, 0.01%)</title><rect x="14.2" y="101" width="0.1" height="15.0" fill="rgb(247,128,41)" rx="2" ry="2" />
<text  x="17.15" y="111.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (2,284 samples, 0.76%)</title><rect x="929.9" y="53" width="9.0" height="15.0" fill="rgb(214,10,16)" rx="2" ry="2" />
<text  x="932.90" y="63.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, int&gt;&amp;&gt; (242 samples, 0.08%)</title><rect x="508.9" y="53" width="1.0" height="15.0" fill="rgb(234,175,20)" rx="2" ry="2" />
<text  x="511.95" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (892 samples, 0.30%)</title><rect x="187.7" y="101" width="3.6" height="15.0" fill="rgb(213,32,41)" rx="2" ry="2" />
<text  x="190.75" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::_M_realloc_insert&lt;waveElement const&amp;&gt; (102 samples, 0.03%)</title><rect x="1024.3" y="117" width="0.4" height="15.0" fill="rgb(240,228,2)" rx="2" ry="2" />
<text  x="1027.31" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt;, std::allocator&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt; &gt; &gt;::_M_realloc_insert&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt; &gt; (86 samples, 0.03%)</title><rect x="14.7" y="181" width="0.3" height="15.0" fill="rgb(230,18,9)" rx="2" ry="2" />
<text  x="17.71" y="191.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (146 samples, 0.05%)</title><rect x="137.2" y="85" width="0.6" height="15.0" fill="rgb(252,116,15)" rx="2" ry="2" />
<text  x="140.22" y="95.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (453 samples, 0.15%)</title><rect x="13.4" y="261" width="1.8" height="15.0" fill="rgb(243,125,26)" rx="2" ry="2" />
<text  x="16.38" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (36 samples, 0.01%)</title><rect x="14.9" y="133" width="0.1" height="15.0" fill="rgb(224,60,27)" rx="2" ry="2" />
<text  x="17.86" y="143.5" ></text>
</g>
<g >
<title>[unknown] (148 samples, 0.05%)</title><rect x="19.3" y="149" width="0.5" height="15.0" fill="rgb(222,195,13)" rx="2" ry="2" />
<text  x="22.25" y="159.5" ></text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (297 samples, 0.10%)</title><rect x="991.6" y="53" width="1.2" height="15.0" fill="rgb(247,84,40)" rx="2" ry="2" />
<text  x="994.64" y="63.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (34 samples, 0.01%)</title><rect x="18.7" y="165" width="0.2" height="15.0" fill="rgb(233,56,31)" rx="2" ry="2" />
<text  x="21.74" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (3,996 samples, 1.34%)</title><rect x="199.6" y="101" width="15.7" height="15.0" fill="rgb(239,77,1)" rx="2" ry="2" />
<text  x="202.58" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (28 samples, 0.01%)</title><rect x="26.7" y="165" width="0.1" height="15.0" fill="rgb(229,93,2)" rx="2" ry="2" />
<text  x="29.68" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;std::less&lt;waveElement&gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; &gt; (13,545 samples, 4.53%)</title><rect x="885.5" y="69" width="53.4" height="15.0" fill="rgb(238,88,30)" rx="2" ry="2" />
<text  x="888.48" y="79.5" >__gnu..</text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (89 samples, 0.03%)</title><rect x="1189.5" y="277" width="0.4" height="15.0" fill="rgb(235,10,42)" rx="2" ry="2" />
<text  x="1192.51" y="287.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (793 samples, 0.27%)</title><rect x="218.2" y="101" width="3.2" height="15.0" fill="rgb(230,194,18)" rx="2" ry="2" />
<text  x="221.23" y="111.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (28 samples, 0.01%)</title><rect x="1189.5" y="213" width="0.1" height="15.0" fill="rgb(210,218,39)" rx="2" ry="2" />
<text  x="1192.52" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (6,450 samples, 2.16%)</title><rect x="232.4" y="133" width="25.5" height="15.0" fill="rgb(227,49,27)" rx="2" ry="2" />
<text  x="235.41" y="143.5" >s..</text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;std::less&lt;waveElement&gt; &gt; &gt; (107,947 samples, 36.09%)</title><rect x="579.8" y="101" width="425.8" height="15.0" fill="rgb(247,19,30)" rx="2" ry="2" />
<text  x="582.79" y="111.5" >std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*,..</text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (43 samples, 0.01%)</title><rect x="1189.5" y="229" width="0.2" height="15.0" fill="rgb(227,46,35)" rx="2" ry="2" />
<text  x="1192.51" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (10,364 samples, 3.46%)</title><rect x="191.5" y="133" width="40.9" height="15.0" fill="rgb(241,136,25)" rx="2" ry="2" />
<text  x="194.53" y="143.5" >std..</text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (367 samples, 0.12%)</title><rect x="65.9" y="85" width="1.4" height="15.0" fill="rgb(223,198,29)" rx="2" ry="2" />
<text  x="68.85" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (242 samples, 0.08%)</title><rect x="110.9" y="101" width="1.0" height="15.0" fill="rgb(248,134,16)" rx="2" ry="2" />
<text  x="113.91" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (1,152 samples, 0.39%)</title><rect x="78.4" y="101" width="4.5" height="15.0" fill="rgb(246,176,35)" rx="2" ry="2" />
<text  x="81.40" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1,784 samples, 0.60%)</title><rect x="494.9" y="85" width="7.0" height="15.0" fill="rgb(215,218,32)" rx="2" ry="2" />
<text  x="497.90" y="95.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::select_on_container_copy_construction (94 samples, 0.03%)</title><rect x="111.5" y="85" width="0.4" height="15.0" fill="rgb(223,67,5)" rx="2" ry="2" />
<text  x="114.49" y="95.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::end (894 samples, 0.30%)</title><rect x="1087.2" y="133" width="3.5" height="15.0" fill="rgb(252,10,12)" rx="2" ry="2" />
<text  x="1090.18" y="143.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (226 samples, 0.08%)</title><rect x="227.9" y="101" width="0.9" height="15.0" fill="rgb(238,47,2)" rx="2" ry="2" />
<text  x="230.94" y="111.5" ></text>
</g>
<g >
<title>__run_exit_handlers (67 samples, 0.02%)</title><rect x="10.4" y="277" width="0.3" height="15.0" fill="rgb(233,159,42)" rx="2" ry="2" />
<text  x="13.41" y="287.5" ></text>
</g>
<g >
<title>malloc (110 samples, 0.04%)</title><rect x="26.1" y="117" width="0.4" height="15.0" fill="rgb(250,59,33)" rx="2" ry="2" />
<text  x="29.09" y="127.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.01%)</title><rect x="15.2" y="229" width="0.1" height="15.0" fill="rgb(207,140,32)" rx="2" ry="2" />
<text  x="18.18" y="239.5" ></text>
</g>
<g >
<title>operator new (42 samples, 0.01%)</title><rect x="16.5" y="229" width="0.1" height="15.0" fill="rgb(242,159,16)" rx="2" ry="2" />
<text  x="19.47" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, int&gt;, false, false&gt;::operator-&gt; (2,127 samples, 0.71%)</title><rect x="550.2" y="133" width="8.3" height="15.0" fill="rgb(212,165,39)" rx="2" ry="2" />
<text  x="553.15" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (44 samples, 0.01%)</title><rect x="162.4" y="69" width="0.2" height="15.0" fill="rgb(205,97,46)" rx="2" ry="2" />
<text  x="165.40" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (44 samples, 0.01%)</title><rect x="115.5" y="69" width="0.2" height="15.0" fill="rgb(221,150,52)" rx="2" ry="2" />
<text  x="118.55" y="79.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Node*, Node&gt; (216 samples, 0.07%)</title><rect x="1172.7" y="133" width="0.8" height="15.0" fill="rgb(244,166,44)" rx="2" ry="2" />
<text  x="1175.66" y="143.5" ></text>
</g>
<g >
<title>Node::~Node (4,079 samples, 1.36%)</title><rect x="86.7" y="133" width="16.1" height="15.0" fill="rgb(216,7,35)" rx="2" ry="2" />
<text  x="89.67" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (347 samples, 0.12%)</title><rect x="509.9" y="85" width="1.4" height="15.0" fill="rgb(216,85,42)" rx="2" ry="2" />
<text  x="512.90" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;Feature, std::allocator&lt;Feature&gt; &gt;::_M_default_append (27 samples, 0.01%)</title><rect x="27.0" y="197" width="0.1" height="15.0" fill="rgb(217,45,28)" rx="2" ry="2" />
<text  x="29.97" y="207.5" ></text>
</g>
<g >
<title>dl_main (59 samples, 0.02%)</title><rect x="10.7" y="229" width="0.2" height="15.0" fill="rgb(233,28,33)" rx="2" ry="2" />
<text  x="13.70" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (210 samples, 0.07%)</title><rect x="548.0" y="117" width="0.8" height="15.0" fill="rgb(214,130,12)" rx="2" ry="2" />
<text  x="550.96" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, NodeInfo&gt;::load_object_data (34 samples, 0.01%)</title><rect x="10.2" y="133" width="0.1" height="15.0" fill="rgb(245,39,0)" rx="2" ry="2" />
<text  x="13.19" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator-- (456 samples, 0.15%)</title><rect x="573.8" y="101" width="1.8" height="15.0" fill="rgb(206,77,52)" rx="2" ry="2" />
<text  x="576.81" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (117 samples, 0.04%)</title><rect x="14.1" y="133" width="0.4" height="15.0" fill="rgb(236,152,13)" rx="2" ry="2" />
<text  x="17.07" y="143.5" ></text>
</g>
<g >
<title>malloc (36 samples, 0.01%)</title><rect x="14.9" y="149" width="0.1" height="15.0" fill="rgb(238,100,0)" rx="2" ry="2" />
<text  x="17.86" y="159.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (1,232 samples, 0.41%)</title><rect x="129.1" y="101" width="4.9" height="15.0" fill="rgb(226,33,31)" rx="2" ry="2" />
<text  x="132.13" y="111.5" ></text>
</g>
<g >
<title>operator new (50 samples, 0.02%)</title><rect x="151.2" y="101" width="0.2" height="15.0" fill="rgb(253,225,46)" rx="2" ry="2" />
<text  x="154.22" y="111.5" ></text>
</g>
<g >
<title>_int_malloc (31 samples, 0.01%)</title><rect x="16.5" y="197" width="0.1" height="15.0" fill="rgb(205,71,51)" rx="2" ry="2" />
<text  x="19.47" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (965 samples, 0.32%)</title><rect x="170.0" y="69" width="3.8" height="15.0" fill="rgb(235,112,7)" rx="2" ry="2" />
<text  x="172.97" y="79.5" ></text>
</g>
<g >
<title>__dynamic_cast (65 samples, 0.02%)</title><rect x="23.4" y="101" width="0.2" height="15.0" fill="rgb(241,99,26)" rx="2" ry="2" />
<text  x="26.36" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (9,792 samples, 3.27%)</title><rect x="39.8" y="101" width="38.6" height="15.0" fill="rgb(209,29,28)" rx="2" ry="2" />
<text  x="42.77" y="111.5" >std..</text>
</g>
<g >
<title>std::pow&lt;double, int&gt; (718 samples, 0.24%)</title><rect x="366.1" y="117" width="2.8" height="15.0" fill="rgb(249,14,4)" rx="2" ry="2" />
<text  x="369.07" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_realloc_insert&lt;Node const&amp;&gt; (43 samples, 0.01%)</title><rect x="149.7" y="133" width="0.2" height="15.0" fill="rgb(208,186,42)" rx="2" ry="2" />
<text  x="152.71" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (1,432 samples, 0.48%)</title><rect x="976.6" y="37" width="5.7" height="15.0" fill="rgb(206,76,46)" rx="2" ry="2" />
<text  x="979.64" y="47.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (59 samples, 0.02%)</title><rect x="10.7" y="245" width="0.2" height="15.0" fill="rgb(247,154,29)" rx="2" ry="2" />
<text  x="13.70" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, int&gt;, false, false&gt;::_Node_iterator (347 samples, 0.12%)</title><rect x="548.8" y="117" width="1.4" height="15.0" fill="rgb(240,80,16)" rx="2" ry="2" />
<text  x="551.78" y="127.5" ></text>
</g>
<g >
<title>Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper::RunImpl (294,639 samples, 98.50%)</title><rect x="27.1" y="181" width="1162.4" height="15.0" fill="rgb(245,13,50)" rx="2" ry="2" />
<text  x="30.10" y="191.5" >Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper::RunImpl</text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (54 samples, 0.02%)</title><rect x="19.6" y="133" width="0.2" height="15.0" fill="rgb(229,80,2)" rx="2" ry="2" />
<text  x="22.61" y="143.5" ></text>
</g>
<g >
<title>malloc (3,291 samples, 1.10%)</title><rect x="42.0" y="69" width="13.0" height="15.0" fill="rgb(253,16,10)" rx="2" ry="2" />
<text  x="45.04" y="79.5" ></text>
</g>
<g >
<title>Feature::Feature (27 samples, 0.01%)</title><rect x="27.0" y="181" width="0.1" height="15.0" fill="rgb(247,139,8)" rx="2" ry="2" />
<text  x="29.97" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (453 samples, 0.15%)</title><rect x="13.4" y="229" width="1.8" height="15.0" fill="rgb(210,178,18)" rx="2" ry="2" />
<text  x="16.38" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (102 samples, 0.03%)</title><rect x="232.0" y="117" width="0.4" height="15.0" fill="rgb(237,175,52)" rx="2" ry="2" />
<text  x="235.01" y="127.5" ></text>
</g>
<g >
<title>waveElement::waveElement (631 samples, 0.21%)</title><rect x="1170.2" y="133" width="2.5" height="15.0" fill="rgb(212,138,30)" rx="2" ry="2" />
<text  x="1173.17" y="143.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (60 samples, 0.02%)</title><rect x="1189.5" y="245" width="0.3" height="15.0" fill="rgb(238,88,42)" rx="2" ry="2" />
<text  x="1192.51" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (837 samples, 0.28%)</title><rect x="1076.7" y="85" width="3.3" height="15.0" fill="rgb(220,224,9)" rx="2" ry="2" />
<text  x="1079.69" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (340 samples, 0.11%)</title><rect x="196.9" y="117" width="1.3" height="15.0" fill="rgb(206,229,20)" rx="2" ry="2" />
<text  x="199.86" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt; &gt; &gt;::~vector (38 samples, 0.01%)</title><rect x="10.5" y="261" width="0.1" height="15.0" fill="rgb(232,105,3)" rx="2" ry="2" />
<text  x="13.49" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_begin (67 samples, 0.02%)</title><rect x="494.6" y="85" width="0.3" height="15.0" fill="rgb(249,96,26)" rx="2" ry="2" />
<text  x="497.64" y="95.5" ></text>
</g>
<g >
<title>[unknown] (38 samples, 0.01%)</title><rect x="13.8" y="133" width="0.2" height="15.0" fill="rgb(209,206,30)" rx="2" ry="2" />
<text  x="16.84" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,883 samples, 0.63%)</title><rect x="19.3" y="165" width="7.4" height="15.0" fill="rgb(216,47,1)" rx="2" ry="2" />
<text  x="22.25" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;StreetSegmentInfo, std::allocator&lt;StreetSegmentInfo&gt; &gt;::operator[] (332 samples, 0.11%)</title><rect x="1142.7" y="133" width="1.3" height="15.0" fill="rgb(228,211,51)" rx="2" ry="2" />
<text  x="1145.66" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::base (235 samples, 0.08%)</title><rect x="1054.5" y="101" width="1.0" height="15.0" fill="rgb(215,73,1)" rx="2" ry="2" />
<text  x="1057.54" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (1,330 samples, 0.44%)</title><rect x="210.1" y="85" width="5.2" height="15.0" fill="rgb(250,31,43)" rx="2" ry="2" />
<text  x="213.10" y="95.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load (50 samples, 0.02%)</title><rect x="19.0" y="165" width="0.2" height="15.0" fill="rgb(235,35,35)" rx="2" ry="2" />
<text  x="22.03" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::equal_range (32 samples, 0.01%)</title><rect x="15.6" y="261" width="0.1" height="15.0" fill="rgb(231,56,35)" rx="2" ry="2" />
<text  x="18.62" y="271.5" ></text>
</g>
<g >
<title>findStreetSegmentsOfIntersection (49 samples, 0.02%)</title><rect x="11.6" y="261" width="0.2" height="15.0" fill="rgb(208,75,41)" rx="2" ry="2" />
<text  x="14.65" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator- (844 samples, 0.28%)</title><rect x="1047.1" y="117" width="3.3" height="15.0" fill="rgb(207,180,39)" rx="2" ry="2" />
<text  x="1050.10" y="127.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (912 samples, 0.30%)</title><rect x="218.2" y="117" width="3.6" height="15.0" fill="rgb(241,192,30)" rx="2" ry="2" />
<text  x="221.23" y="127.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (963 samples, 0.32%)</title><rect x="134.0" y="101" width="3.8" height="15.0" fill="rgb(236,53,43)" rx="2" ry="2" />
<text  x="136.99" y="111.5" ></text>
</g>
<g >
<title>main (92 samples, 0.03%)</title><rect x="10.0" y="261" width="0.4" height="15.0" fill="rgb(213,19,48)" rx="2" ry="2" />
<text  x="13.04" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (178 samples, 0.06%)</title><rect x="173.8" y="85" width="0.7" height="15.0" fill="rgb(251,190,26)" rx="2" ry="2" />
<text  x="176.78" y="95.5" ></text>
</g>
<g >
<title>_int_malloc (3,291 samples, 1.10%)</title><rect x="42.0" y="53" width="13.0" height="15.0" fill="rgb(214,100,14)" rx="2" ry="2" />
<text  x="45.04" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (805 samples, 0.27%)</title><rect x="228.8" y="117" width="3.2" height="15.0" fill="rgb(229,88,51)" rx="2" ry="2" />
<text  x="231.83" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (45 samples, 0.02%)</title><rect x="17.8" y="261" width="0.2" height="15.0" fill="rgb(205,165,5)" rx="2" ry="2" />
<text  x="20.81" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (200 samples, 0.07%)</title><rect x="1007.6" y="101" width="0.8" height="15.0" fill="rgb(253,165,24)" rx="2" ry="2" />
<text  x="1010.59" y="111.5" ></text>
</g>
<g >
<title>__libc_start_main (92 samples, 0.03%)</title><rect x="10.0" y="277" width="0.4" height="15.0" fill="rgb(223,23,19)" rx="2" ry="2" />
<text  x="13.04" y="287.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;Feature, std::allocator&lt;Feature&gt; &gt; &gt;::load_object_data (2,127 samples, 0.71%)</title><rect x="18.7" y="213" width="8.4" height="15.0" fill="rgb(222,142,43)" rx="2" ry="2" />
<text  x="21.68" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (35,313 samples, 11.81%)</title><rect x="408.0" y="101" width="139.3" height="15.0" fill="rgb(241,159,49)" rx="2" ry="2" />
<text  x="411.02" y="111.5" >std::_Hashtable&lt;i..</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (11,538 samples, 3.86%)</title><rect x="103.8" y="117" width="45.6" height="15.0" fill="rgb(221,219,19)" rx="2" ry="2" />
<text  x="106.85" y="127.5" >std:..</text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::begin (693 samples, 0.23%)</title><rect x="1005.6" y="117" width="2.8" height="15.0" fill="rgb(240,80,7)" rx="2" ry="2" />
<text  x="1008.65" y="127.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::find (12,945 samples, 4.33%)</title><rect x="1090.7" y="133" width="51.1" height="15.0" fill="rgb(251,203,14)" rx="2" ry="2" />
<text  x="1093.71" y="143.5" >std::..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (161 samples, 0.05%)</title><rect x="25.5" y="133" width="0.6" height="15.0" fill="rgb(238,136,33)" rx="2" ry="2" />
<text  x="28.45" y="143.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;waveElement*&gt;, waveElement*&gt; (68 samples, 0.02%)</title><rect x="1024.3" y="101" width="0.3" height="15.0" fill="rgb(246,158,5)" rx="2" ry="2" />
<text  x="1027.34" y="111.5" ></text>
</g>
<g >
<title>UnitTest::ExecuteTest&lt;Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper&gt; (294,639 samples, 98.50%)</title><rect x="27.1" y="197" width="1162.4" height="15.0" fill="rgb(245,219,47)" rx="2" ry="2" />
<text  x="30.10" y="207.5" >UnitTest::ExecuteTest&lt;Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper&gt;</text>
</g>
<g >
<title>Node::Node (14,238 samples, 4.76%)</title><rect x="30.5" y="133" width="56.2" height="15.0" fill="rgb(209,216,11)" rx="2" ry="2" />
<text  x="33.50" y="143.5" >Node:..</text>
</g>
<g >
<title>traceBack (41 samples, 0.01%)</title><rect x="1189.3" y="149" width="0.1" height="15.0" fill="rgb(226,169,33)" rx="2" ry="2" />
<text  x="1192.28" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::base (285 samples, 0.10%)</title><rect x="593.6" y="69" width="1.1" height="15.0" fill="rgb(251,115,47)" rx="2" ry="2" />
<text  x="596.60" y="79.5" ></text>
</g>
<g >
<title>malloc@plt (2,117 samples, 0.71%)</title><rect x="201.7" y="69" width="8.4" height="15.0" fill="rgb(254,145,23)" rx="2" ry="2" />
<text  x="204.75" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::push_back (10,556 samples, 3.53%)</title><rect x="149.9" y="133" width="41.6" height="15.0" fill="rgb(213,179,17)" rx="2" ry="2" />
<text  x="152.88" y="143.5" >std..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (241 samples, 0.08%)</title><rect x="13.7" y="181" width="0.9" height="15.0" fill="rgb(236,8,48)" rx="2" ry="2" />
<text  x="16.69" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Node&gt;::construct&lt;Node, Node const&amp;&gt; (162 samples, 0.05%)</title><rect x="151.2" y="117" width="0.7" height="15.0" fill="rgb(229,95,14)" rx="2" ry="2" />
<text  x="154.22" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::begin (870 samples, 0.29%)</title><rect x="1024.7" y="117" width="3.4" height="15.0" fill="rgb(244,54,40)" rx="2" ry="2" />
<text  x="1027.71" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (453 samples, 0.15%)</title><rect x="13.4" y="245" width="1.8" height="15.0" fill="rgb(216,136,24)" rx="2" ry="2" />
<text  x="16.38" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (157 samples, 0.05%)</title><rect x="1010.4" y="101" width="0.6" height="15.0" fill="rgb(220,160,26)" rx="2" ry="2" />
<text  x="1013.35" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (66 samples, 0.02%)</title><rect x="191.3" y="101" width="0.2" height="15.0" fill="rgb(215,3,47)" rx="2" ry="2" />
<text  x="194.27" y="111.5" ></text>
</g>
<g >
<title>loadMap (1,941 samples, 0.65%)</title><rect x="11.0" y="277" width="7.6" height="15.0" fill="rgb(244,225,29)" rx="2" ry="2" />
<text  x="13.99" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (159 samples, 0.05%)</title><rect x="547.3" y="117" width="0.7" height="15.0" fill="rgb(213,33,15)" rx="2" ry="2" />
<text  x="550.33" y="127.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 0.02%)</title><rect x="18.7" y="181" width="0.2" height="15.0" fill="rgb(249,149,51)" rx="2" ry="2" />
<text  x="21.71" y="191.5" ></text>
</g>
<g >
<title>path (231,887 samples, 77.53%)</title><rect x="257.9" y="149" width="914.8" height="15.0" fill="rgb(232,153,11)" rx="2" ry="2" />
<text  x="260.86" y="159.5" >path</text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt; &gt; &gt;::operator[] (368 samples, 0.12%)</title><rect x="1149.0" y="133" width="1.5" height="15.0" fill="rgb(252,144,33)" rx="2" ry="2" />
<text  x="1152.00" y="143.5" ></text>
</g>
<g >
<title>all (299,111 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(225,167,32)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;waveElement&gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, waveElement&gt; (2,369 samples, 0.79%)</title><rect x="982.3" y="53" width="9.3" height="15.0" fill="rgb(233,157,32)" rx="2" ry="2" />
<text  x="985.29" y="63.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (118 samples, 0.04%)</title><rect x="16.0" y="245" width="0.4" height="15.0" fill="rgb(220,153,22)" rx="2" ry="2" />
<text  x="18.96" y="255.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (817 samples, 0.27%)</title><rect x="134.0" y="85" width="3.2" height="15.0" fill="rgb(209,49,24)" rx="2" ry="2" />
<text  x="136.99" y="95.5" ></text>
</g>
<g >
<title>memcpy@plt (67 samples, 0.02%)</title><rect x="24.4" y="69" width="0.3" height="15.0" fill="rgb(209,168,5)" rx="2" ry="2" />
<text  x="27.43" y="79.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (796 samples, 0.27%)</title><rect x="62.7" y="85" width="3.2" height="15.0" fill="rgb(229,114,40)" rx="2" ry="2" />
<text  x="65.71" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,224 samples, 0.41%)</title><rect x="20.6" y="133" width="4.9" height="15.0" fill="rgb(222,73,46)" rx="2" ry="2" />
<text  x="23.62" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_erase_at_end (4,213 samples, 1.41%)</title><rect x="1172.7" y="149" width="16.6" height="15.0" fill="rgb(236,81,40)" rx="2" ry="2" />
<text  x="1175.66" y="159.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (806 samples, 0.27%)</title><rect x="176.1" y="85" width="3.2" height="15.0" fill="rgb(242,14,40)" rx="2" ry="2" />
<text  x="179.09" y="95.5" ></text>
</g>
<g >
<title>operator new (141 samples, 0.05%)</title><rect x="1033.9" y="85" width="0.5" height="15.0" fill="rgb(236,123,19)" rx="2" ry="2" />
<text  x="1036.88" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::begin (908 samples, 0.30%)</title><rect x="1166.6" y="117" width="3.6" height="15.0" fill="rgb(205,133,11)" rx="2" ry="2" />
<text  x="1169.59" y="127.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (275 samples, 0.09%)</title><rect x="21.2" y="101" width="1.1" height="15.0" fill="rgb(221,158,35)" rx="2" ry="2" />
<text  x="24.19" y="111.5" ></text>
</g>
<g >
<title>std::operator!=&lt;waveElement*&gt; (30 samples, 0.01%)</title><rect x="1024.5" y="85" width="0.1" height="15.0" fill="rgb(233,121,54)" rx="2" ry="2" />
<text  x="1027.49" y="95.5" ></text>
</g>
<g >
<title>Suiteinter_inter_path_perf_very_hard_public::TestMapFixturefindPathBetweenIntersections_perf_very_hard::RunImpl (294,639 samples, 98.50%)</title><rect x="27.1" y="213" width="1162.4" height="15.0" fill="rgb(252,95,50)" rx="2" ry="2" />
<text  x="30.10" y="223.5" >Suiteinter_inter_path_perf_very_hard_public::TestMapFixturefindPathBetweenIntersections_perf_very_hard::RunImpl</text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (772 samples, 0.26%)</title><rect x="67.3" y="69" width="3.0" height="15.0" fill="rgb(217,165,2)" rx="2" ry="2" />
<text  x="70.30" y="79.5" ></text>
</g>
<g >
<title>std::forward&lt;waveElement const&amp;&gt; (351 samples, 0.12%)</title><rect x="1034.4" y="85" width="1.4" height="15.0" fill="rgb(246,163,45)" rx="2" ry="2" />
<text  x="1037.43" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (73 samples, 0.02%)</title><rect x="149.1" y="101" width="0.3" height="15.0" fill="rgb(249,60,33)" rx="2" ry="2" />
<text  x="152.08" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator+ (6,319 samples, 2.11%)</title><rect x="957.4" y="53" width="24.9" height="15.0" fill="rgb(235,46,46)" rx="2" ry="2" />
<text  x="960.36" y="63.5" >_..</text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (283 samples, 0.09%)</title><rect x="1003.9" y="85" width="1.1" height="15.0" fill="rgb(226,52,7)" rx="2" ry="2" />
<text  x="1006.93" y="95.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;waveElement&gt; &gt;::construct&lt;waveElement, waveElement const&amp;&gt; (2,074 samples, 0.69%)</title><rect x="1035.8" y="101" width="8.2" height="15.0" fill="rgb(228,31,42)" rx="2" ry="2" />
<text  x="1038.82" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_propagate_on_copy_assign (92 samples, 0.03%)</title><rect x="39.2" y="101" width="0.4" height="15.0" fill="rgb(232,6,23)" rx="2" ry="2" />
<text  x="42.21" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,072 samples, 0.69%)</title><rect x="18.7" y="197" width="8.2" height="15.0" fill="rgb(243,24,51)" rx="2" ry="2" />
<text  x="21.71" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (144 samples, 0.05%)</title><rect x="136.6" y="69" width="0.6" height="15.0" fill="rgb(209,132,0)" rx="2" ry="2" />
<text  x="139.65" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int, int&gt; &gt; (63 samples, 0.02%)</title><rect x="16.4" y="245" width="0.3" height="15.0" fill="rgb(243,118,53)" rx="2" ry="2" />
<text  x="19.44" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;waveElement const*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; (1,741 samples, 0.58%)</title><rect x="1150.5" y="117" width="6.8" height="15.0" fill="rgb(211,222,21)" rx="2" ry="2" />
<text  x="1153.46" y="127.5" ></text>
</g>
<g >
<title>loadMap (92 samples, 0.03%)</title><rect x="10.0" y="245" width="0.4" height="15.0" fill="rgb(207,71,34)" rx="2" ry="2" />
<text  x="13.04" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_emplace&lt;std::pair&lt;int, double&gt; &gt; (41 samples, 0.01%)</title><rect x="15.2" y="261" width="0.1" height="15.0" fill="rgb(240,52,17)" rx="2" ry="2" />
<text  x="18.16" y="271.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (92 samples, 0.03%)</title><rect x="10.0" y="229" width="0.4" height="15.0" fill="rgb(223,204,8)" rx="2" ry="2" />
<text  x="13.04" y="239.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (65 samples, 0.02%)</title><rect x="23.4" y="85" width="0.2" height="15.0" fill="rgb(250,146,28)" rx="2" ry="2" />
<text  x="26.36" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (129 samples, 0.04%)</title><rect x="220.9" y="85" width="0.5" height="15.0" fill="rgb(229,81,20)" rx="2" ry="2" />
<text  x="223.85" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; (1,059 samples, 0.35%)</title><rect x="575.6" y="101" width="4.2" height="15.0" fill="rgb(230,22,38)" rx="2" ry="2" />
<text  x="578.61" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (62 samples, 0.02%)</title><rect x="14.2" y="117" width="0.2" height="15.0" fill="rgb(232,139,47)" rx="2" ry="2" />
<text  x="17.15" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, int&gt;, false, false&gt;::_Node_iterator (86 samples, 0.03%)</title><rect x="547.6" y="101" width="0.4" height="15.0" fill="rgb(232,65,31)" rx="2" ry="2" />
<text  x="550.62" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (1,025 samples, 0.34%)</title><rect x="124.4" y="69" width="4.0" height="15.0" fill="rgb(251,112,50)" rx="2" ry="2" />
<text  x="127.41" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; (994 samples, 0.33%)</title><rect x="590.8" y="85" width="3.9" height="15.0" fill="rgb(225,116,11)" rx="2" ry="2" />
<text  x="593.81" y="95.5" ></text>
</g>
</g>
</svg>
