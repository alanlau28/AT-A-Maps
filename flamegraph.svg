<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>[unknown] (60 samples, 0.02%)</title><rect x="18.0" y="181" width="0.2" height="15.0" fill="rgb(233,143,19)" rx="2" ry="2" />
<text  x="20.96" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator= (13,037 samples, 4.26%)</title><rect x="32.8" y="117" width="50.2" height="15.0" fill="rgb(249,168,16)" rx="2" ry="2" />
<text  x="35.75" y="127.5" >std::..</text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (29 samples, 0.01%)</title><rect x="18.0" y="165" width="0.1" height="15.0" fill="rgb(221,184,43)" rx="2" ry="2" />
<text  x="21.01" y="175.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Node*, Node&gt; (206 samples, 0.07%)</title><rect x="1174.0" y="133" width="0.8" height="15.0" fill="rgb(247,134,45)" rx="2" ry="2" />
<text  x="1176.99" y="143.5" ></text>
</g>
<g >
<title>_int_malloc (125 samples, 0.04%)</title><rect x="25.1" y="101" width="0.5" height="15.0" fill="rgb(250,90,47)" rx="2" ry="2" />
<text  x="28.14" y="111.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (59 samples, 0.02%)</title><rect x="10.7" y="245" width="0.2" height="15.0" fill="rgb(239,126,6)" rx="2" ry="2" />
<text  x="13.69" y="255.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (1,057 samples, 0.35%)</title><rect x="65.2" y="85" width="4.1" height="15.0" fill="rgb(233,2,51)" rx="2" ry="2" />
<text  x="68.24" y="95.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (370 samples, 0.12%)</title><rect x="13.2" y="197" width="1.4" height="15.0" fill="rgb(237,65,29)" rx="2" ry="2" />
<text  x="16.15" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (174 samples, 0.06%)</title><rect x="562.3" y="117" width="0.7" height="15.0" fill="rgb(239,81,54)" rx="2" ry="2" />
<text  x="565.32" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (519 samples, 0.17%)</title><rect x="81.0" y="101" width="2.0" height="15.0" fill="rgb(247,182,27)" rx="2" ry="2" />
<text  x="83.99" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (586 samples, 0.19%)</title><rect x="1148.7" y="133" width="2.2" height="15.0" fill="rgb(252,5,6)" rx="2" ry="2" />
<text  x="1151.66" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,877 samples, 0.61%)</title><rect x="18.5" y="165" width="7.2" height="15.0" fill="rgb(206,170,28)" rx="2" ry="2" />
<text  x="21.51" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (148 samples, 0.05%)</title><rect x="24.6" y="133" width="0.5" height="15.0" fill="rgb(249,222,33)" rx="2" ry="2" />
<text  x="27.57" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (68 samples, 0.02%)</title><rect x="13.6" y="117" width="0.3" height="15.0" fill="rgb(229,0,20)" rx="2" ry="2" />
<text  x="16.60" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (44 samples, 0.01%)</title><rect x="11.6" y="245" width="0.1" height="15.0" fill="rgb(209,42,31)" rx="2" ry="2" />
<text  x="14.56" y="255.5" ></text>
</g>
<g >
<title>_start (68 samples, 0.02%)</title><rect x="10.7" y="277" width="0.2" height="15.0" fill="rgb(218,32,9)" rx="2" ry="2" />
<text  x="13.66" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (1,580 samples, 0.52%)</title><rect x="211.2" y="117" width="6.1" height="15.0" fill="rgb(215,165,27)" rx="2" ry="2" />
<text  x="214.18" y="127.5" ></text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (132 samples, 0.04%)</title><rect x="1095.9" y="117" width="0.5" height="15.0" fill="rgb(219,47,40)" rx="2" ry="2" />
<text  x="1098.87" y="127.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (86 samples, 0.03%)</title><rect x="23.8" y="85" width="0.4" height="15.0" fill="rgb(254,192,21)" rx="2" ry="2" />
<text  x="26.83" y="95.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::select_on_container_copy_construction (66 samples, 0.02%)</title><rect x="153.7" y="85" width="0.2" height="15.0" fill="rgb(221,75,8)" rx="2" ry="2" />
<text  x="156.66" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (75 samples, 0.02%)</title><rect x="171.0" y="69" width="0.3" height="15.0" fill="rgb(253,35,33)" rx="2" ry="2" />
<text  x="174.03" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (245 samples, 0.08%)</title><rect x="1146.5" y="133" width="1.0" height="15.0" fill="rgb(208,188,41)" rx="2" ry="2" />
<text  x="1149.51" y="143.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;int const, int&gt;, false&gt; (359 samples, 0.12%)</title><rect x="572.6" y="133" width="1.4" height="15.0" fill="rgb(235,183,23)" rx="2" ry="2" />
<text  x="575.58" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::begin (2,178 samples, 0.71%)</title><rect x="1159.9" y="117" width="8.4" height="15.0" fill="rgb(253,72,36)" rx="2" ry="2" />
<text  x="1162.93" y="127.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (3,914 samples, 1.28%)</title><rect x="107.9" y="101" width="15.1" height="15.0" fill="rgb(252,111,10)" rx="2" ry="2" />
<text  x="110.92" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator+ (6,372 samples, 2.08%)</title><rect x="963.5" y="53" width="24.6" height="15.0" fill="rgb(233,36,43)" rx="2" ry="2" />
<text  x="966.53" y="63.5" >_..</text>
</g>
<g >
<title>memcpy@plt (39 samples, 0.01%)</title><rect x="23.8" y="69" width="0.2" height="15.0" fill="rgb(213,38,44)" rx="2" ry="2" />
<text  x="26.83" y="79.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;*&gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;*&gt; (30 samples, 0.01%)</title><rect x="17.7" y="245" width="0.1" height="15.0" fill="rgb(252,181,34)" rx="2" ry="2" />
<text  x="20.72" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Node&gt;::construct&lt;Node, Node const&amp;&gt; (165 samples, 0.05%)</title><rect x="145.4" y="117" width="0.7" height="15.0" fill="rgb(248,169,22)" rx="2" ry="2" />
<text  x="148.44" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_buckets (35 samples, 0.01%)</title><rect x="15.5" y="197" width="0.1" height="15.0" fill="rgb(207,125,43)" rx="2" ry="2" />
<text  x="18.51" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, Feature&gt;::load_object_data (2,009 samples, 0.66%)</title><rect x="18.2" y="181" width="7.7" height="15.0" fill="rgb(207,219,39)" rx="2" ry="2" />
<text  x="21.19" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (111 samples, 0.04%)</title><rect x="220.7" y="117" width="0.4" height="15.0" fill="rgb(209,55,38)" rx="2" ry="2" />
<text  x="223.69" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;waveElement&gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, waveElement&gt; (1,411 samples, 0.46%)</title><rect x="1088.9" y="101" width="5.4" height="15.0" fill="rgb(226,162,8)" rx="2" ry="2" />
<text  x="1091.88" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (3,360 samples, 1.10%)</title><rect x="153.9" y="101" width="13.0" height="15.0" fill="rgb(208,197,12)" rx="2" ry="2" />
<text  x="156.92" y="111.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (90 samples, 0.03%)</title><rect x="23.0" y="101" width="0.4" height="15.0" fill="rgb(228,103,1)" rx="2" ry="2" />
<text  x="26.02" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (108 samples, 0.04%)</title><rect x="182.6" y="101" width="0.4" height="15.0" fill="rgb(229,115,47)" rx="2" ry="2" />
<text  x="185.63" y="111.5" ></text>
</g>
<g >
<title>findStreetSegmentsOfIntersection (44 samples, 0.01%)</title><rect x="11.6" y="261" width="0.1" height="15.0" fill="rgb(248,163,13)" rx="2" ry="2" />
<text  x="14.56" y="271.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (45 samples, 0.01%)</title><rect x="1189.5" y="229" width="0.2" height="15.0" fill="rgb(251,127,42)" rx="2" ry="2" />
<text  x="1192.51" y="239.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (47 samples, 0.02%)</title><rect x="24.0" y="69" width="0.2" height="15.0" fill="rgb(220,135,6)" rx="2" ry="2" />
<text  x="26.98" y="79.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (177 samples, 0.06%)</title><rect x="21.6" y="101" width="0.7" height="15.0" fill="rgb(213,143,16)" rx="2" ry="2" />
<text  x="24.63" y="111.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.01%)</title><rect x="14.6" y="229" width="0.1" height="15.0" fill="rgb(241,28,51)" rx="2" ry="2" />
<text  x="17.60" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (342 samples, 0.11%)</title><rect x="1056.0" y="101" width="1.3" height="15.0" fill="rgb(251,67,36)" rx="2" ry="2" />
<text  x="1058.97" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int, double&gt; &gt; (40 samples, 0.01%)</title><rect x="14.6" y="245" width="0.1" height="15.0" fill="rgb(209,138,47)" rx="2" ry="2" />
<text  x="17.59" y="255.5" ></text>
</g>
<g >
<title>traceBack (41 samples, 0.01%)</title><rect x="1189.3" y="149" width="0.1" height="15.0" fill="rgb(231,132,21)" rx="2" ry="2" />
<text  x="1192.26" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, int&gt;, false, false&gt;::_Node_iterator (387 samples, 0.13%)</title><rect x="563.7" y="117" width="1.5" height="15.0" fill="rgb(254,85,8)" rx="2" ry="2" />
<text  x="566.67" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;::_M_realloc_insert&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; const&amp;&gt; (27 samples, 0.01%)</title><rect x="14.5" y="181" width="0.1" height="15.0" fill="rgb(243,134,45)" rx="2" ry="2" />
<text  x="17.47" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (76 samples, 0.02%)</title><rect x="143.4" y="101" width="0.3" height="15.0" fill="rgb(240,33,38)" rx="2" ry="2" />
<text  x="146.45" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (2,130 samples, 0.70%)</title><rect x="17.9" y="245" width="8.2" height="15.0" fill="rgb(254,152,53)" rx="2" ry="2" />
<text  x="20.91" y="255.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (104 samples, 0.03%)</title><rect x="24.2" y="85" width="0.4" height="15.0" fill="rgb(216,101,51)" rx="2" ry="2" />
<text  x="27.16" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (192 samples, 0.06%)</title><rect x="153.2" y="101" width="0.7" height="15.0" fill="rgb(224,167,19)" rx="2" ry="2" />
<text  x="156.18" y="111.5" ></text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;std::less&lt;waveElement&gt; &gt; &gt; (105,226 samples, 34.36%)</title><rect x="606.7" y="101" width="405.5" height="15.0" fill="rgb(223,221,37)" rx="2" ry="2" />
<text  x="609.75" y="111.5" >std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElemen..</text>
</g>
<g >
<title>std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, std::less&lt;waveElement&gt; &gt; (108,035 samples, 35.28%)</title><rect x="595.9" y="117" width="416.3" height="15.0" fill="rgb(218,209,8)" rx="2" ry="2" />
<text  x="598.93" y="127.5" >std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*,..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator+ (3,819 samples, 1.25%)</title><rect x="1074.2" y="101" width="14.7" height="15.0" fill="rgb(220,218,17)" rx="2" ry="2" />
<text  x="1077.16" y="111.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (410 samples, 0.13%)</title><rect x="63.7" y="85" width="1.5" height="15.0" fill="rgb(249,21,40)" rx="2" ry="2" />
<text  x="66.66" y="95.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::_M_get_insert_equal_pos (27 samples, 0.01%)</title><rect x="16.1" y="245" width="0.1" height="15.0" fill="rgb(214,48,44)" rx="2" ry="2" />
<text  x="19.06" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (1,250 samples, 0.41%)</title><rect x="983.3" y="37" width="4.8" height="15.0" fill="rgb(248,78,46)" rx="2" ry="2" />
<text  x="986.27" y="47.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, long, waveElement, __gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;waveElement&gt; &gt; &gt; (13,773 samples, 4.50%)</title><rect x="946.2" y="69" width="53.0" height="15.0" fill="rgb(240,53,7)" rx="2" ry="2" />
<text  x="949.15" y="79.5" >std::..</text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (33 samples, 0.01%)</title><rect x="1189.5" y="213" width="0.1" height="15.0" fill="rgb(242,173,2)" rx="2" ry="2" />
<text  x="1192.51" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,069 samples, 0.68%)</title><rect x="18.0" y="197" width="7.9" height="15.0" fill="rgb(218,106,16)" rx="2" ry="2" />
<text  x="20.96" y="207.5" ></text>
</g>
<g >
<title>[unknown] (683 samples, 0.22%)</title><rect x="19.9" y="117" width="2.6" height="15.0" fill="rgb(229,21,9)" rx="2" ry="2" />
<text  x="22.90" y="127.5" ></text>
</g>
<g >
<title>UnitTest::ExecuteTest&lt;Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper&gt; (301,909 samples, 98.59%)</title><rect x="26.1" y="197" width="1163.3" height="15.0" fill="rgb(227,77,52)" rx="2" ry="2" />
<text  x="29.12" y="207.5" >UnitTest::ExecuteTest&lt;Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper&gt;</text>
</g>
<g >
<title>std::make_pair&lt;LatLon, LatLon&gt; (3,399 samples, 1.11%)</title><rect x="574.0" y="133" width="13.1" height="15.0" fill="rgb(207,12,47)" rx="2" ry="2" />
<text  x="576.97" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::_M_realloc_insert&lt;waveElement const&amp;&gt; (88 samples, 0.03%)</title><rect x="1030.5" y="117" width="0.3" height="15.0" fill="rgb(208,154,51)" rx="2" ry="2" />
<text  x="1033.47" y="127.5" ></text>
</g>
<g >
<title>_int_free (157 samples, 0.05%)</title><rect x="26.1" y="165" width="0.6" height="15.0" fill="rgb(239,198,26)" rx="2" ry="2" />
<text  x="29.12" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (85 samples, 0.03%)</title><rect x="10.1" y="197" width="0.3" height="15.0" fill="rgb(221,179,33)" rx="2" ry="2" />
<text  x="13.05" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (33,800 samples, 11.04%)</title><rect x="432.1" y="117" width="130.2" height="15.0" fill="rgb(216,145,35)" rx="2" ry="2" />
<text  x="435.08" y="127.5" >std::_Hashtable&lt;..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,130 samples, 0.70%)</title><rect x="17.9" y="261" width="8.2" height="15.0" fill="rgb(228,152,32)" rx="2" ry="2" />
<text  x="20.91" y="271.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (83 samples, 0.03%)</title><rect x="10.1" y="165" width="0.3" height="15.0" fill="rgb(223,161,51)" rx="2" ry="2" />
<text  x="13.06" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_emplace&lt;std::pair&lt;int, double&gt; &gt; (46 samples, 0.02%)</title><rect x="14.6" y="261" width="0.2" height="15.0" fill="rgb(216,173,37)" rx="2" ry="2" />
<text  x="17.58" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (4,191 samples, 1.37%)</title><rect x="189.7" y="117" width="16.2" height="15.0" fill="rgb(228,140,0)" rx="2" ry="2" />
<text  x="192.74" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; (1,195 samples, 0.39%)</title><rect x="617.8" y="85" width="4.6" height="15.0" fill="rgb(252,35,49)" rx="2" ry="2" />
<text  x="620.82" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (52 samples, 0.02%)</title><rect x="193.1" y="85" width="0.2" height="15.0" fill="rgb(254,159,24)" rx="2" ry="2" />
<text  x="196.12" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;std::less&lt;waveElement&gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; &gt; (12,550 samples, 4.10%)</title><rect x="897.8" y="69" width="48.4" height="15.0" fill="rgb(248,103,3)" rx="2" ry="2" />
<text  x="900.79" y="79.5" >__gn..</text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_erase_at_end (3,963 samples, 1.29%)</title><rect x="1174.0" y="149" width="15.3" height="15.0" fill="rgb(227,122,11)" rx="2" ry="2" />
<text  x="1176.99" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, NodeInfo&gt;::load_object_data (29 samples, 0.01%)</title><rect x="10.2" y="133" width="0.1" height="15.0" fill="rgb(232,14,32)" rx="2" ry="2" />
<text  x="13.17" y="143.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;Node*&gt;, Node*&gt; (34 samples, 0.01%)</title><rect x="144.1" y="117" width="0.2" height="15.0" fill="rgb(229,156,42)" rx="2" ry="2" />
<text  x="147.14" y="127.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::find (12,050 samples, 3.93%)</title><rect x="1100.1" y="133" width="46.4" height="15.0" fill="rgb(223,67,47)" rx="2" ry="2" />
<text  x="1103.08" y="143.5" >std:..</text>
</g>
<g >
<title>std::push_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, std::less&lt;waveElement&gt; &gt; (10,988 samples, 3.59%)</title><rect x="1054.3" y="133" width="42.4" height="15.0" fill="rgb(215,212,12)" rx="2" ry="2" />
<text  x="1057.34" y="143.5" >std..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1,911 samples, 0.62%)</title><rect x="424.7" y="117" width="7.4" height="15.0" fill="rgb(229,72,49)" rx="2" ry="2" />
<text  x="427.72" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (252 samples, 0.08%)</title><rect x="13.2" y="181" width="0.9" height="15.0" fill="rgb(207,117,28)" rx="2" ry="2" />
<text  x="16.15" y="191.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (761 samples, 0.25%)</title><rect x="168.4" y="85" width="2.9" height="15.0" fill="rgb(226,39,18)" rx="2" ry="2" />
<text  x="171.39" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (320 samples, 0.10%)</title><rect x="529.3" y="85" width="1.2" height="15.0" fill="rgb(221,100,33)" rx="2" ry="2" />
<text  x="532.26" y="95.5" ></text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (218 samples, 0.07%)</title><rect x="1094.3" y="101" width="0.9" height="15.0" fill="rgb(209,130,41)" rx="2" ry="2" />
<text  x="1097.31" y="111.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (276 samples, 0.09%)</title><rect x="1093.3" y="85" width="1.0" height="15.0" fill="rgb(214,90,53)" rx="2" ry="2" />
<text  x="1096.25" y="95.5" ></text>
</g>
<g >
<title>operator new (134 samples, 0.04%)</title><rect x="25.1" y="133" width="0.6" height="15.0" fill="rgb(231,184,51)" rx="2" ry="2" />
<text  x="28.14" y="143.5" ></text>
</g>
<g >
<title>Node::Node (14,162 samples, 4.62%)</title><rect x="29.5" y="133" width="54.6" height="15.0" fill="rgb(239,109,17)" rx="2" ry="2" />
<text  x="32.53" y="143.5" >Node:..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (47 samples, 0.02%)</title><rect x="156.5" y="69" width="0.1" height="15.0" fill="rgb(212,147,49)" rx="2" ry="2" />
<text  x="159.45" y="79.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (167 samples, 0.05%)</title><rect x="68.7" y="69" width="0.6" height="15.0" fill="rgb(217,111,4)" rx="2" ry="2" />
<text  x="71.67" y="79.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::_M_emplace_equal&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; (33 samples, 0.01%)</title><rect x="16.0" y="261" width="0.2" height="15.0" fill="rgb(230,60,44)" rx="2" ry="2" />
<text  x="19.05" y="271.5" ></text>
</g>
<g >
<title>path (241,067 samples, 78.72%)</title><rect x="245.1" y="149" width="928.9" height="15.0" fill="rgb(238,131,45)" rx="2" ry="2" />
<text  x="248.11" y="159.5" >path</text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::push_back (10,058 samples, 3.28%)</title><rect x="144.3" y="133" width="38.7" height="15.0" fill="rgb(205,152,25)" rx="2" ry="2" />
<text  x="147.29" y="143.5" >std..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::base (294 samples, 0.10%)</title><rect x="1062.1" y="101" width="1.1" height="15.0" fill="rgb(218,106,54)" rx="2" ry="2" />
<text  x="1065.07" y="111.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::select_on_container_copy_construction (123 samples, 0.04%)</title><rect x="189.3" y="101" width="0.4" height="15.0" fill="rgb(250,62,8)" rx="2" ry="2" />
<text  x="192.27" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; (1,185 samples, 0.39%)</title><rect x="602.2" y="101" width="4.5" height="15.0" fill="rgb(235,42,15)" rx="2" ry="2" />
<text  x="605.18" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (11,165 samples, 3.65%)</title><rect x="100.7" y="117" width="43.0" height="15.0" fill="rgb(240,38,35)" rx="2" ry="2" />
<text  x="103.72" y="127.5" >std:..</text>
</g>
<g >
<title>memmove@plt (472 samples, 0.15%)</title><rect x="205.9" y="101" width="1.8" height="15.0" fill="rgb(253,215,31)" rx="2" ry="2" />
<text  x="208.89" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (187 samples, 0.06%)</title><rect x="1014.4" y="101" width="0.7" height="15.0" fill="rgb(249,92,31)" rx="2" ry="2" />
<text  x="1017.41" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (283 samples, 0.09%)</title><rect x="79.9" y="85" width="1.1" height="15.0" fill="rgb(230,105,4)" rx="2" ry="2" />
<text  x="82.90" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (176 samples, 0.06%)</title><rect x="181.9" y="85" width="0.7" height="15.0" fill="rgb(232,28,21)" rx="2" ry="2" />
<text  x="184.95" y="95.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.01%)</title><rect x="15.5" y="181" width="0.1" height="15.0" fill="rgb(239,57,20)" rx="2" ry="2" />
<text  x="18.52" y="191.5" ></text>
</g>
<g >
<title>findPathBetweenIntersections (301,742 samples, 98.53%)</title><rect x="26.7" y="165" width="1162.7" height="15.0" fill="rgb(225,189,9)" rx="2" ry="2" />
<text  x="29.75" y="175.5" >findPathBetweenIntersections</text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_realloc_insert&lt;Node const&amp;&gt; (41 samples, 0.01%)</title><rect x="144.1" y="133" width="0.2" height="15.0" fill="rgb(217,190,8)" rx="2" ry="2" />
<text  x="147.13" y="143.5" ></text>
</g>
<g >
<title>getIntersectionPosition (7,587 samples, 2.48%)</title><rect x="393.7" y="133" width="29.3" height="15.0" fill="rgb(213,114,54)" rx="2" ry="2" />
<text  x="396.72" y="143.5" >ge..</text>
</g>
<g >
<title>Feature::Feature (28 samples, 0.01%)</title><rect x="26.0" y="181" width="0.1" height="15.0" fill="rgb(210,15,4)" rx="2" ry="2" />
<text  x="28.98" y="191.5" ></text>
</g>
<g >
<title>checkOpen (720 samples, 0.24%)</title><rect x="420.2" y="117" width="2.8" height="15.0" fill="rgb(249,112,32)" rx="2" ry="2" />
<text  x="423.18" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (188 samples, 0.06%)</title><rect x="13.3" y="149" width="0.7" height="15.0" fill="rgb(229,12,47)" rx="2" ry="2" />
<text  x="16.26" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, int&gt;, false, false&gt;::operator-&gt; (1,927 samples, 0.63%)</title><rect x="565.2" y="133" width="7.4" height="15.0" fill="rgb(245,212,12)" rx="2" ry="2" />
<text  x="568.16" y="143.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, int&gt; const&amp;&gt; (55 samples, 0.02%)</title><rect x="530.2" y="53" width="0.2" height="15.0" fill="rgb(225,28,49)" rx="2" ry="2" />
<text  x="533.21" y="63.5" ></text>
</g>
<g >
<title>getStreetSegmentInfo (157 samples, 0.05%)</title><rect x="12.3" y="261" width="0.6" height="15.0" fill="rgb(233,92,36)" rx="2" ry="2" />
<text  x="15.30" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (928 samples, 0.30%)</title><rect x="118.9" y="69" width="3.5" height="15.0" fill="rgb(207,144,39)" rx="2" ry="2" />
<text  x="121.86" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (63 samples, 0.02%)</title><rect x="15.4" y="229" width="0.3" height="15.0" fill="rgb(226,74,11)" rx="2" ry="2" />
<text  x="18.41" y="239.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (1,124 samples, 0.37%)</title><rect x="127.9" y="101" width="4.3" height="15.0" fill="rgb(231,189,36)" rx="2" ry="2" />
<text  x="130.90" y="111.5" ></text>
</g>
<g >
<title>findStreetSegmentLength (137 samples, 0.04%)</title><rect x="11.0" y="261" width="0.6" height="15.0" fill="rgb(211,47,45)" rx="2" ry="2" />
<text  x="14.03" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, unsigned long, false&gt;::_S_equals (2,012 samples, 0.66%)</title><rect x="521.5" y="85" width="7.8" height="15.0" fill="rgb(242,193,37)" rx="2" ry="2" />
<text  x="524.50" y="95.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (136 samples, 0.04%)</title><rect x="1011.7" y="85" width="0.5" height="15.0" fill="rgb(218,14,0)" rx="2" ry="2" />
<text  x="1014.68" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,212 samples, 0.40%)</title><rect x="19.9" y="133" width="4.7" height="15.0" fill="rgb(227,205,54)" rx="2" ry="2" />
<text  x="22.90" y="143.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Node&gt; (3,737 samples, 1.22%)</title><rect x="1174.8" y="117" width="14.4" height="15.0" fill="rgb(226,195,51)" rx="2" ry="2" />
<text  x="1177.78" y="127.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (259 samples, 0.08%)</title><rect x="178.6" y="85" width="1.0" height="15.0" fill="rgb(254,7,23)" rx="2" ry="2" />
<text  x="181.58" y="95.5" ></text>
</g>
<g >
<title>malloc@plt (1,594 samples, 0.52%)</title><rect x="156.6" y="53" width="6.2" height="15.0" fill="rgb(249,94,39)" rx="2" ry="2" />
<text  x="159.63" y="63.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (44 samples, 0.01%)</title><rect x="10.7" y="197" width="0.2" height="15.0" fill="rgb(254,87,0)" rx="2" ry="2" />
<text  x="13.74" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (1,616 samples, 0.53%)</title><rect x="132.2" y="101" width="6.3" height="15.0" fill="rgb(241,115,16)" rx="2" ry="2" />
<text  x="135.23" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (32 samples, 0.01%)</title><rect x="110.9" y="69" width="0.1" height="15.0" fill="rgb(205,68,50)" rx="2" ry="2" />
<text  x="113.85" y="79.5" ></text>
</g>
<g >
<title>operator new (205 samples, 0.07%)</title><rect x="1040.0" y="85" width="0.8" height="15.0" fill="rgb(248,184,8)" rx="2" ry="2" />
<text  x="1043.00" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;int const, int&gt;&amp;&gt; (1,243 samples, 0.41%)</title><rect x="524.5" y="69" width="4.8" height="15.0" fill="rgb(209,212,6)" rx="2" ry="2" />
<text  x="527.47" y="79.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement@plt (57 samples, 0.02%)</title><rect x="22.3" y="101" width="0.2" height="15.0" fill="rgb(223,76,31)" rx="2" ry="2" />
<text  x="25.31" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (126 samples, 0.04%)</title><rect x="13.5" y="133" width="0.5" height="15.0" fill="rgb(252,75,31)" rx="2" ry="2" />
<text  x="16.50" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;waveElement const*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; (1,642 samples, 0.54%)</title><rect x="1153.6" y="117" width="6.3" height="15.0" fill="rgb(253,201,22)" rx="2" ry="2" />
<text  x="1156.60" y="127.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (2,015 samples, 0.66%)</title><rect x="938.4" y="53" width="7.8" height="15.0" fill="rgb(226,157,20)" rx="2" ry="2" />
<text  x="941.39" y="63.5" ></text>
</g>
<g >
<title>std::__sort&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt; (57 samples, 0.02%)</title><rect x="16.3" y="261" width="0.2" height="15.0" fill="rgb(210,152,19)" rx="2" ry="2" />
<text  x="19.26" y="271.5" ></text>
</g>
<g >
<title>std::forward&lt;waveElement const&amp;&gt; (443 samples, 0.14%)</title><rect x="1040.8" y="85" width="1.7" height="15.0" fill="rgb(217,176,0)" rx="2" ry="2" />
<text  x="1043.79" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (85 samples, 0.03%)</title><rect x="10.1" y="181" width="0.3" height="15.0" fill="rgb(225,209,30)" rx="2" ry="2" />
<text  x="13.05" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::begin (760 samples, 0.25%)</title><rect x="1012.2" y="117" width="2.9" height="15.0" fill="rgb(213,68,36)" rx="2" ry="2" />
<text  x="1015.21" y="127.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (311 samples, 0.10%)</title><rect x="23.4" y="101" width="1.2" height="15.0" fill="rgb(221,34,28)" rx="2" ry="2" />
<text  x="26.37" y="111.5" ></text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (464 samples, 0.15%)</title><rect x="1009.9" y="85" width="1.8" height="15.0" fill="rgb(241,44,2)" rx="2" ry="2" />
<text  x="1012.89" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; &gt;::load_object_data (52 samples, 0.02%)</title><rect x="12.9" y="197" width="0.2" height="15.0" fill="rgb(244,61,44)" rx="2" ry="2" />
<text  x="15.91" y="207.5" ></text>
</g>
<g >
<title>std::forward&lt;LatLon&gt; (241 samples, 0.08%)</title><rect x="586.1" y="101" width="1.0" height="15.0" fill="rgb(236,143,10)" rx="2" ry="2" />
<text  x="589.13" y="111.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (434 samples, 0.14%)</title><rect x="12.9" y="261" width="1.7" height="15.0" fill="rgb(233,133,25)" rx="2" ry="2" />
<text  x="15.91" y="271.5" ></text>
</g>
<g >
<title>UnitTest::TestRunner::RunTest (301,909 samples, 98.59%)</title><rect x="26.1" y="245" width="1163.3" height="15.0" fill="rgb(222,91,12)" rx="2" ry="2" />
<text  x="29.12" y="255.5" >UnitTest::TestRunner::RunTest</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (27 samples, 0.01%)</title><rect x="13.8" y="85" width="0.1" height="15.0" fill="rgb(241,16,37)" rx="2" ry="2" />
<text  x="16.76" y="95.5" ></text>
</g>
<g >
<title>__dynamic_cast (63 samples, 0.02%)</title><rect x="22.8" y="101" width="0.2" height="15.0" fill="rgb(228,55,39)" rx="2" ry="2" />
<text  x="25.78" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, int&gt;, false, false&gt;::_Node_iterator (83 samples, 0.03%)</title><rect x="562.7" y="101" width="0.3" height="15.0" fill="rgb(205,162,47)" rx="2" ry="2" />
<text  x="565.67" y="111.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (32 samples, 0.01%)</title><rect x="18.4" y="149" width="0.1" height="15.0" fill="rgb(246,214,27)" rx="2" ry="2" />
<text  x="21.37" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (60 samples, 0.02%)</title><rect x="15.4" y="213" width="0.3" height="15.0" fill="rgb(253,149,52)" rx="2" ry="2" />
<text  x="18.42" y="223.5" ></text>
</g>
<g >
<title>findDistanceBetweenTwoPoints (10,095 samples, 3.30%)</title><rect x="331.9" y="133" width="38.9" height="15.0" fill="rgb(219,9,14)" rx="2" ry="2" />
<text  x="334.91" y="143.5" >fin..</text>
</g>
<g >
<title>operator new (5,010 samples, 1.64%)</title><rect x="41.2" y="85" width="19.3" height="15.0" fill="rgb(252,124,27)" rx="2" ry="2" />
<text  x="44.18" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;waveElement&gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, waveElement&gt; (2,391 samples, 0.78%)</title><rect x="988.1" y="53" width="9.2" height="15.0" fill="rgb(230,191,53)" rx="2" ry="2" />
<text  x="991.08" y="63.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (47 samples, 0.02%)</title><rect x="41.0" y="85" width="0.2" height="15.0" fill="rgb(248,189,36)" rx="2" ry="2" />
<text  x="44.00" y="95.5" ></text>
</g>
<g >
<title>__run_exit_handlers (66 samples, 0.02%)</title><rect x="10.4" y="277" width="0.2" height="15.0" fill="rgb(211,123,38)" rx="2" ry="2" />
<text  x="13.38" y="287.5" ></text>
</g>
<g >
<title>std::pow&lt;double, int&gt; (506 samples, 0.17%)</title><rect x="368.9" y="117" width="1.9" height="15.0" fill="rgb(234,205,31)" rx="2" ry="2" />
<text  x="371.86" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (6,225 samples, 2.03%)</title><rect x="221.1" y="133" width="24.0" height="15.0" fill="rgb(229,202,21)" rx="2" ry="2" />
<text  x="224.12" y="143.5" >s..</text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (969 samples, 0.32%)</title><rect x="127.9" y="85" width="3.7" height="15.0" fill="rgb(216,161,53)" rx="2" ry="2" />
<text  x="130.90" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::end (592 samples, 0.19%)</title><rect x="1015.1" y="117" width="2.3" height="15.0" fill="rgb(239,150,22)" rx="2" ry="2" />
<text  x="1018.13" y="127.5" ></text>
</g>
<g >
<title>malloc (125 samples, 0.04%)</title><rect x="25.1" y="117" width="0.5" height="15.0" fill="rgb(241,87,22)" rx="2" ry="2" />
<text  x="28.14" y="127.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (194 samples, 0.06%)</title><rect x="217.3" y="101" width="0.7" height="15.0" fill="rgb(232,210,19)" rx="2" ry="2" />
<text  x="220.26" y="111.5" ></text>
</g>
<g >
<title>operator new (68 samples, 0.02%)</title><rect x="145.4" y="101" width="0.3" height="15.0" fill="rgb(241,168,25)" rx="2" ry="2" />
<text  x="148.44" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (1,106 samples, 0.36%)</title><rect x="200.8" y="85" width="4.3" height="15.0" fill="rgb(209,46,19)" rx="2" ry="2" />
<text  x="203.85" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (47 samples, 0.02%)</title><rect x="156.5" y="53" width="0.1" height="15.0" fill="rgb(250,74,16)" rx="2" ry="2" />
<text  x="159.45" y="63.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (185 samples, 0.06%)</title><rect x="220.0" y="101" width="0.7" height="15.0" fill="rgb(213,61,54)" rx="2" ry="2" />
<text  x="222.98" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (310 samples, 0.10%)</title><rect x="1033.3" y="101" width="1.2" height="15.0" fill="rgb(244,74,43)" rx="2" ry="2" />
<text  x="1036.33" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (696 samples, 0.23%)</title><rect x="218.0" y="117" width="2.7" height="15.0" fill="rgb(247,61,47)" rx="2" ry="2" />
<text  x="221.01" y="127.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (187 samples, 0.06%)</title><rect x="1095.2" y="101" width="0.7" height="15.0" fill="rgb(224,13,10)" rx="2" ry="2" />
<text  x="1098.15" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, TypedOSMID&gt;::load_object_data (131 samples, 0.04%)</title><rect x="19.1" y="149" width="0.5" height="15.0" fill="rgb(206,1,28)" rx="2" ry="2" />
<text  x="22.07" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (160 samples, 0.05%)</title><rect x="1036.2" y="101" width="0.6" height="15.0" fill="rgb(215,171,7)" rx="2" ry="2" />
<text  x="1039.17" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (47 samples, 0.02%)</title><rect x="41.0" y="69" width="0.2" height="15.0" fill="rgb(234,218,31)" rx="2" ry="2" />
<text  x="44.00" y="79.5" ></text>
</g>
<g >
<title>std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt; (32 samples, 0.01%)</title><rect x="16.3" y="245" width="0.1" height="15.0" fill="rgb(219,176,21)" rx="2" ry="2" />
<text  x="19.26" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (8,260 samples, 2.70%)</title><rect x="530.5" y="85" width="31.8" height="15.0" fill="rgb(247,172,41)" rx="2" ry="2" />
<text  x="533.49" y="95.5" >st..</text>
</g>
<g >
<title>UnitTest::RunAllTests (301,909 samples, 98.59%)</title><rect x="26.1" y="261" width="1163.3" height="15.0" fill="rgb(254,7,5)" rx="2" ry="2" />
<text  x="29.12" y="271.5" >UnitTest::RunAllTests</text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (3,645 samples, 1.19%)</title><rect x="191.1" y="101" width="14.0" height="15.0" fill="rgb(208,34,12)" rx="2" ry="2" />
<text  x="194.06" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (80 samples, 0.03%)</title><rect x="19.1" y="133" width="0.4" height="15.0" fill="rgb(249,94,19)" rx="2" ry="2" />
<text  x="22.15" y="143.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (142 samples, 0.05%)</title><rect x="171.3" y="85" width="0.6" height="15.0" fill="rgb(234,69,15)" rx="2" ry="2" />
<text  x="174.32" y="95.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (78 samples, 0.03%)</title><rect x="1096.4" y="117" width="0.3" height="15.0" fill="rgb(244,218,39)" rx="2" ry="2" />
<text  x="1099.38" y="127.5" ></text>
</g>
<g >
<title>loadGraph (56,670 samples, 18.51%)</title><rect x="26.7" y="149" width="218.4" height="15.0" fill="rgb(229,21,49)" rx="2" ry="2" />
<text  x="29.75" y="159.5" >loadGraph</text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (221 samples, 0.07%)</title><rect x="138.5" y="85" width="0.8" height="15.0" fill="rgb(252,189,38)" rx="2" ry="2" />
<text  x="141.46" y="95.5" ></text>
</g>
<g >
<title>malloc (3,095 samples, 1.01%)</title><rect x="41.2" y="69" width="11.9" height="15.0" fill="rgb(234,200,0)" rx="2" ry="2" />
<text  x="44.18" y="79.5" ></text>
</g>
<g >
<title>std::forward&lt;Node const&amp;&gt; (108 samples, 0.04%)</title><rect x="152.8" y="101" width="0.4" height="15.0" fill="rgb(214,199,18)" rx="2" ry="2" />
<text  x="155.76" y="111.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::select_on_container_copy_construction (83 samples, 0.03%)</title><rect x="107.6" y="85" width="0.3" height="15.0" fill="rgb(245,114,27)" rx="2" ry="2" />
<text  x="110.60" y="95.5" ></text>
</g>
<g >
<title>[unknown] (51 samples, 0.02%)</title><rect x="13.3" y="133" width="0.2" height="15.0" fill="rgb(240,171,53)" rx="2" ry="2" />
<text  x="16.26" y="143.5" ></text>
</g>
<g >
<title>malloc@plt (1,915 samples, 0.63%)</title><rect x="53.1" y="69" width="7.4" height="15.0" fill="rgb(214,215,15)" rx="2" ry="2" />
<text  x="56.11" y="79.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (944 samples, 0.31%)</title><rect x="1006.3" y="69" width="3.6" height="15.0" fill="rgb(252,17,8)" rx="2" ry="2" />
<text  x="1009.26" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (176 samples, 0.06%)</title><rect x="563.0" y="117" width="0.7" height="15.0" fill="rgb(215,132,45)" rx="2" ry="2" />
<text  x="565.99" y="127.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;waveElement*&gt;, waveElement*&gt; (51 samples, 0.02%)</title><rect x="1030.5" y="101" width="0.2" height="15.0" fill="rgb(231,10,20)" rx="2" ry="2" />
<text  x="1033.50" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (2,955 samples, 0.96%)</title><rect x="154.7" y="85" width="11.4" height="15.0" fill="rgb(213,166,20)" rx="2" ry="2" />
<text  x="157.68" y="95.5" ></text>
</g>
<g >
<title>_int_malloc (3,095 samples, 1.01%)</title><rect x="41.2" y="53" width="11.9" height="15.0" fill="rgb(238,46,0)" rx="2" ry="2" />
<text  x="44.18" y="63.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1,634 samples, 0.53%)</title><rect x="515.2" y="85" width="6.3" height="15.0" fill="rgb(243,30,9)" rx="2" ry="2" />
<text  x="518.21" y="95.5" ></text>
</g>
<g >
<title>malloc@plt (1,952 samples, 0.64%)</title><rect x="193.3" y="69" width="7.5" height="15.0" fill="rgb(246,223,48)" rx="2" ry="2" />
<text  x="196.32" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (10,955 samples, 3.58%)</title><rect x="855.6" y="53" width="42.2" height="15.0" fill="rgb(250,189,20)" rx="2" ry="2" />
<text  x="858.58" y="63.5" >__g..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (126 samples, 0.04%)</title><rect x="68.2" y="53" width="0.5" height="15.0" fill="rgb(231,79,4)" rx="2" ry="2" />
<text  x="71.18" y="63.5" ></text>
</g>
<g >
<title>findStreetSegmentTravelTime (5,945 samples, 1.94%)</title><rect x="370.8" y="133" width="22.9" height="15.0" fill="rgb(218,138,29)" rx="2" ry="2" />
<text  x="373.81" y="143.5" >f..</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (434 samples, 0.14%)</title><rect x="12.9" y="229" width="1.7" height="15.0" fill="rgb(220,16,2)" rx="2" ry="2" />
<text  x="15.91" y="239.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, long, waveElement, __gnu_cxx::__ops::_Iter_comp_iter&lt;std::less&lt;waveElement&gt; &gt; &gt; (100,557 samples, 32.84%)</title><rect x="622.4" y="85" width="387.5" height="15.0" fill="rgb(252,86,24)" rx="2" ry="2" />
<text  x="625.43" y="95.5" >std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;wave..</text>
</g>
<g >
<title>waveElement::waveElement (456 samples, 0.15%)</title><rect x="1172.2" y="133" width="1.8" height="15.0" fill="rgb(226,85,48)" rx="2" ry="2" />
<text  x="1175.23" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (186 samples, 0.06%)</title><rect x="1016.7" y="101" width="0.7" height="15.0" fill="rgb(243,37,35)" rx="2" ry="2" />
<text  x="1019.70" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (9,863 samples, 3.22%)</title><rect x="38.8" y="101" width="38.0" height="15.0" fill="rgb(218,67,16)" rx="2" ry="2" />
<text  x="41.79" y="111.5" >std..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::base (184 samples, 0.06%)</title><rect x="621.7" y="69" width="0.7" height="15.0" fill="rgb(218,127,7)" rx="2" ry="2" />
<text  x="624.72" y="79.5" ></text>
</g>
<g >
<title>read@plt (43 samples, 0.01%)</title><rect x="24.0" y="37" width="0.2" height="15.0" fill="rgb(206,79,41)" rx="2" ry="2" />
<text  x="26.99" y="47.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator+ (47,637 samples, 15.56%)</title><rect x="714.2" y="69" width="183.6" height="15.0" fill="rgb(249,4,51)" rx="2" ry="2" />
<text  x="717.24" y="79.5" >__gnu_cxx::__normal_ite..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (33,160 samples, 10.83%)</title><rect x="434.5" y="101" width="127.8" height="15.0" fill="rgb(237,190,34)" rx="2" ry="2" />
<text  x="437.55" y="111.5" >std::_Hashtable&lt;..</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (791 samples, 0.26%)</title><rect x="179.6" y="101" width="3.0" height="15.0" fill="rgb(234,199,25)" rx="2" ry="2" />
<text  x="182.58" y="111.5" ></text>
</g>
<g >
<title>std::forward&lt;waveElement const&amp;&gt; (447 samples, 0.15%)</title><rect x="1049.9" y="85" width="1.7" height="15.0" fill="rgb(222,93,46)" rx="2" ry="2" />
<text  x="1052.91" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, EdgeProperties&gt;::load_object_data (238 samples, 0.08%)</title><rect x="13.2" y="165" width="0.9" height="15.0" fill="rgb(242,107,54)" rx="2" ry="2" />
<text  x="16.21" y="175.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (44 samples, 0.01%)</title><rect x="24.0" y="53" width="0.2" height="15.0" fill="rgb(209,0,35)" rx="2" ry="2" />
<text  x="26.99" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (1,087 samples, 0.35%)</title><rect x="76.8" y="101" width="4.2" height="15.0" fill="rgb(245,39,35)" rx="2" ry="2" />
<text  x="79.80" y="111.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;, std::less&lt;waveElement&gt; &gt;::empty (1,251 samples, 0.41%)</title><rect x="587.1" y="133" width="4.8" height="15.0" fill="rgb(252,165,11)" rx="2" ry="2" />
<text  x="590.06" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_rehash (48 samples, 0.02%)</title><rect x="14.8" y="245" width="0.2" height="15.0" fill="rgb(254,35,12)" rx="2" ry="2" />
<text  x="17.81" y="255.5" ></text>
</g>
<g >
<title>operator new (1,952 samples, 0.64%)</title><rect x="193.3" y="85" width="7.5" height="15.0" fill="rgb(239,128,23)" rx="2" ry="2" />
<text  x="196.32" y="95.5" ></text>
</g>
<g >
<title>main (301,909 samples, 98.59%)</title><rect x="26.1" y="277" width="1163.3" height="15.0" fill="rgb(237,214,24)" rx="2" ry="2" />
<text  x="29.12" y="287.5" >main</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (843 samples, 0.28%)</title><rect x="1085.6" y="85" width="3.3" height="15.0" fill="rgb(252,182,17)" rx="2" ry="2" />
<text  x="1088.63" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (7,751 samples, 2.53%)</title><rect x="153.2" y="117" width="29.8" height="15.0" fill="rgb(248,214,24)" rx="2" ry="2" />
<text  x="156.18" y="127.5" >st..</text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (63 samples, 0.02%)</title><rect x="1189.5" y="245" width="0.3" height="15.0" fill="rgb(246,145,19)" rx="2" ry="2" />
<text  x="1192.51" y="255.5" ></text>
</g>
<g >
<title>std::pair&lt;LatLon, LatLon&gt;::pair&lt;LatLon, LatLon, true&gt; (1,857 samples, 0.61%)</title><rect x="579.9" y="117" width="7.2" height="15.0" fill="rgb(248,52,42)" rx="2" ry="2" />
<text  x="582.91" y="127.5" ></text>
</g>
<g >
<title>UnitTest::ExecuteTest&lt;UnitTest::Test&gt; (301,909 samples, 98.59%)</title><rect x="26.1" y="229" width="1163.3" height="15.0" fill="rgb(225,132,26)" rx="2" ry="2" />
<text  x="29.12" y="239.5" >UnitTest::ExecuteTest&lt;UnitTest::Test&gt;</text>
</g>
<g >
<title>main (85 samples, 0.03%)</title><rect x="10.1" y="261" width="0.3" height="15.0" fill="rgb(227,28,23)" rx="2" ry="2" />
<text  x="13.05" y="271.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (49 samples, 0.02%)</title><rect x="18.9" y="133" width="0.2" height="15.0" fill="rgb(242,125,35)" rx="2" ry="2" />
<text  x="21.87" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (32 samples, 0.01%)</title><rect x="110.9" y="53" width="0.1" height="15.0" fill="rgb(208,47,33)" rx="2" ry="2" />
<text  x="113.85" y="63.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; (1,535 samples, 0.50%)</title><rect x="1057.3" y="117" width="5.9" height="15.0" fill="rgb(224,123,46)" rx="2" ry="2" />
<text  x="1060.29" y="127.5" ></text>
</g>
<g >
<title>cos@plt (3,303 samples, 1.08%)</title><rect x="356.1" y="117" width="12.8" height="15.0" fill="rgb(236,67,4)" rx="2" ry="2" />
<text  x="359.13" y="127.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (472 samples, 0.15%)</title><rect x="205.9" y="117" width="1.8" height="15.0" fill="rgb(214,167,32)" rx="2" ry="2" />
<text  x="208.89" y="127.5" ></text>
</g>
<g >
<title>[unknown] (37 samples, 0.01%)</title><rect x="19.1" y="117" width="0.2" height="15.0" fill="rgb(241,7,50)" rx="2" ry="2" />
<text  x="22.15" y="127.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;*&gt; (37 samples, 0.01%)</title><rect x="10.5" y="245" width="0.1" height="15.0" fill="rgb(213,124,40)" rx="2" ry="2" />
<text  x="13.46" y="255.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (899 samples, 0.29%)</title><rect x="207.7" y="117" width="3.5" height="15.0" fill="rgb(241,195,47)" rx="2" ry="2" />
<text  x="210.71" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_propagate_on_copy_assign (55 samples, 0.02%)</title><rect x="38.3" y="101" width="0.3" height="15.0" fill="rgb(249,107,48)" rx="2" ry="2" />
<text  x="41.34" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_rehash_aux (48 samples, 0.02%)</title><rect x="14.8" y="229" width="0.2" height="15.0" fill="rgb(233,14,14)" rx="2" ry="2" />
<text  x="17.81" y="239.5" ></text>
</g>
<g >
<title>do_lookup_x (36 samples, 0.01%)</title><rect x="10.8" y="181" width="0.1" height="15.0" fill="rgb(215,31,5)" rx="2" ry="2" />
<text  x="13.77" y="191.5" ></text>
</g>
<g >
<title>operator new (2,045 samples, 0.67%)</title><rect x="111.0" y="69" width="7.9" height="15.0" fill="rgb(235,45,47)" rx="2" ry="2" />
<text  x="113.98" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::push_back (3,852 samples, 1.26%)</title><rect x="1036.8" y="117" width="14.8" height="15.0" fill="rgb(222,145,11)" rx="2" ry="2" />
<text  x="1039.79" y="127.5" ></text>
</g>
<g >
<title>[unknown] (145 samples, 0.05%)</title><rect x="18.5" y="149" width="0.6" height="15.0" fill="rgb(219,220,34)" rx="2" ry="2" />
<text  x="21.51" y="159.5" ></text>
</g>
<g >
<title>operator new (1,594 samples, 0.52%)</title><rect x="156.6" y="69" width="6.2" height="15.0" fill="rgb(229,76,37)" rx="2" ry="2" />
<text  x="159.63" y="79.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (1,272 samples, 0.42%)</title><rect x="123.0" y="101" width="4.9" height="15.0" fill="rgb(214,23,14)" rx="2" ry="2" />
<text  x="126.00" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (207 samples, 0.07%)</title><rect x="166.1" y="85" width="0.8" height="15.0" fill="rgb(240,185,28)" rx="2" ry="2" />
<text  x="169.07" y="95.5" ></text>
</g>
<g >
<title>dl_main (58 samples, 0.02%)</title><rect x="10.7" y="229" width="0.2" height="15.0" fill="rgb(214,12,5)" rx="2" ry="2" />
<text  x="13.69" y="239.5" ></text>
</g>
<g >
<title>std::forward&lt;LatLon&gt; (207 samples, 0.07%)</title><rect x="579.1" y="117" width="0.8" height="15.0" fill="rgb(239,146,41)" rx="2" ry="2" />
<text  x="582.11" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (85 samples, 0.03%)</title><rect x="10.1" y="213" width="0.3" height="15.0" fill="rgb(253,144,23)" rx="2" ry="2" />
<text  x="13.05" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator- (765 samples, 0.25%)</title><rect x="1054.3" y="117" width="3.0" height="15.0" fill="rgb(243,22,2)" rx="2" ry="2" />
<text  x="1057.34" y="127.5" ></text>
</g>
<g >
<title>strcmp@plt (49 samples, 0.02%)</title><rect x="18.9" y="117" width="0.2" height="15.0" fill="rgb(230,70,7)" rx="2" ry="2" />
<text  x="21.87" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::empty (3,820 samples, 1.25%)</title><rect x="1153.6" y="133" width="14.7" height="15.0" fill="rgb(232,198,12)" rx="2" ry="2" />
<text  x="1156.60" y="143.5" ></text>
</g>
<g >
<title>memmove@plt (1,272 samples, 0.42%)</title><rect x="123.0" y="85" width="4.9" height="15.0" fill="rgb(218,168,37)" rx="2" ry="2" />
<text  x="126.00" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::begin (964 samples, 0.31%)</title><rect x="1030.8" y="117" width="3.7" height="15.0" fill="rgb(213,65,51)" rx="2" ry="2" />
<text  x="1033.81" y="127.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;, std::less&lt;waveElement&gt; &gt;::pop (110,436 samples, 36.06%)</title><rect x="591.9" y="133" width="425.5" height="15.0" fill="rgb(210,144,32)" rx="2" ry="2" />
<text  x="594.88" y="143.5" >std::priority_queue&lt;waveElement, std::vector&lt;waveElement, ..</text>
</g>
<g >
<title>[unknown] (33 samples, 0.01%)</title><rect x="13.6" y="101" width="0.1" height="15.0" fill="rgb(221,13,40)" rx="2" ry="2" />
<text  x="16.60" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (1,074 samples, 0.35%)</title><rect x="139.3" y="101" width="4.1" height="15.0" fill="rgb(220,90,16)" rx="2" ry="2" />
<text  x="142.31" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;int const, int&gt; const&amp;&gt; (196 samples, 0.06%)</title><rect x="529.7" y="69" width="0.7" height="15.0" fill="rgb(244,29,18)" rx="2" ry="2" />
<text  x="532.67" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::end (589 samples, 0.19%)</title><rect x="1034.5" y="117" width="2.3" height="15.0" fill="rgb(215,71,43)" rx="2" ry="2" />
<text  x="1037.52" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_begin (61 samples, 0.02%)</title><rect x="515.0" y="85" width="0.2" height="15.0" fill="rgb(221,147,23)" rx="2" ry="2" />
<text  x="517.97" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (529 samples, 0.17%)</title><rect x="22.5" y="117" width="2.1" height="15.0" fill="rgb(228,226,43)" rx="2" ry="2" />
<text  x="25.53" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (288 samples, 0.09%)</title><rect x="83.0" y="117" width="1.1" height="15.0" fill="rgb(221,63,52)" rx="2" ry="2" />
<text  x="85.99" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (52 samples, 0.02%)</title><rect x="193.1" y="69" width="0.2" height="15.0" fill="rgb(213,137,14)" rx="2" ry="2" />
<text  x="196.12" y="79.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (204 samples, 0.07%)</title><rect x="205.1" y="101" width="0.8" height="15.0" fill="rgb(231,217,27)" rx="2" ry="2" />
<text  x="208.11" y="111.5" ></text>
</g>
<g >
<title>loadMap (1,803 samples, 0.59%)</title><rect x="11.0" y="277" width="6.9" height="15.0" fill="rgb(217,123,18)" rx="2" ry="2" />
<text  x="13.96" y="287.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.01%)</title><rect x="15.8" y="229" width="0.1" height="15.0" fill="rgb(253,83,2)" rx="2" ry="2" />
<text  x="18.81" y="239.5" ></text>
</g>
<g >
<title>Suiteinter_inter_path_perf_very_hard_public::TestMapFixturefindPathBetweenIntersections_perf_very_hard::RunImpl (301,909 samples, 98.59%)</title><rect x="26.1" y="213" width="1163.3" height="15.0" fill="rgb(239,178,48)" rx="2" ry="2" />
<text  x="29.12" y="223.5" >Suiteinter_inter_path_perf_very_hard_public::TestMapFixturefindPathBetweenIntersections_perf_very_hard::RunImpl</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator-- (599 samples, 0.20%)</title><rect x="599.9" y="101" width="2.3" height="15.0" fill="rgb(208,83,19)" rx="2" ry="2" />
<text  x="602.87" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,118 samples, 0.69%)</title><rect x="18.0" y="229" width="8.1" height="15.0" fill="rgb(250,104,35)" rx="2" ry="2" />
<text  x="20.96" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt; &gt; &gt;::operator[] (357 samples, 0.12%)</title><rect x="1152.2" y="133" width="1.4" height="15.0" fill="rgb(227,11,50)" rx="2" ry="2" />
<text  x="1155.22" y="143.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, long, waveElement, __gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;waveElement&gt; &gt; &gt; (8,478 samples, 2.77%)</title><rect x="1063.2" y="117" width="32.7" height="15.0" fill="rgb(225,196,9)" rx="2" ry="2" />
<text  x="1066.21" y="127.5" >st..</text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;waveElement*, waveElement*, std::allocator&lt;waveElement&gt; &gt; (28 samples, 0.01%)</title><rect x="1030.7" y="101" width="0.1" height="15.0" fill="rgb(236,9,42)" rx="2" ry="2" />
<text  x="1033.70" y="111.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (88 samples, 0.03%)</title><rect x="1189.5" y="277" width="0.3" height="15.0" fill="rgb(218,165,39)" rx="2" ry="2" />
<text  x="1192.51" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (224 samples, 0.07%)</title><rect x="107.1" y="101" width="0.8" height="15.0" fill="rgb(215,46,47)" rx="2" ry="2" />
<text  x="110.05" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (45 samples, 0.01%)</title><rect x="17.4" y="261" width="0.2" height="15.0" fill="rgb(205,20,44)" rx="2" ry="2" />
<text  x="20.40" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (854 samples, 0.28%)</title><rect x="162.8" y="69" width="3.3" height="15.0" fill="rgb(205,58,52)" rx="2" ry="2" />
<text  x="165.78" y="79.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Node&gt; &gt;::construct&lt;Node, Node const&amp;&gt; (1,842 samples, 0.60%)</title><rect x="146.1" y="117" width="7.1" height="15.0" fill="rgb(227,123,31)" rx="2" ry="2" />
<text  x="149.08" y="127.5" ></text>
</g>
<g >
<title>M3_Public_Perf_ (306,239 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(218,37,28)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >M3_Public_Perf_</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; const&amp;&gt; (37 samples, 0.01%)</title><rect x="17.7" y="261" width="0.1" height="15.0" fill="rgb(223,197,7)" rx="2" ry="2" />
<text  x="20.71" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int, int&gt; &gt; (50 samples, 0.02%)</title><rect x="15.8" y="245" width="0.2" height="15.0" fill="rgb(244,61,41)" rx="2" ry="2" />
<text  x="18.78" y="255.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (128 samples, 0.04%)</title><rect x="210.7" y="101" width="0.5" height="15.0" fill="rgb(221,140,38)" rx="2" ry="2" />
<text  x="213.68" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;waveElement&gt;::construct&lt;waveElement, waveElement const&amp;&gt; (648 samples, 0.21%)</title><rect x="1040.0" y="101" width="2.5" height="15.0" fill="rgb(238,84,18)" rx="2" ry="2" />
<text  x="1043.00" y="111.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (26 samples, 0.01%)</title><rect x="25.8" y="165" width="0.1" height="15.0" fill="rgb(243,81,38)" rx="2" ry="2" />
<text  x="28.83" y="175.5" ></text>
</g>
<g >
<title>malloc_consolidate (157 samples, 0.05%)</title><rect x="26.1" y="149" width="0.6" height="15.0" fill="rgb(230,178,23)" rx="2" ry="2" />
<text  x="29.12" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (328 samples, 0.11%)</title><rect x="188.5" y="117" width="1.2" height="15.0" fill="rgb(250,133,44)" rx="2" ry="2" />
<text  x="191.48" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (339 samples, 0.11%)</title><rect x="1150.9" y="133" width="1.3" height="15.0" fill="rgb(249,144,50)" rx="2" ry="2" />
<text  x="1153.92" y="143.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (57 samples, 0.02%)</title><rect x="18.6" y="133" width="0.3" height="15.0" fill="rgb(242,115,5)" rx="2" ry="2" />
<text  x="21.65" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (434 samples, 0.14%)</title><rect x="12.9" y="245" width="1.7" height="15.0" fill="rgb(215,115,36)" rx="2" ry="2" />
<text  x="15.91" y="255.5" ></text>
</g>
<g >
<title>malloc@plt (2,045 samples, 0.67%)</title><rect x="111.0" y="53" width="7.9" height="15.0" fill="rgb(211,21,46)" rx="2" ry="2" />
<text  x="113.98" y="63.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (2,130 samples, 0.70%)</title><rect x="17.9" y="277" width="8.2" height="15.0" fill="rgb(214,203,36)" rx="2" ry="2" />
<text  x="20.91" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;StreetSegmentInfo, std::allocator&lt;StreetSegmentInfo&gt; &gt;::operator[] (312 samples, 0.10%)</title><rect x="1147.5" y="133" width="1.2" height="15.0" fill="rgb(240,227,22)" rx="2" ry="2" />
<text  x="1150.46" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;SegmentData, std::allocator&lt;SegmentData&gt; &gt;::operator[] (172 samples, 0.06%)</title><rect x="393.1" y="117" width="0.6" height="15.0" fill="rgb(249,1,38)" rx="2" ry="2" />
<text  x="396.05" y="127.5" ></text>
</g>
<g >
<title>Node::~Node (4,062 samples, 1.33%)</title><rect x="84.1" y="133" width="15.6" height="15.0" fill="rgb(242,13,23)" rx="2" ry="2" />
<text  x="87.10" y="143.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (73 samples, 0.02%)</title><rect x="1189.5" y="261" width="0.3" height="15.0" fill="rgb(216,98,22)" rx="2" ry="2" />
<text  x="1192.51" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Node*&gt; (3,757 samples, 1.23%)</title><rect x="1174.8" y="133" width="14.5" height="15.0" fill="rgb(217,57,14)" rx="2" ry="2" />
<text  x="1177.78" y="143.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (903 samples, 0.29%)</title><rect x="168.4" y="101" width="3.5" height="15.0" fill="rgb(222,171,13)" rx="2" ry="2" />
<text  x="171.39" y="111.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (1,742 samples, 0.57%)</title><rect x="171.9" y="101" width="6.7" height="15.0" fill="rgb(234,162,4)" rx="2" ry="2" />
<text  x="174.87" y="111.5" ></text>
</g>
<g >
<title>getIntersectionStreetSegment (120 samples, 0.04%)</title><rect x="11.7" y="261" width="0.5" height="15.0" fill="rgb(238,68,33)" rx="2" ry="2" />
<text  x="14.73" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, int&gt; &gt;::_M_v (107 samples, 0.03%)</title><rect x="529.3" y="69" width="0.4" height="15.0" fill="rgb(253,50,50)" rx="2" ry="2" />
<text  x="532.26" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement const*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (174 samples, 0.06%)</title><rect x="1171.6" y="101" width="0.6" height="15.0" fill="rgb(211,203,1)" rx="2" ry="2" />
<text  x="1174.56" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::begin (1,015 samples, 0.33%)</title><rect x="1168.3" y="117" width="3.9" height="15.0" fill="rgb(236,228,6)" rx="2" ry="2" />
<text  x="1171.32" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (35 samples, 0.01%)</title><rect x="13.7" y="101" width="0.2" height="15.0" fill="rgb(221,149,27)" rx="2" ry="2" />
<text  x="16.73" y="111.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::end (882 samples, 0.29%)</title><rect x="1096.7" y="133" width="3.4" height="15.0" fill="rgb(232,163,24)" rx="2" ry="2" />
<text  x="1099.68" y="143.5" ></text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (1,826 samples, 0.60%)</title><rect x="999.2" y="69" width="7.1" height="15.0" fill="rgb(212,117,52)" rx="2" ry="2" />
<text  x="1002.22" y="79.5" ></text>
</g>
<g >
<title>memmove@plt (410 samples, 0.13%)</title><rect x="63.7" y="69" width="1.5" height="15.0" fill="rgb(223,102,39)" rx="2" ry="2" />
<text  x="66.66" y="79.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (824 samples, 0.27%)</title><rect x="60.5" y="85" width="3.2" height="15.0" fill="rgb(223,178,45)" rx="2" ry="2" />
<text  x="63.48" y="95.5" ></text>
</g>
<g >
<title>memmove@plt (396 samples, 0.13%)</title><rect x="166.9" y="85" width="1.5" height="15.0" fill="rgb(208,153,34)" rx="2" ry="2" />
<text  x="169.86" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement const*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::base (438 samples, 0.14%)</title><rect x="1158.2" y="101" width="1.7" height="15.0" fill="rgb(211,36,39)" rx="2" ry="2" />
<text  x="1161.24" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, int&gt; &gt;::_M_v (769 samples, 0.25%)</title><rect x="521.5" y="69" width="3.0" height="15.0" fill="rgb(250,150,21)" rx="2" ry="2" />
<text  x="524.50" y="79.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (259 samples, 0.08%)</title><rect x="178.6" y="101" width="1.0" height="15.0" fill="rgb(220,209,47)" rx="2" ry="2" />
<text  x="181.58" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (61 samples, 0.02%)</title><rect x="38.6" y="101" width="0.2" height="15.0" fill="rgb(246,71,18)" rx="2" ry="2" />
<text  x="41.55" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt; &gt; &gt;::~vector (38 samples, 0.01%)</title><rect x="10.5" y="261" width="0.1" height="15.0" fill="rgb(241,62,20)" rx="2" ry="2" />
<text  x="13.45" y="271.5" ></text>
</g>
<g >
<title>__libc_start_main (85 samples, 0.03%)</title><rect x="10.1" y="277" width="0.3" height="15.0" fill="rgb(247,16,5)" rx="2" ry="2" />
<text  x="13.05" y="287.5" ></text>
</g>
<g >
<title>loadMap (85 samples, 0.03%)</title><rect x="10.1" y="245" width="0.3" height="15.0" fill="rgb(235,5,39)" rx="2" ry="2" />
<text  x="13.05" y="255.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (155 samples, 0.05%)</title><rect x="131.6" y="85" width="0.6" height="15.0" fill="rgb(246,127,49)" rx="2" ry="2" />
<text  x="134.63" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (59 samples, 0.02%)</title><rect x="10.1" y="149" width="0.2" height="15.0" fill="rgb(240,182,11)" rx="2" ry="2" />
<text  x="13.06" y="159.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (3,577 samples, 1.17%)</title><rect x="108.6" y="85" width="13.8" height="15.0" fill="rgb(254,61,46)" rx="2" ry="2" />
<text  x="111.65" y="95.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;, std::less&lt;waveElement&gt; &gt;::top (703 samples, 0.23%)</title><rect x="1051.6" y="133" width="2.7" height="15.0" fill="rgb(208,214,30)" rx="2" ry="2" />
<text  x="1054.63" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (268 samples, 0.09%)</title><rect x="142.4" y="85" width="1.0" height="15.0" fill="rgb(241,20,1)" rx="2" ry="2" />
<text  x="145.42" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::base (373 samples, 0.12%)</title><rect x="605.3" y="85" width="1.4" height="15.0" fill="rgb(207,8,0)" rx="2" ry="2" />
<text  x="608.31" y="95.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (268 samples, 0.09%)</title><rect x="75.8" y="85" width="1.0" height="15.0" fill="rgb(250,140,36)" rx="2" ry="2" />
<text  x="78.77" y="95.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (147 samples, 0.05%)</title><rect x="122.4" y="85" width="0.6" height="15.0" fill="rgb(235,33,28)" rx="2" ry="2" />
<text  x="125.43" y="95.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (1,675 samples, 0.55%)</title><rect x="69.3" y="85" width="6.5" height="15.0" fill="rgb(228,7,48)" rx="2" ry="2" />
<text  x="72.31" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (458 samples, 0.15%)</title><rect x="423.0" y="133" width="1.7" height="15.0" fill="rgb(210,5,12)" rx="2" ry="2" />
<text  x="425.95" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (43 samples, 0.01%)</title><rect x="19.3" y="117" width="0.2" height="15.0" fill="rgb(238,202,36)" rx="2" ry="2" />
<text  x="22.29" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;Feature, std::allocator&lt;Feature&gt; &gt;::_M_default_append (28 samples, 0.01%)</title><rect x="26.0" y="197" width="0.1" height="15.0" fill="rgb(227,196,52)" rx="2" ry="2" />
<text  x="28.98" y="207.5" ></text>
</g>
<g >
<title>strcmp@plt (177 samples, 0.06%)</title><rect x="21.6" y="85" width="0.7" height="15.0" fill="rgb(237,95,28)" rx="2" ry="2" />
<text  x="24.63" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, int&gt;, false, false&gt;::_Node_iterator (458 samples, 0.15%)</title><rect x="423.0" y="117" width="1.7" height="15.0" fill="rgb(233,15,11)" rx="2" ry="2" />
<text  x="425.95" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;waveElement&gt; &gt;::construct&lt;waveElement, waveElement const&amp;&gt; (2,371 samples, 0.77%)</title><rect x="1042.5" y="101" width="9.1" height="15.0" fill="rgb(233,99,32)" rx="2" ry="2" />
<text  x="1045.50" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (132 samples, 0.04%)</title><rect x="131.1" y="69" width="0.5" height="15.0" fill="rgb(228,63,18)" rx="2" ry="2" />
<text  x="134.13" y="79.5" ></text>
</g>
<g >
<title>all (306,239 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(237,135,10)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>_dl_relocate_object (52 samples, 0.02%)</title><rect x="10.7" y="213" width="0.2" height="15.0" fill="rgb(218,59,41)" rx="2" ry="2" />
<text  x="13.72" y="223.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (890 samples, 0.29%)</title><rect x="65.2" y="69" width="3.5" height="15.0" fill="rgb(252,206,46)" rx="2" ry="2" />
<text  x="68.24" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (9,882 samples, 3.23%)</title><rect x="183.0" y="133" width="38.1" height="15.0" fill="rgb(225,132,25)" rx="2" ry="2" />
<text  x="186.04" y="143.5" >std..</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (48 samples, 0.02%)</title><rect x="17.1" y="261" width="0.2" height="15.0" fill="rgb(254,3,6)" rx="2" ry="2" />
<text  x="20.07" y="271.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (771 samples, 0.25%)</title><rect x="207.7" y="101" width="3.0" height="15.0" fill="rgb(252,190,51)" rx="2" ry="2" />
<text  x="210.71" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt;, std::allocator&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt; &gt; &gt;::_M_realloc_insert&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt; &gt; (73 samples, 0.02%)</title><rect x="14.2" y="181" width="0.3" height="15.0" fill="rgb(209,107,35)" rx="2" ry="2" />
<text  x="17.19" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement const*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (578 samples, 0.19%)</title><rect x="1166.1" y="101" width="2.2" height="15.0" fill="rgb(209,135,22)" rx="2" ry="2" />
<text  x="1169.09" y="111.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (194 samples, 0.06%)</title><rect x="217.3" y="117" width="0.7" height="15.0" fill="rgb(233,149,49)" rx="2" ry="2" />
<text  x="220.26" y="127.5" ></text>
</g>
<g >
<title>findStreetSegmentsOfIntersection (11,518 samples, 3.76%)</title><rect x="99.7" y="133" width="44.4" height="15.0" fill="rgb(229,62,42)" rx="2" ry="2" />
<text  x="102.75" y="143.5" >find..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;int, int&gt; &gt; (224 samples, 0.07%)</title><rect x="15.2" y="261" width="0.8" height="15.0" fill="rgb(224,215,0)" rx="2" ry="2" />
<text  x="18.18" y="271.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (441 samples, 0.14%)</title><rect x="995.6" y="37" width="1.7" height="15.0" fill="rgb(233,143,29)" rx="2" ry="2" />
<text  x="998.60" y="47.5" ></text>
</g>
<g >
<title>findDistanceBetweenTwoPoints (70 samples, 0.02%)</title><rect x="11.1" y="245" width="0.2" height="15.0" fill="rgb(205,106,28)" rx="2" ry="2" />
<text  x="14.06" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (36,448 samples, 11.90%)</title><rect x="424.7" y="133" width="140.5" height="15.0" fill="rgb(217,57,54)" rx="2" ry="2" />
<text  x="427.72" y="143.5" >std::_Hashtable&lt;i..</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (1,601 samples, 0.52%)</title><rect x="19.6" y="149" width="6.1" height="15.0" fill="rgb(207,140,13)" rx="2" ry="2" />
<text  x="22.58" y="159.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (268 samples, 0.09%)</title><rect x="75.8" y="69" width="1.0" height="15.0" fill="rgb(252,62,7)" rx="2" ry="2" />
<text  x="78.77" y="79.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load (44 samples, 0.01%)</title><rect x="18.3" y="165" width="0.2" height="15.0" fill="rgb(238,47,41)" rx="2" ry="2" />
<text  x="21.33" y="175.5" ></text>
</g>
<g >
<title>std::forward&lt;Node const&amp;&gt; (97 samples, 0.03%)</title><rect x="145.7" y="101" width="0.4" height="15.0" fill="rgb(240,36,13)" rx="2" ry="2" />
<text  x="148.71" y="111.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (85 samples, 0.03%)</title><rect x="10.1" y="229" width="0.3" height="15.0" fill="rgb(247,173,8)" rx="2" ry="2" />
<text  x="13.05" y="239.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (282 samples, 0.09%)</title><rect x="20.5" y="101" width="1.1" height="15.0" fill="rgb(223,10,38)" rx="2" ry="2" />
<text  x="23.54" y="111.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (221 samples, 0.07%)</title><rect x="138.5" y="101" width="0.8" height="15.0" fill="rgb(240,72,43)" rx="2" ry="2" />
<text  x="141.46" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::operator[] (101 samples, 0.03%)</title><rect x="143.7" y="117" width="0.4" height="15.0" fill="rgb(242,86,25)" rx="2" ry="2" />
<text  x="146.74" y="127.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (63 samples, 0.02%)</title><rect x="22.8" y="85" width="0.2" height="15.0" fill="rgb(238,16,25)" rx="2" ry="2" />
<text  x="25.78" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;Feature, std::allocator&lt;Feature&gt; &gt; &gt;::load_object_data (2,111 samples, 0.69%)</title><rect x="18.0" y="213" width="8.1" height="15.0" fill="rgb(218,75,28)" rx="2" ry="2" />
<text  x="20.96" y="223.5" ></text>
</g>
<g >
<title>_dl_start (59 samples, 0.02%)</title><rect x="10.7" y="261" width="0.2" height="15.0" fill="rgb(254,133,37)" rx="2" ry="2" />
<text  x="13.69" y="271.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;, std::less&lt;waveElement&gt; &gt;::push (8,880 samples, 2.90%)</title><rect x="1017.4" y="133" width="34.2" height="15.0" fill="rgb(250,155,1)" rx="2" ry="2" />
<text  x="1020.42" y="143.5" >st..</text>
</g>
<g >
<title>Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper::RunImpl (301,909 samples, 98.59%)</title><rect x="26.1" y="181" width="1163.3" height="15.0" fill="rgb(226,166,23)" rx="2" ry="2" />
<text  x="29.12" y="191.5" >Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper::RunImpl</text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::front (1,015 samples, 0.33%)</title><rect x="1168.3" y="133" width="3.9" height="15.0" fill="rgb(239,134,26)" rx="2" ry="2" />
<text  x="1171.32" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (124 samples, 0.04%)</title><rect x="15.3" y="245" width="0.5" height="15.0" fill="rgb(209,201,12)" rx="2" ry="2" />
<text  x="18.30" y="255.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, int&gt;&amp;&gt; (231 samples, 0.08%)</title><rect x="528.4" y="53" width="0.9" height="15.0" fill="rgb(239,78,45)" rx="2" ry="2" />
<text  x="531.37" y="63.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (396 samples, 0.13%)</title><rect x="166.9" y="101" width="1.5" height="15.0" fill="rgb(205,167,26)" rx="2" ry="2" />
<text  x="169.86" y="111.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.01%)</title><rect x="14.4" y="165" width="0.1" height="15.0" fill="rgb(247,126,20)" rx="2" ry="2" />
<text  x="17.36" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (434 samples, 0.14%)</title><rect x="12.9" y="213" width="1.7" height="15.0" fill="rgb(229,82,20)" rx="2" ry="2" />
<text  x="15.91" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_insert_multi_node (67 samples, 0.02%)</title><rect x="14.8" y="261" width="0.2" height="15.0" fill="rgb(218,116,6)" rx="2" ry="2" />
<text  x="17.75" y="271.5" ></text>
</g>
<g >
<title>LatLon::longitude (748 samples, 0.24%)</title><rect x="353.3" y="117" width="2.8" height="15.0" fill="rgb(213,45,51)" rx="2" ry="2" />
<text  x="356.25" y="127.5" ></text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (289 samples, 0.09%)</title><rect x="997.3" y="53" width="1.1" height="15.0" fill="rgb(223,200,0)" rx="2" ry="2" />
<text  x="1000.30" y="63.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (210 samples, 0.07%)</title><rect x="998.4" y="53" width="0.8" height="15.0" fill="rgb(206,169,11)" rx="2" ry="2" />
<text  x="1001.41" y="63.5" ></text>
</g>
</g>
</svg>
