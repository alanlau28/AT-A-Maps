<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>operator new (2,038 samples, 0.84%)</title><rect x="132.4" y="69" width="9.8" height="15.0" fill="rgb(214,85,17)" rx="2" ry="2" />
<text  x="135.35" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator+ (49,875 samples, 20.46%)</title><rect x="653.1" y="69" width="241.5" height="15.0" fill="rgb(243,67,37)" rx="2" ry="2" />
<text  x="656.14" y="79.5" >__gnu_cxx::__normal_iterator&lt;wav..</text>
</g>
<g >
<title>__run_exit_handlers (28 samples, 0.01%)</title><rect x="10.5" y="277" width="0.1" height="15.0" fill="rgb(225,148,6)" rx="2" ry="2" />
<text  x="13.46" y="287.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; &gt;::load_object_data (51 samples, 0.02%)</title><rect x="12.7" y="197" width="0.3" height="15.0" fill="rgb(212,163,51)" rx="2" ry="2" />
<text  x="15.73" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (171 samples, 0.07%)</title><rect x="93.4" y="85" width="0.8" height="15.0" fill="rgb(227,192,47)" rx="2" ry="2" />
<text  x="96.39" y="95.5" ></text>
</g>
<g >
<title>findStreetSegmentsOfIntersection (11,215 samples, 4.60%)</title><rect x="117.3" y="133" width="54.3" height="15.0" fill="rgb(212,155,32)" rx="2" ry="2" />
<text  x="120.29" y="143.5" >findS..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_rehash (40 samples, 0.02%)</title><rect x="15.0" y="245" width="0.2" height="15.0" fill="rgb(236,41,36)" rx="2" ry="2" />
<text  x="18.00" y="255.5" ></text>
</g>
<g >
<title>_int_free (149 samples, 0.06%)</title><rect x="27.4" y="165" width="0.7" height="15.0" fill="rgb(210,182,34)" rx="2" ry="2" />
<text  x="30.42" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (77 samples, 0.03%)</title><rect x="19.1" y="133" width="0.4" height="15.0" fill="rgb(231,216,27)" rx="2" ry="2" />
<text  x="22.11" y="143.5" ></text>
</g>
<g >
<title>memmove@plt (351 samples, 0.14%)</title><rect x="73.1" y="69" width="1.7" height="15.0" fill="rgb(243,19,31)" rx="2" ry="2" />
<text  x="76.05" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::operator[] (133 samples, 0.05%)</title><rect x="170.9" y="117" width="0.7" height="15.0" fill="rgb(218,190,50)" rx="2" ry="2" />
<text  x="173.93" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; (1,318 samples, 0.54%)</title><rect x="1093.3" y="117" width="6.4" height="15.0" fill="rgb(252,69,37)" rx="2" ry="2" />
<text  x="1096.34" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_rehash_aux (40 samples, 0.02%)</title><rect x="15.0" y="229" width="0.2" height="15.0" fill="rgb(240,165,31)" rx="2" ry="2" />
<text  x="18.00" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::end (699 samples, 0.29%)</title><rect x="1041.4" y="117" width="3.3" height="15.0" fill="rgb(220,6,0)" rx="2" ry="2" />
<text  x="1044.36" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::begin (939 samples, 0.39%)</title><rect x="1164.8" y="117" width="4.6" height="15.0" fill="rgb(247,32,10)" rx="2" ry="2" />
<text  x="1167.84" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::push_back (10,290 samples, 4.22%)</title><rect x="171.7" y="133" width="49.9" height="15.0" fill="rgb(254,110,6)" rx="2" ry="2" />
<text  x="174.74" y="143.5" >std::..</text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (260 samples, 0.11%)</title><rect x="1019.5" y="53" width="1.3" height="15.0" fill="rgb(252,116,27)" rx="2" ry="2" />
<text  x="1022.54" y="63.5" ></text>
</g>
<g >
<title>operator new (158 samples, 0.06%)</title><rect x="1074.2" y="85" width="0.8" height="15.0" fill="rgb(219,188,5)" rx="2" ry="2" />
<text  x="1077.19" y="95.5" ></text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (193 samples, 0.08%)</title><rect x="1135.4" y="101" width="0.9" height="15.0" fill="rgb(238,156,17)" rx="2" ry="2" />
<text  x="1138.36" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, TypedOSMID&gt;::load_object_data (121 samples, 0.05%)</title><rect x="19.0" y="149" width="0.6" height="15.0" fill="rgb(252,57,4)" rx="2" ry="2" />
<text  x="22.01" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::begin (1,982 samples, 0.81%)</title><rect x="1155.2" y="117" width="9.6" height="15.0" fill="rgb(211,57,52)" rx="2" ry="2" />
<text  x="1158.25" y="127.5" ></text>
</g>
<g >
<title>main (240,055 samples, 98.47%)</title><rect x="27.4" y="277" width="1162.0" height="15.0" fill="rgb(236,193,10)" rx="2" ry="2" />
<text  x="30.42" y="287.5" >main</text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (109 samples, 0.04%)</title><rect x="1020.8" y="53" width="0.5" height="15.0" fill="rgb(251,7,41)" rx="2" ry="2" />
<text  x="1023.80" y="63.5" ></text>
</g>
<g >
<title>UnitTest::ExecuteTest&lt;Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper&gt; (240,055 samples, 98.47%)</title><rect x="27.4" y="197" width="1162.0" height="15.0" fill="rgb(247,35,49)" rx="2" ry="2" />
<text  x="30.42" y="207.5" >UnitTest::ExecuteTest&lt;Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper&gt;</text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (3,634 samples, 1.49%)</title><rect x="184.1" y="101" width="17.6" height="15.0" fill="rgb(224,190,26)" rx="2" ry="2" />
<text  x="187.09" y="111.5" ></text>
</g>
<g >
<title>Node::~Node (3,915 samples, 1.61%)</title><rect x="98.3" y="133" width="19.0" height="15.0" fill="rgb(231,106,9)" rx="2" ry="2" />
<text  x="101.34" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (77 samples, 0.03%)</title><rect x="156.0" y="69" width="0.4" height="15.0" fill="rgb(212,19,7)" rx="2" ry="2" />
<text  x="159.01" y="79.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, long, waveElement, __gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;waveElement&gt; &gt; &gt; (7,819 samples, 3.21%)</title><rect x="1099.7" y="117" width="37.9" height="15.0" fill="rgb(247,15,50)" rx="2" ry="2" />
<text  x="1102.72" y="127.5" >std..</text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (3,757 samples, 1.54%)</title><rect x="128.7" y="85" width="18.1" height="15.0" fill="rgb(224,128,33)" rx="2" ry="2" />
<text  x="131.65" y="95.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (36 samples, 0.01%)</title><rect x="24.6" y="53" width="0.2" height="15.0" fill="rgb(222,61,19)" rx="2" ry="2" />
<text  x="27.61" y="63.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (218 samples, 0.09%)</title><rect x="165.0" y="101" width="1.0" height="15.0" fill="rgb(248,152,19)" rx="2" ry="2" />
<text  x="167.95" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; (1,062 samples, 0.44%)</title><rect x="534.2" y="85" width="5.2" height="15.0" fill="rgb(208,158,53)" rx="2" ry="2" />
<text  x="537.23" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (50 samples, 0.02%)</title><rect x="16.8" y="261" width="0.3" height="15.0" fill="rgb(236,73,47)" rx="2" ry="2" />
<text  x="19.81" y="271.5" ></text>
</g>
<g >
<title>malloc@plt (1,782 samples, 0.73%)</title><rect x="233.4" y="69" width="8.6" height="15.0" fill="rgb(240,122,17)" rx="2" ry="2" />
<text  x="236.40" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (1,069 samples, 0.44%)</title><rect x="89.0" y="101" width="5.2" height="15.0" fill="rgb(220,63,37)" rx="2" ry="2" />
<text  x="92.04" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (13,158 samples, 5.40%)</title><rect x="830.9" y="53" width="63.7" height="15.0" fill="rgb(213,13,29)" rx="2" ry="2" />
<text  x="833.86" y="63.5" >__gnu_..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (38 samples, 0.02%)</title><rect x="233.2" y="85" width="0.2" height="15.0" fill="rgb(252,107,42)" rx="2" ry="2" />
<text  x="236.21" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;StreetSegmentInfo, std::allocator&lt;StreetSegmentInfo&gt; &gt;::operator[] (462 samples, 0.19%)</title><rect x="1138.6" y="133" width="2.3" height="15.0" fill="rgb(210,210,2)" rx="2" ry="2" />
<text  x="1141.63" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;std::less&lt;waveElement&gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; &gt; (13,186 samples, 5.41%)</title><rect x="894.6" y="69" width="63.8" height="15.0" fill="rgb(253,175,52)" rx="2" ry="2" />
<text  x="897.55" y="79.5" >__gnu_c..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::select_on_container_copy_construction (123 samples, 0.05%)</title><rect x="228.0" y="101" width="0.6" height="15.0" fill="rgb(237,105,32)" rx="2" ry="2" />
<text  x="231.01" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (105 samples, 0.04%)</title><rect x="269.1" y="117" width="0.6" height="15.0" fill="rgb(206,168,48)" rx="2" ry="2" />
<text  x="272.15" y="127.5" ></text>
</g>
<g >
<title>read@plt (36 samples, 0.01%)</title><rect x="24.6" y="37" width="0.2" height="15.0" fill="rgb(231,76,32)" rx="2" ry="2" />
<text  x="27.61" y="47.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;waveElement&gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, waveElement&gt; (1,227 samples, 0.50%)</title><rect x="1129.4" y="101" width="6.0" height="15.0" fill="rgb(253,213,50)" rx="2" ry="2" />
<text  x="1132.42" y="111.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::select_on_container_copy_construction (57 samples, 0.02%)</title><rect x="183.8" y="85" width="0.3" height="15.0" fill="rgb(211,147,47)" rx="2" ry="2" />
<text  x="186.81" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (37 samples, 0.02%)</title><rect x="45.7" y="85" width="0.2" height="15.0" fill="rgb(217,224,50)" rx="2" ry="2" />
<text  x="48.72" y="95.5" ></text>
</g>
<g >
<title>getIntersectionPosition (21 samples, 0.01%)</title><rect x="11.3" y="245" width="0.1" height="15.0" fill="rgb(245,113,7)" rx="2" ry="2" />
<text  x="14.30" y="255.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (56 samples, 0.02%)</title><rect x="1189.4" y="245" width="0.3" height="15.0" fill="rgb(229,217,32)" rx="2" ry="2" />
<text  x="1192.45" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, EdgeProperties&gt;::load_object_data (204 samples, 0.08%)</title><rect x="13.1" y="165" width="1.0" height="15.0" fill="rgb(211,161,10)" rx="2" ry="2" />
<text  x="16.11" y="175.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (1,627 samples, 0.67%)</title><rect x="79.9" y="85" width="7.9" height="15.0" fill="rgb(208,223,49)" rx="2" ry="2" />
<text  x="82.94" y="95.5" ></text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;std::less&lt;waveElement&gt; &gt; &gt; (106,778 samples, 43.80%)</title><rect x="520.6" y="101" width="516.9" height="15.0" fill="rgb(224,48,5)" rx="2" ry="2" />
<text  x="523.61" y="111.5" >std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;..</text>
</g>
<g >
<title>strcmp@plt (48 samples, 0.02%)</title><rect x="18.8" y="117" width="0.2" height="15.0" fill="rgb(213,95,21)" rx="2" ry="2" />
<text  x="21.77" y="127.5" ></text>
</g>
<g >
<title>findStreetSegmentLength (135 samples, 0.06%)</title><rect x="11.0" y="261" width="0.7" height="15.0" fill="rgb(237,55,3)" rx="2" ry="2" />
<text  x="14.04" y="271.5" ></text>
</g>
<g >
<title>findDistanceBetweenTwoPoints (40 samples, 0.02%)</title><rect x="11.1" y="245" width="0.2" height="15.0" fill="rgb(250,129,41)" rx="2" ry="2" />
<text  x="14.10" y="255.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (2,076 samples, 0.85%)</title><rect x="17.4" y="277" width="10.0" height="15.0" fill="rgb(249,120,31)" rx="2" ry="2" />
<text  x="20.37" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (178 samples, 0.07%)</title><rect x="1069.5" y="101" width="0.8" height="15.0" fill="rgb(212,167,21)" rx="2" ry="2" />
<text  x="1072.47" y="111.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (50 samples, 0.02%)</title><rect x="10.6" y="245" width="0.3" height="15.0" fill="rgb(250,63,9)" rx="2" ry="2" />
<text  x="13.63" y="255.5" ></text>
</g>
<g >
<title>std::forward&lt;waveElement const&amp;&gt; (289 samples, 0.12%)</title><rect x="1085.1" y="85" width="1.4" height="15.0" fill="rgb(243,169,31)" rx="2" ry="2" />
<text  x="1088.10" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (108 samples, 0.04%)</title><rect x="13.5" y="133" width="0.5" height="15.0" fill="rgb(232,131,53)" rx="2" ry="2" />
<text  x="16.46" y="143.5" ></text>
</g>
<g >
<title>getStreetSegmentInfo (69 samples, 0.03%)</title><rect x="12.4" y="261" width="0.3" height="15.0" fill="rgb(223,132,1)" rx="2" ry="2" />
<text  x="15.39" y="271.5" ></text>
</g>
<g >
<title>malloc (2,879 samples, 1.18%)</title><rect x="45.9" y="69" width="13.9" height="15.0" fill="rgb(215,48,50)" rx="2" ry="2" />
<text  x="48.90" y="79.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (1,128 samples, 0.46%)</title><rect x="242.0" y="85" width="5.5" height="15.0" fill="rgb(241,177,0)" rx="2" ry="2" />
<text  x="245.02" y="95.5" ></text>
</g>
<g >
<title>findStreetSegmentTravelTime (2,590 samples, 1.06%)</title><rect x="486.1" y="133" width="12.5" height="15.0" fill="rgb(225,170,30)" rx="2" ry="2" />
<text  x="489.08" y="143.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (1,641 samples, 0.67%)</title><rect x="157.0" y="101" width="8.0" height="15.0" fill="rgb(241,104,49)" rx="2" ry="2" />
<text  x="160.01" y="111.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (239 samples, 0.10%)</title><rect x="20.6" y="101" width="1.2" height="15.0" fill="rgb(244,174,50)" rx="2" ry="2" />
<text  x="23.63" y="111.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, long, waveElement, __gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;waveElement&gt; &gt; &gt; (13,005 samples, 5.33%)</title><rect x="958.4" y="69" width="62.9" height="15.0" fill="rgb(213,98,45)" rx="2" ry="2" />
<text  x="961.38" y="79.5" >std::_..</text>
</g>
<g >
<title>malloc_consolidate (149 samples, 0.06%)</title><rect x="27.4" y="149" width="0.7" height="15.0" fill="rgb(226,115,27)" rx="2" ry="2" />
<text  x="30.42" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (222 samples, 0.09%)</title><rect x="13.0" y="181" width="1.1" height="15.0" fill="rgb(213,130,47)" rx="2" ry="2" />
<text  x="16.03" y="191.5" ></text>
</g>
<g >
<title>waveElement::waveElement (272 samples, 0.11%)</title><rect x="1169.4" y="133" width="1.3" height="15.0" fill="rgb(234,103,38)" rx="2" ry="2" />
<text  x="1172.38" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (6,358 samples, 2.61%)</title><rect x="269.7" y="133" width="30.7" height="15.0" fill="rgb(247,19,5)" rx="2" ry="2" />
<text  x="272.66" y="143.5" >st..</text>
</g>
<g >
<title>std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, std::less&lt;waveElement&gt; &gt; (109,619 samples, 44.97%)</title><rect x="506.9" y="117" width="530.6" height="15.0" fill="rgb(253,150,53)" rx="2" ry="2" />
<text  x="509.86" y="127.5" >std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;wav..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (93 samples, 0.04%)</title><rect x="24.3" y="85" width="0.5" height="15.0" fill="rgb(237,150,7)" rx="2" ry="2" />
<text  x="27.34" y="95.5" ></text>
</g>
<g >
<title>dl_main (49 samples, 0.02%)</title><rect x="10.6" y="229" width="0.3" height="15.0" fill="rgb(229,97,35)" rx="2" ry="2" />
<text  x="13.63" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (54 samples, 0.02%)</title><rect x="187.4" y="69" width="0.3" height="15.0" fill="rgb(211,173,13)" rx="2" ry="2" />
<text  x="190.43" y="79.5" ></text>
</g>
<g >
<title>Suiteinter_inter_path_perf_very_hard_public::TestMapFixturefindPathBetweenIntersections_perf_very_hard::RunImpl (240,055 samples, 98.47%)</title><rect x="27.4" y="213" width="1162.0" height="15.0" fill="rgb(241,106,34)" rx="2" ry="2" />
<text  x="30.42" y="223.5" >Suiteinter_inter_path_perf_very_hard_public::TestMapFixturefindPathBetweenIntersections_perf_very_hard::RunImpl</text>
</g>
<g >
<title>_int_malloc (33 samples, 0.01%)</title><rect x="14.4" y="133" width="0.2" height="15.0" fill="rgb(233,67,24)" rx="2" ry="2" />
<text  x="17.40" y="143.5" ></text>
</g>
<g >
<title>traceBack (31 samples, 0.01%)</title><rect x="1189.2" y="149" width="0.2" height="15.0" fill="rgb(209,83,45)" rx="2" ry="2" />
<text  x="1192.23" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; const&amp;&gt; (36 samples, 0.01%)</title><rect x="17.1" y="261" width="0.2" height="15.0" fill="rgb(217,182,41)" rx="2" ry="2" />
<text  x="20.11" y="271.5" ></text>
</g>
<g >
<title>std::forward&lt;Node const&amp;&gt; (79 samples, 0.03%)</title><rect x="182.8" y="101" width="0.4" height="15.0" fill="rgb(231,110,0)" rx="2" ry="2" />
<text  x="185.83" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (130 samples, 0.05%)</title><rect x="78.5" y="53" width="0.6" height="15.0" fill="rgb(207,131,29)" rx="2" ry="2" />
<text  x="81.48" y="63.5" ></text>
</g>
<g >
<title>main (85 samples, 0.03%)</title><rect x="10.0" y="261" width="0.5" height="15.0" fill="rgb(246,80,10)" rx="2" ry="2" />
<text  x="13.04" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (125 samples, 0.05%)</title><rect x="25.4" y="133" width="0.6" height="15.0" fill="rgb(211,175,32)" rx="2" ry="2" />
<text  x="28.42" y="143.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (27 samples, 0.01%)</title><rect x="19.9" y="133" width="0.1" height="15.0" fill="rgb(221,224,36)" rx="2" ry="2" />
<text  x="22.86" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator- (891 samples, 0.37%)</title><rect x="1089.0" y="117" width="4.3" height="15.0" fill="rgb(225,40,47)" rx="2" ry="2" />
<text  x="1092.02" y="127.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (22 samples, 0.01%)</title><rect x="17.6" y="165" width="0.1" height="15.0" fill="rgb(227,153,39)" rx="2" ry="2" />
<text  x="20.62" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (880 samples, 0.36%)</title><rect x="264.9" y="117" width="4.2" height="15.0" fill="rgb(252,137,5)" rx="2" ry="2" />
<text  x="267.89" y="127.5" ></text>
</g>
<g >
<title>operator new (126 samples, 0.05%)</title><rect x="26.0" y="133" width="0.6" height="15.0" fill="rgb(225,188,34)" rx="2" ry="2" />
<text  x="29.02" y="143.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (849 samples, 0.35%)</title><rect x="196.6" y="69" width="4.1" height="15.0" fill="rgb(247,97,31)" rx="2" ry="2" />
<text  x="199.61" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (547 samples, 0.22%)</title><rect x="1143.2" y="133" width="2.7" height="15.0" fill="rgb(205,39,17)" rx="2" ry="2" />
<text  x="1146.25" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_erase_at_end (3,827 samples, 1.57%)</title><rect x="1170.7" y="149" width="18.5" height="15.0" fill="rgb(228,101,32)" rx="2" ry="2" />
<text  x="1173.70" y="159.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (901 samples, 0.37%)</title><rect x="74.8" y="69" width="4.3" height="15.0" fill="rgb(252,229,35)" rx="2" ry="2" />
<text  x="77.75" y="79.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (73 samples, 0.03%)</title><rect x="1189.4" y="261" width="0.4" height="15.0" fill="rgb(209,213,52)" rx="2" ry="2" />
<text  x="1192.45" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (1,485 samples, 0.61%)</title><rect x="19.6" y="149" width="7.2" height="15.0" fill="rgb(215,76,1)" rx="2" ry="2" />
<text  x="22.59" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,068 samples, 0.85%)</title><rect x="17.4" y="229" width="10.0" height="15.0" fill="rgb(252,195,18)" rx="2" ry="2" />
<text  x="20.41" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (104 samples, 0.04%)</title><rect x="207.0" y="69" width="0.5" height="15.0" fill="rgb(208,89,13)" rx="2" ry="2" />
<text  x="210.04" y="79.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (870 samples, 0.36%)</title><rect x="152.8" y="101" width="4.2" height="15.0" fill="rgb(253,186,18)" rx="2" ry="2" />
<text  x="155.80" y="111.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (263 samples, 0.11%)</title><rect x="1136.3" y="101" width="1.3" height="15.0" fill="rgb(252,86,7)" rx="2" ry="2" />
<text  x="1139.29" y="111.5" ></text>
</g>
<g >
<title>std::_Construct&lt;waveElement, waveElement&gt; (25 samples, 0.01%)</title><rect x="1061.7" y="85" width="0.1" height="15.0" fill="rgb(237,159,29)" rx="2" ry="2" />
<text  x="1064.69" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (81 samples, 0.03%)</title><rect x="170.5" y="101" width="0.4" height="15.0" fill="rgb(208,60,50)" rx="2" ry="2" />
<text  x="173.54" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::detail::adj_list_gen&lt;boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt;, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt;::config::stored_vertex, std::allocator&lt;boost::detail::adj_list_gen&lt;boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt;, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt;::config::stored_vertex&gt; &gt;::_M_default_append (23 samples, 0.01%)</title><rect x="10.3" y="149" width="0.2" height="15.0" fill="rgb(226,25,49)" rx="2" ry="2" />
<text  x="13.34" y="159.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (337 samples, 0.14%)</title><rect x="23.8" y="101" width="1.6" height="15.0" fill="rgb(227,76,38)" rx="2" ry="2" />
<text  x="26.79" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (9,509 samples, 3.90%)</title><rect x="43.0" y="101" width="46.0" height="15.0" fill="rgb(248,159,26)" rx="2" ry="2" />
<text  x="46.01" y="111.5" >std:..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::base (219 samples, 0.09%)</title><rect x="538.3" y="69" width="1.1" height="15.0" fill="rgb(222,75,10)" rx="2" ry="2" />
<text  x="541.31" y="79.5" ></text>
</g>
<g >
<title>[unknown] (40 samples, 0.02%)</title><rect x="19.1" y="117" width="0.2" height="15.0" fill="rgb(208,167,30)" rx="2" ry="2" />
<text  x="22.11" y="127.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (3,450 samples, 1.42%)</title><rect x="230.8" y="101" width="16.7" height="15.0" fill="rgb(227,229,6)" rx="2" ry="2" />
<text  x="233.78" y="111.5" ></text>
</g>
<g >
<title>findOtherIntersection (10,257 samples, 4.21%)</title><rect x="436.4" y="133" width="49.7" height="15.0" fill="rgb(224,110,22)" rx="2" ry="2" />
<text  x="439.43" y="143.5" >findO..</text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::empty (3,474 samples, 1.43%)</title><rect x="1148.0" y="133" width="16.8" height="15.0" fill="rgb(245,202,39)" rx="2" ry="2" />
<text  x="1151.02" y="143.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;, std::less&lt;waveElement&gt; &gt;::empty (867 samples, 0.36%)</title><rect x="498.6" y="133" width="4.2" height="15.0" fill="rgb(216,24,12)" rx="2" ry="2" />
<text  x="501.62" y="143.5" ></text>
</g>
<g >
<title>UnitTest::TestRunner::RunTest (240,055 samples, 98.47%)</title><rect x="27.4" y="245" width="1162.0" height="15.0" fill="rgb(251,111,37)" rx="2" ry="2" />
<text  x="30.42" y="255.5" >UnitTest::TestRunner::RunTest</text>
</g>
<g >
<title>operator new (25 samples, 0.01%)</title><rect x="14.8" y="229" width="0.1" height="15.0" fill="rgb(246,42,24)" rx="2" ry="2" />
<text  x="17.75" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;::_M_realloc_insert&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; const&amp;&gt; (23 samples, 0.01%)</title><rect x="14.6" y="181" width="0.1" height="15.0" fill="rgb(232,200,9)" rx="2" ry="2" />
<text  x="17.62" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator+ (6,081 samples, 2.49%)</title><rect x="979.4" y="53" width="29.4" height="15.0" fill="rgb(227,59,48)" rx="2" ry="2" />
<text  x="982.40" y="63.5" >__..</text>
</g>
<g >
<title>all (243,780 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(229,143,54)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>findPathBetweenIntersections (239,901 samples, 98.41%)</title><rect x="28.2" y="165" width="1161.2" height="15.0" fill="rgb(217,208,49)" rx="2" ry="2" />
<text  x="31.15" y="175.5" >findPathBetweenIntersections</text>
</g>
<g >
<title>memmove@plt (1,086 samples, 0.45%)</title><rect x="147.5" y="85" width="5.3" height="15.0" fill="rgb(251,42,50)" rx="2" ry="2" />
<text  x="150.54" y="95.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (37 samples, 0.02%)</title><rect x="10.7" y="197" width="0.2" height="15.0" fill="rgb(205,68,48)" rx="2" ry="2" />
<text  x="13.69" y="207.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (72 samples, 0.03%)</title><rect x="23.1" y="85" width="0.3" height="15.0" fill="rgb(229,158,47)" rx="2" ry="2" />
<text  x="26.05" y="95.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (83 samples, 0.03%)</title><rect x="10.1" y="165" width="0.4" height="15.0" fill="rgb(225,226,13)" rx="2" ry="2" />
<text  x="13.05" y="175.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;, std::less&lt;waveElement&gt; &gt;::top (518 samples, 0.21%)</title><rect x="1086.5" y="133" width="2.5" height="15.0" fill="rgb(210,121,4)" rx="2" ry="2" />
<text  x="1089.50" y="143.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (144 samples, 0.06%)</title><rect x="1036.8" y="85" width="0.7" height="15.0" fill="rgb(252,12,50)" rx="2" ry="2" />
<text  x="1039.77" y="95.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (351 samples, 0.14%)</title><rect x="73.1" y="85" width="1.7" height="15.0" fill="rgb(216,80,11)" rx="2" ry="2" />
<text  x="76.05" y="95.5" ></text>
</g>
<g >
<title>std::operator!=&lt;waveElement*&gt; (22 samples, 0.01%)</title><rect x="1061.9" y="85" width="0.1" height="15.0" fill="rgb(210,110,48)" rx="2" ry="2" />
<text  x="1064.86" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (54 samples, 0.02%)</title><rect x="187.4" y="53" width="0.3" height="15.0" fill="rgb(250,44,2)" rx="2" ry="2" />
<text  x="190.43" y="63.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (1,757 samples, 0.72%)</title><rect x="255.1" y="117" width="8.5" height="15.0" fill="rgb(237,202,53)" rx="2" ry="2" />
<text  x="258.11" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (39 samples, 0.02%)</title><rect x="13.7" y="101" width="0.2" height="15.0" fill="rgb(211,20,38)" rx="2" ry="2" />
<text  x="16.70" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (29 samples, 0.01%)</title><rect x="132.2" y="69" width="0.2" height="15.0" fill="rgb(240,157,40)" rx="2" ry="2" />
<text  x="135.21" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (492 samples, 0.20%)</title><rect x="1140.9" y="133" width="2.3" height="15.0" fill="rgb(208,65,37)" rx="2" ry="2" />
<text  x="1143.86" y="143.5" ></text>
</g>
<g >
<title>malloc@plt (1,852 samples, 0.76%)</title><rect x="59.8" y="69" width="9.0" height="15.0" fill="rgb(217,71,53)" rx="2" ry="2" />
<text  x="62.83" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (38 samples, 0.02%)</title><rect x="233.2" y="69" width="0.2" height="15.0" fill="rgb(241,224,0)" rx="2" ry="2" />
<text  x="236.21" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::base (199 samples, 0.08%)</title><rect x="519.6" y="85" width="1.0" height="15.0" fill="rgb(225,50,11)" rx="2" ry="2" />
<text  x="522.65" y="95.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (955 samples, 0.39%)</title><rect x="142.2" y="69" width="4.6" height="15.0" fill="rgb(219,164,39)" rx="2" ry="2" />
<text  x="145.22" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (9,938 samples, 4.08%)</title><rect x="221.6" y="133" width="48.1" height="15.0" fill="rgb(234,217,5)" rx="2" ry="2" />
<text  x="224.55" y="143.5" >std:..</text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (4,049 samples, 1.66%)</title><rect x="127.9" y="101" width="19.6" height="15.0" fill="rgb(217,126,54)" rx="2" ry="2" />
<text  x="130.94" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (415 samples, 0.17%)</title><rect x="12.7" y="229" width="2.0" height="15.0" fill="rgb(218,181,36)" rx="2" ry="2" />
<text  x="15.73" y="239.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (164 samples, 0.07%)</title><rect x="254.3" y="101" width="0.8" height="15.0" fill="rgb(246,11,37)" rx="2" ry="2" />
<text  x="257.32" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;StreetSegmentInfo, std::allocator&lt;StreetSegmentInfo&gt; &gt;::operator[] (253 samples, 0.10%)</title><rect x="484.9" y="117" width="1.2" height="15.0" fill="rgb(223,182,2)" rx="2" ry="2" />
<text  x="487.86" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;Feature, std::allocator&lt;Feature&gt; &gt; &gt;::load_object_data (2,061 samples, 0.85%)</title><rect x="17.4" y="213" width="10.0" height="15.0" fill="rgb(215,23,16)" rx="2" ry="2" />
<text  x="20.41" y="223.5" ></text>
</g>
<g >
<title>[unknown] (50 samples, 0.02%)</title><rect x="13.2" y="133" width="0.2" height="15.0" fill="rgb(225,35,14)" rx="2" ry="2" />
<text  x="16.15" y="143.5" ></text>
</g>
<g >
<title>loadMap (1,334 samples, 0.55%)</title><rect x="10.9" y="277" width="6.5" height="15.0" fill="rgb(240,181,15)" rx="2" ry="2" />
<text  x="13.91" y="287.5" ></text>
</g>
<g >
<title>loadGraph (56,249 samples, 23.07%)</title><rect x="28.2" y="149" width="272.2" height="15.0" fill="rgb(252,227,43)" rx="2" ry="2" />
<text  x="31.16" y="159.5" >loadGraph</text>
</g>
<g >
<title>_dl_relocate_object (44 samples, 0.02%)</title><rect x="10.7" y="213" width="0.2" height="15.0" fill="rgb(217,143,21)" rx="2" ry="2" />
<text  x="13.66" y="223.5" ></text>
</g>
<g >
<title>std::forward&lt;Node const&amp;&gt; (97 samples, 0.04%)</title><rect x="173.9" y="101" width="0.4" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="176.88" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,076 samples, 0.85%)</title><rect x="17.4" y="261" width="10.0" height="15.0" fill="rgb(231,227,42)" rx="2" ry="2" />
<text  x="20.37" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (85 samples, 0.03%)</title><rect x="10.0" y="181" width="0.5" height="15.0" fill="rgb(231,36,32)" rx="2" ry="2" />
<text  x="13.04" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (48 samples, 0.02%)</title><rect x="18.8" y="133" width="0.2" height="15.0" fill="rgb(253,77,27)" rx="2" ry="2" />
<text  x="21.77" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;waveElement&gt; &gt;::construct&lt;waveElement, waveElement const&amp;&gt; (2,006 samples, 0.82%)</title><rect x="1076.8" y="101" width="9.7" height="15.0" fill="rgb(251,155,22)" rx="2" ry="2" />
<text  x="1079.79" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (26 samples, 0.01%)</title><rect x="26.8" y="165" width="0.1" height="15.0" fill="rgb(230,24,41)" rx="2" ry="2" />
<text  x="29.78" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (7,921 samples, 3.25%)</title><rect x="183.2" y="117" width="38.4" height="15.0" fill="rgb(205,36,11)" rx="2" ry="2" />
<text  x="186.21" y="127.5" >std..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (227 samples, 0.09%)</title><rect x="169.4" y="85" width="1.1" height="15.0" fill="rgb(229,179,31)" rx="2" ry="2" />
<text  x="172.44" y="95.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (353 samples, 0.14%)</title><rect x="13.0" y="197" width="1.7" height="15.0" fill="rgb(217,128,32)" rx="2" ry="2" />
<text  x="16.03" y="207.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (1,072 samples, 0.44%)</title><rect x="74.8" y="85" width="5.1" height="15.0" fill="rgb(225,69,36)" rx="2" ry="2" />
<text  x="77.75" y="95.5" ></text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (445 samples, 0.18%)</title><rect x="1034.6" y="85" width="2.2" height="15.0" fill="rgb(223,115,24)" rx="2" ry="2" />
<text  x="1037.61" y="95.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (458 samples, 0.19%)</title><rect x="201.7" y="101" width="2.2" height="15.0" fill="rgb(213,149,0)" rx="2" ry="2" />
<text  x="204.68" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_realloc_insert&lt;double const&amp;&gt; (21 samples, 0.01%)</title><rect x="16.3" y="261" width="0.1" height="15.0" fill="rgb(227,107,45)" rx="2" ry="2" />
<text  x="19.31" y="271.5" ></text>
</g>
<g >
<title>Feature::Feature (23 samples, 0.01%)</title><rect x="27.3" y="181" width="0.1" height="15.0" fill="rgb(206,166,44)" rx="2" ry="2" />
<text  x="30.28" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (37 samples, 0.02%)</title><rect x="45.7" y="69" width="0.2" height="15.0" fill="rgb(227,8,8)" rx="2" ry="2" />
<text  x="48.72" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (748 samples, 0.31%)</title><rect x="1125.8" y="85" width="3.6" height="15.0" fill="rgb(227,30,16)" rx="2" ry="2" />
<text  x="1128.80" y="95.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (182 samples, 0.07%)</title><rect x="21.8" y="101" width="0.9" height="15.0" fill="rgb(246,178,11)" rx="2" ry="2" />
<text  x="24.79" y="111.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (381 samples, 0.16%)</title><rect x="248.5" y="117" width="1.8" height="15.0" fill="rgb(217,161,21)" rx="2" ry="2" />
<text  x="251.47" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int, double&gt; &gt; (34 samples, 0.01%)</title><rect x="14.7" y="245" width="0.2" height="15.0" fill="rgb(244,155,50)" rx="2" ry="2" />
<text  x="17.74" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement const*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (248 samples, 0.10%)</title><rect x="1168.2" y="101" width="1.2" height="15.0" fill="rgb(224,56,35)" rx="2" ry="2" />
<text  x="1171.18" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (211 samples, 0.09%)</title><rect x="126.9" y="101" width="1.0" height="15.0" fill="rgb(214,14,8)" rx="2" ry="2" />
<text  x="129.92" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement const*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::base (474 samples, 0.19%)</title><rect x="1153.0" y="101" width="2.2" height="15.0" fill="rgb(221,137,18)" rx="2" ry="2" />
<text  x="1155.95" y="111.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Node&gt; (3,568 samples, 1.46%)</title><rect x="1171.8" y="117" width="17.3" height="15.0" fill="rgb(213,188,25)" rx="2" ry="2" />
<text  x="1174.82" y="127.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (204 samples, 0.08%)</title><rect x="247.5" y="101" width="1.0" height="15.0" fill="rgb(216,49,21)" rx="2" ry="2" />
<text  x="250.48" y="111.5" ></text>
</g>
<g >
<title>getIntersectionStreetSegment (117 samples, 0.05%)</title><rect x="11.7" y="261" width="0.6" height="15.0" fill="rgb(247,52,30)" rx="2" ry="2" />
<text  x="14.70" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_insert_multi_node (62 samples, 0.03%)</title><rect x="14.9" y="261" width="0.3" height="15.0" fill="rgb(239,188,9)" rx="2" ry="2" />
<text  x="17.91" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Node*, Node&gt; (231 samples, 0.09%)</title><rect x="1170.7" y="133" width="1.1" height="15.0" fill="rgb(233,147,33)" rx="2" ry="2" />
<text  x="1173.70" y="143.5" ></text>
</g>
<g >
<title>Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper::RunImpl (240,055 samples, 98.47%)</title><rect x="27.4" y="181" width="1162.0" height="15.0" fill="rgb(242,203,0)" rx="2" ry="2" />
<text  x="30.42" y="191.5" >Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper::RunImpl</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (236 samples, 0.10%)</title><rect x="1040.2" y="101" width="1.2" height="15.0" fill="rgb(207,211,38)" rx="2" ry="2" />
<text  x="1043.21" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;waveElement&gt;::construct&lt;waveElement, waveElement const&amp;&gt; (537 samples, 0.22%)</title><rect x="1074.2" y="101" width="2.6" height="15.0" fill="rgb(253,97,40)" rx="2" ry="2" />
<text  x="1077.19" y="111.5" ></text>
</g>
<g >
<title>loadMap (85 samples, 0.03%)</title><rect x="10.0" y="245" width="0.5" height="15.0" fill="rgb(252,38,16)" rx="2" ry="2" />
<text  x="13.04" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (2,076 samples, 0.85%)</title><rect x="17.4" y="245" width="10.0" height="15.0" fill="rgb(208,96,37)" rx="2" ry="2" />
<text  x="20.37" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (3,302 samples, 1.35%)</title><rect x="184.7" y="85" width="16.0" height="15.0" fill="rgb(250,114,50)" rx="2" ry="2" />
<text  x="187.74" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; (997 samples, 0.41%)</title><rect x="515.8" y="101" width="4.8" height="15.0" fill="rgb(252,178,47)" rx="2" ry="2" />
<text  x="518.79" y="111.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (415 samples, 0.17%)</title><rect x="12.7" y="261" width="2.0" height="15.0" fill="rgb(226,133,18)" rx="2" ry="2" />
<text  x="15.73" y="271.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (827 samples, 0.34%)</title><rect x="250.3" y="101" width="4.0" height="15.0" fill="rgb(239,118,2)" rx="2" ry="2" />
<text  x="253.31" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (197 samples, 0.08%)</title><rect x="200.7" y="85" width="1.0" height="15.0" fill="rgb(246,115,28)" rx="2" ry="2" />
<text  x="203.72" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_realloc_insert&lt;Node const&amp;&gt; (34 samples, 0.01%)</title><rect x="171.6" y="133" width="0.1" height="15.0" fill="rgb(228,107,2)" rx="2" ry="2" />
<text  x="174.58" y="143.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (130 samples, 0.05%)</title><rect x="156.4" y="85" width="0.6" height="15.0" fill="rgb(211,7,36)" rx="2" ry="2" />
<text  x="159.38" y="95.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (129 samples, 0.05%)</title><rect x="24.8" y="85" width="0.6" height="15.0" fill="rgb(247,195,4)" rx="2" ry="2" />
<text  x="27.79" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (59 samples, 0.02%)</title><rect x="13.6" y="117" width="0.3" height="15.0" fill="rgb(231,9,53)" rx="2" ry="2" />
<text  x="16.61" y="127.5" ></text>
</g>
<g >
<title>M3_Public_Perf_ (243,780 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(219,48,26)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >M3_Public_Perf_</text>
</g>
<g >
<title>do_lookup_x (30 samples, 0.01%)</title><rect x="10.7" y="181" width="0.2" height="15.0" fill="rgb(217,47,36)" rx="2" ry="2" />
<text  x="13.72" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;waveElement const*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt; (1,492 samples, 0.61%)</title><rect x="1148.0" y="117" width="7.2" height="15.0" fill="rgb(211,95,54)" rx="2" ry="2" />
<text  x="1151.02" y="127.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;Node*&gt;, Node*&gt; (25 samples, 0.01%)</title><rect x="171.6" y="117" width="0.1" height="15.0" fill="rgb(216,47,2)" rx="2" ry="2" />
<text  x="174.59" y="127.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (84 samples, 0.03%)</title><rect x="1189.4" y="277" width="0.5" height="15.0" fill="rgb(207,87,24)" rx="2" ry="2" />
<text  x="1192.45" y="287.5" ></text>
</g>
<g >
<title>path (179,792 samples, 73.75%)</title><rect x="300.4" y="149" width="870.3" height="15.0" fill="rgb(227,25,0)" rx="2" ry="2" />
<text  x="303.43" y="159.5" >path</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (1,703 samples, 0.70%)</title><rect x="208.3" y="101" width="8.2" height="15.0" fill="rgb(219,1,15)" rx="2" ry="2" />
<text  x="211.26" y="111.5" ></text>
</g>
<g >
<title>_int_malloc (116 samples, 0.05%)</title><rect x="26.0" y="101" width="0.6" height="15.0" fill="rgb(244,46,39)" rx="2" ry="2" />
<text  x="29.02" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (85 samples, 0.03%)</title><rect x="10.0" y="213" width="0.5" height="15.0" fill="rgb(227,76,6)" rx="2" ry="2" />
<text  x="13.04" y="223.5" ></text>
</g>
<g >
<title>operator new (1,782 samples, 0.73%)</title><rect x="233.4" y="85" width="8.6" height="15.0" fill="rgb(234,9,33)" rx="2" ry="2" />
<text  x="236.40" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::push_back (3,340 samples, 1.37%)</title><rect x="1070.3" y="117" width="16.2" height="15.0" fill="rgb(243,119,44)" rx="2" ry="2" />
<text  x="1073.33" y="127.5" ></text>
</g>
<g >
<title>std::push_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, std::less&lt;waveElement&gt; &gt; (10,188 samples, 4.18%)</title><rect x="1089.0" y="133" width="49.3" height="15.0" fill="rgb(253,15,5)" rx="2" ry="2" />
<text  x="1092.02" y="143.5" >std:..</text>
</g>
<g >
<title>std::pow&lt;double, int&gt; (524 samples, 0.21%)</title><rect x="433.9" y="117" width="2.5" height="15.0" fill="rgb(231,88,5)" rx="2" ry="2" />
<text  x="436.90" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::_M_get_insert_equal_pos (21 samples, 0.01%)</title><rect x="15.4" y="245" width="0.1" height="15.0" fill="rgb(214,121,21)" rx="2" ry="2" />
<text  x="18.42" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::base (266 samples, 0.11%)</title><rect x="1098.4" y="101" width="1.3" height="15.0" fill="rgb(239,105,46)" rx="2" ry="2" />
<text  x="1101.43" y="111.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (25 samples, 0.01%)</title><rect x="19.9" y="117" width="0.1" height="15.0" fill="rgb(229,127,29)" rx="2" ry="2" />
<text  x="22.87" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize@plt (26 samples, 0.01%)</title><rect x="17.9" y="149" width="0.1" height="15.0" fill="rgb(232,177,1)" rx="2" ry="2" />
<text  x="20.87" y="159.5" ></text>
</g>
<g >
<title>operator new (4,731 samples, 1.94%)</title><rect x="45.9" y="85" width="22.9" height="15.0" fill="rgb(241,37,18)" rx="2" ry="2" />
<text  x="48.90" y="95.5" >o..</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (781 samples, 0.32%)</title><rect x="217.4" y="101" width="3.8" height="15.0" fill="rgb(236,193,27)" rx="2" ry="2" />
<text  x="220.44" y="111.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (263 samples, 0.11%)</title><rect x="263.6" y="101" width="1.3" height="15.0" fill="rgb(231,189,33)" rx="2" ry="2" />
<text  x="266.61" y="111.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (31 samples, 0.01%)</title><rect x="13.7" y="85" width="0.2" height="15.0" fill="rgb(228,112,38)" rx="2" ry="2" />
<text  x="16.74" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Node&gt;::construct&lt;Node, Node const&amp;&gt; (155 samples, 0.06%)</title><rect x="173.6" y="117" width="0.7" height="15.0" fill="rgb(233,149,47)" rx="2" ry="2" />
<text  x="176.60" y="127.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (53 samples, 0.02%)</title><rect x="26.9" y="165" width="0.3" height="15.0" fill="rgb(252,57,27)" rx="2" ry="2" />
<text  x="29.91" y="175.5" ></text>
</g>
<g >
<title>operator new (58 samples, 0.02%)</title><rect x="173.6" y="101" width="0.3" height="15.0" fill="rgb(228,78,36)" rx="2" ry="2" />
<text  x="176.60" y="111.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (194 samples, 0.08%)</title><rect x="216.5" y="85" width="0.9" height="15.0" fill="rgb(250,99,39)" rx="2" ry="2" />
<text  x="219.50" y="95.5" ></text>
</g>
<g >
<title>memmove@plt (381 samples, 0.16%)</title><rect x="248.5" y="101" width="1.8" height="15.0" fill="rgb(233,33,19)" rx="2" ry="2" />
<text  x="251.47" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::_M_realloc_insert&lt;waveElement const&amp;&gt; (83 samples, 0.03%)</title><rect x="1061.7" y="117" width="0.4" height="15.0" fill="rgb(210,205,49)" rx="2" ry="2" />
<text  x="1064.67" y="127.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (30 samples, 0.01%)</title><rect x="18.0" y="149" width="0.1" height="15.0" fill="rgb(224,138,26)" rx="2" ry="2" />
<text  x="21.00" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (82 samples, 0.03%)</title><rect x="18.4" y="133" width="0.4" height="15.0" fill="rgb(205,75,31)" rx="2" ry="2" />
<text  x="21.37" y="143.5" ></text>
</g>
<g >
<title>malloc@plt (1,844 samples, 0.76%)</title><rect x="187.7" y="53" width="8.9" height="15.0" fill="rgb(227,183,23)" rx="2" ry="2" />
<text  x="190.69" y="63.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (544 samples, 0.22%)</title><rect x="22.8" y="117" width="2.6" height="15.0" fill="rgb(231,0,7)" rx="2" ry="2" />
<text  x="25.78" y="127.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (147 samples, 0.06%)</title><rect x="207.5" y="85" width="0.8" height="15.0" fill="rgb(216,195,27)" rx="2" ry="2" />
<text  x="210.55" y="95.5" ></text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (2,040 samples, 0.84%)</title><rect x="1021.3" y="69" width="9.9" height="15.0" fill="rgb(211,14,14)" rx="2" ry="2" />
<text  x="1024.33" y="79.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (42 samples, 0.02%)</title><rect x="1189.4" y="229" width="0.3" height="15.0" fill="rgb(205,137,31)" rx="2" ry="2" />
<text  x="1192.45" y="239.5" ></text>
</g>
<g >
<title>std::move&lt;waveElement&amp;&gt; (155 samples, 0.06%)</title><rect x="1137.6" y="117" width="0.7" height="15.0" fill="rgb(212,216,20)" rx="2" ry="2" />
<text  x="1140.56" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_propagate_on_copy_assign (50 samples, 0.02%)</title><rect x="42.5" y="101" width="0.3" height="15.0" fill="rgb(208,105,33)" rx="2" ry="2" />
<text  x="45.52" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator-- (441 samples, 0.18%)</title><rect x="513.7" y="101" width="2.1" height="15.0" fill="rgb(207,87,32)" rx="2" ry="2" />
<text  x="516.65" y="111.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load (61 samples, 0.03%)</title><rect x="17.8" y="165" width="0.3" height="15.0" fill="rgb(210,203,52)" rx="2" ry="2" />
<text  x="20.85" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (59 samples, 0.02%)</title><rect x="10.1" y="149" width="0.2" height="15.0" fill="rgb(240,228,24)" rx="2" ry="2" />
<text  x="13.05" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::_M_emplace_equal&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; (27 samples, 0.01%)</title><rect x="15.4" y="261" width="0.1" height="15.0" fill="rgb(242,151,49)" rx="2" ry="2" />
<text  x="18.40" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (51 samples, 0.02%)</title><rect x="42.8" y="101" width="0.2" height="15.0" fill="rgb(222,159,30)" rx="2" ry="2" />
<text  x="45.76" y="111.5" ></text>
</g>
<g >
<title>__dynamic_cast (72 samples, 0.03%)</title><rect x="23.1" y="101" width="0.3" height="15.0" fill="rgb(223,195,36)" rx="2" ry="2" />
<text  x="26.05" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (181 samples, 0.07%)</title><rect x="183.2" y="101" width="0.9" height="15.0" fill="rgb(223,176,49)" rx="2" ry="2" />
<text  x="186.21" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (145 samples, 0.06%)</title><rect x="146.8" y="85" width="0.7" height="15.0" fill="rgb(250,41,17)" rx="2" ry="2" />
<text  x="149.84" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;Feature, std::allocator&lt;Feature&gt; &gt;::_M_default_append (23 samples, 0.01%)</title><rect x="27.3" y="197" width="0.1" height="15.0" fill="rgb(230,120,9)" rx="2" ry="2" />
<text  x="30.28" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_emplace&lt;std::pair&lt;int, double&gt; &gt; (37 samples, 0.02%)</title><rect x="14.7" y="261" width="0.2" height="15.0" fill="rgb(243,197,41)" rx="2" ry="2" />
<text  x="17.73" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;*&gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;*&gt; (29 samples, 0.01%)</title><rect x="17.1" y="245" width="0.2" height="15.0" fill="rgb(249,118,1)" rx="2" ry="2" />
<text  x="20.13" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (353 samples, 0.14%)</title><rect x="267.4" y="101" width="1.7" height="15.0" fill="rgb(206,44,43)" rx="2" ry="2" />
<text  x="270.44" y="111.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (218 samples, 0.09%)</title><rect x="165.0" y="85" width="1.0" height="15.0" fill="rgb(240,225,54)" rx="2" ry="2" />
<text  x="167.95" y="95.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;, std::less&lt;waveElement&gt; &gt;::push (8,628 samples, 3.54%)</title><rect x="1044.7" y="133" width="41.8" height="15.0" fill="rgb(237,219,40)" rx="2" ry="2" />
<text  x="1047.74" y="143.5" >std..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (207 samples, 0.08%)</title><rect x="220.2" y="85" width="1.0" height="15.0" fill="rgb(214,2,11)" rx="2" ry="2" />
<text  x="223.22" y="95.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Node&gt; &gt;::construct&lt;Node, Node const&amp;&gt; (1,831 samples, 0.75%)</title><rect x="174.3" y="117" width="8.9" height="15.0" fill="rgb(227,42,31)" rx="2" ry="2" />
<text  x="177.35" y="127.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (28 samples, 0.01%)</title><rect x="1189.4" y="213" width="0.2" height="15.0" fill="rgb(219,90,27)" rx="2" ry="2" />
<text  x="1192.45" y="223.5" ></text>
</g>
<g >
<title>[unknown] (167 samples, 0.07%)</title><rect x="18.2" y="149" width="0.8" height="15.0" fill="rgb(253,195,33)" rx="2" ry="2" />
<text  x="21.20" y="159.5" ></text>
</g>
<g >
<title>[unknown] (575 samples, 0.24%)</title><rect x="20.0" y="117" width="2.8" height="15.0" fill="rgb(207,144,53)" rx="2" ry="2" />
<text  x="23.00" y="127.5" ></text>
</g>
<g >
<title>UnitTest::RunAllTests (240,055 samples, 98.47%)</title><rect x="27.4" y="261" width="1162.0" height="15.0" fill="rgb(229,126,48)" rx="2" ry="2" />
<text  x="30.42" y="271.5" >UnitTest::RunAllTests</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,008 samples, 0.82%)</title><rect x="17.4" y="197" width="9.8" height="15.0" fill="rgb(233,229,44)" rx="2" ry="2" />
<text  x="20.44" y="207.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (263 samples, 0.11%)</title><rect x="263.6" y="117" width="1.3" height="15.0" fill="rgb(212,77,29)" rx="2" ry="2" />
<text  x="266.61" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::select_on_container_copy_construction (92 samples, 0.04%)</title><rect x="127.5" y="85" width="0.4" height="15.0" fill="rgb(233,192,28)" rx="2" ry="2" />
<text  x="130.50" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (415 samples, 0.17%)</title><rect x="12.7" y="245" width="2.0" height="15.0" fill="rgb(211,201,23)" rx="2" ry="2" />
<text  x="15.73" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (37 samples, 0.02%)</title><rect x="19.3" y="117" width="0.2" height="15.0" fill="rgb(213,28,47)" rx="2" ry="2" />
<text  x="22.31" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (45 samples, 0.02%)</title><rect x="16.5" y="261" width="0.2" height="15.0" fill="rgb(247,218,14)" rx="2" ry="2" />
<text  x="19.48" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator= (12,759 samples, 5.23%)</title><rect x="35.2" y="117" width="61.7" height="15.0" fill="rgb(218,72,40)" rx="2" ry="2" />
<text  x="38.15" y="127.5" >std::v..</text>
</g>
<g >
<title>std::vector&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt;, std::allocator&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt; &gt; &gt;::_M_realloc_insert&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt; &gt; (96 samples, 0.04%)</title><rect x="14.2" y="181" width="0.4" height="15.0" fill="rgb(207,136,39)" rx="2" ry="2" />
<text  x="17.16" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,119 samples, 0.46%)</title><rect x="20.0" y="133" width="5.4" height="15.0" fill="rgb(234,22,14)" rx="2" ry="2" />
<text  x="23.00" y="143.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (991 samples, 0.41%)</title><rect x="250.3" y="117" width="4.8" height="15.0" fill="rgb(231,184,53)" rx="2" ry="2" />
<text  x="253.31" y="127.5" ></text>
</g>
<g >
<title>__libc_start_main (85 samples, 0.03%)</title><rect x="10.0" y="277" width="0.5" height="15.0" fill="rgb(238,178,50)" rx="2" ry="2" />
<text  x="13.04" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (936 samples, 0.38%)</title><rect x="166.0" y="101" width="4.5" height="15.0" fill="rgb(241,182,28)" rx="2" ry="2" />
<text  x="169.01" y="111.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (253 samples, 0.10%)</title><rect x="87.8" y="69" width="1.2" height="15.0" fill="rgb(226,226,26)" rx="2" ry="2" />
<text  x="90.81" y="79.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (85 samples, 0.03%)</title><rect x="10.0" y="229" width="0.5" height="15.0" fill="rgb(208,82,17)" rx="2" ry="2" />
<text  x="13.04" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (328 samples, 0.13%)</title><rect x="1091.7" y="101" width="1.6" height="15.0" fill="rgb(248,108,47)" rx="2" ry="2" />
<text  x="1094.75" y="111.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (740 samples, 0.30%)</title><rect x="152.8" y="85" width="3.6" height="15.0" fill="rgb(223,13,36)" rx="2" ry="2" />
<text  x="155.80" y="95.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (1,995 samples, 0.82%)</title><rect x="948.7" y="53" width="9.7" height="15.0" fill="rgb(206,58,22)" rx="2" ry="2" />
<text  x="951.72" y="63.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;, std::less&lt;waveElement&gt; &gt;::pop (111,958 samples, 45.93%)</title><rect x="502.8" y="133" width="541.9" height="15.0" fill="rgb(231,211,21)" rx="2" ry="2" />
<text  x="505.81" y="143.5" >std::priority_queue&lt;waveElement, std::vector&lt;waveElement, std::allocator&lt;w..</text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;waveElement&gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, waveElement&gt; (2,213 samples, 0.91%)</title><rect x="1008.8" y="53" width="10.7" height="15.0" fill="rgb(206,187,20)" rx="2" ry="2" />
<text  x="1011.83" y="63.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (253 samples, 0.10%)</title><rect x="87.8" y="85" width="1.2" height="15.0" fill="rgb(210,180,46)" rx="2" ry="2" />
<text  x="90.81" y="95.5" ></text>
</g>
<g >
<title>_int_malloc (2,879 samples, 1.18%)</title><rect x="45.9" y="53" width="13.9" height="15.0" fill="rgb(241,143,20)" rx="2" ry="2" />
<text  x="48.90" y="63.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (127 samples, 0.05%)</title><rect x="253.7" y="85" width="0.6" height="15.0" fill="rgb(222,128,53)" rx="2" ry="2" />
<text  x="256.70" y="95.5" ></text>
</g>
<g >
<title>Node::Node (13,704 samples, 5.62%)</title><rect x="32.0" y="133" width="66.3" height="15.0" fill="rgb(241,151,11)" rx="2" ry="2" />
<text  x="35.00" y="143.5" >Node::N..</text>
</g>
<g >
<title>std::__addressof&lt;Node&gt; (28 samples, 0.01%)</title><rect x="1189.1" y="117" width="0.1" height="15.0" fill="rgb(249,25,52)" rx="2" ry="2" />
<text  x="1192.09" y="127.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (194 samples, 0.08%)</title><rect x="216.5" y="101" width="0.9" height="15.0" fill="rgb(211,87,49)" rx="2" ry="2" />
<text  x="219.50" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,773 samples, 0.73%)</title><rect x="18.2" y="165" width="8.6" height="15.0" fill="rgb(238,222,27)" rx="2" ry="2" />
<text  x="21.20" y="175.5" ></text>
</g>
<g >
<title>std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt; (24 samples, 0.01%)</title><rect x="15.6" y="245" width="0.2" height="15.0" fill="rgb(252,152,45)" rx="2" ry="2" />
<text  x="18.64" y="255.5" ></text>
</g>
<g >
<title>malloc@plt (2,038 samples, 0.84%)</title><rect x="132.4" y="53" width="9.8" height="15.0" fill="rgb(236,189,31)" rx="2" ry="2" />
<text  x="135.35" y="63.5" ></text>
</g>
<g >
<title>_dl_start (50 samples, 0.02%)</title><rect x="10.6" y="261" width="0.3" height="15.0" fill="rgb(226,164,13)" rx="2" ry="2" />
<text  x="13.63" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (10,810 samples, 4.43%)</title><rect x="118.6" y="117" width="52.3" height="15.0" fill="rgb(232,31,1)" rx="2" ry="2" />
<text  x="121.60" y="127.5" >std::..</text>
</g>
<g >
<title>memmove@plt (458 samples, 0.19%)</title><rect x="201.7" y="85" width="2.2" height="15.0" fill="rgb(234,191,51)" rx="2" ry="2" />
<text  x="204.68" y="95.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;, long, waveElement, __gnu_cxx::__ops::_Iter_comp_iter&lt;std::less&lt;waveElement&gt; &gt; &gt; (102,314 samples, 41.97%)</title><rect x="539.4" y="85" width="495.2" height="15.0" fill="rgb(223,208,17)" rx="2" ry="2" />
<text  x="542.37" y="95.5" >std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;waveElement*, std::..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement const*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (467 samples, 0.19%)</title><rect x="1162.6" y="101" width="2.2" height="15.0" fill="rgb(209,80,1)" rx="2" ry="2" />
<text  x="1165.58" y="111.5" ></text>
</g>
<g >
<title>std::__sort&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt; (45 samples, 0.02%)</title><rect x="15.6" y="261" width="0.3" height="15.0" fill="rgb(243,211,47)" rx="2" ry="2" />
<text  x="18.63" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (557 samples, 0.23%)</title><rect x="94.2" y="101" width="2.7" height="15.0" fill="rgb(226,39,0)" rx="2" ry="2" />
<text  x="97.21" y="111.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (1,086 samples, 0.45%)</title><rect x="147.5" y="101" width="5.3" height="15.0" fill="rgb(239,117,44)" rx="2" ry="2" />
<text  x="150.54" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::front (939 samples, 0.39%)</title><rect x="1164.8" y="133" width="4.6" height="15.0" fill="rgb(215,64,40)" rx="2" ry="2" />
<text  x="1167.84" y="143.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (23 samples, 0.01%)</title><rect x="17.5" y="165" width="0.1" height="15.0" fill="rgb(246,109,40)" rx="2" ry="2" />
<text  x="20.51" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::begin (972 samples, 0.40%)</title><rect x="1062.1" y="117" width="4.7" height="15.0" fill="rgb(222,68,6)" rx="2" ry="2" />
<text  x="1065.07" y="127.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (37 samples, 0.02%)</title><rect x="24.6" y="69" width="0.2" height="15.0" fill="rgb(236,174,6)" rx="2" ry="2" />
<text  x="27.61" y="79.5" ></text>
</g>
<g >
<title>operator new (43 samples, 0.02%)</title><rect x="14.4" y="165" width="0.2" height="15.0" fill="rgb(223,108,0)" rx="2" ry="2" />
<text  x="17.40" y="175.5" ></text>
</g>
<g >
<title>strcmp@plt (182 samples, 0.07%)</title><rect x="21.8" y="85" width="0.9" height="15.0" fill="rgb(227,15,40)" rx="2" ry="2" />
<text  x="24.79" y="95.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Node*&gt; (3,596 samples, 1.48%)</title><rect x="1171.8" y="133" width="17.4" height="15.0" fill="rgb(250,49,19)" rx="2" ry="2" />
<text  x="1174.82" y="143.5" ></text>
</g>
<g >
<title>std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt; (25 samples, 0.01%)</title><rect x="1189.9" y="261" width="0.1" height="15.0" fill="rgb(219,16,54)" rx="2" ry="2" />
<text  x="1192.85" y="271.5" ></text>
</g>
<g >
<title>getStreetSegmentCurvePoint (42 samples, 0.02%)</title><rect x="11.4" y="245" width="0.2" height="15.0" fill="rgb(228,40,39)" rx="2" ry="2" />
<text  x="14.40" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (188 samples, 0.08%)</title><rect x="1043.8" y="101" width="0.9" height="15.0" fill="rgb(251,138,25)" rx="2" ry="2" />
<text  x="1046.83" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (29 samples, 0.01%)</title><rect x="132.2" y="53" width="0.2" height="15.0" fill="rgb(213,43,31)" rx="2" ry="2" />
<text  x="135.21" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::end (736 samples, 0.30%)</title><rect x="1066.8" y="117" width="3.5" height="15.0" fill="rgb(251,38,31)" rx="2" ry="2" />
<text  x="1069.77" y="127.5" ></text>
</g>
<g >
<title>std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt; (25 samples, 0.01%)</title><rect x="1189.9" y="245" width="0.1" height="15.0" fill="rgb(236,164,26)" rx="2" ry="2" />
<text  x="1192.85" y="255.5" ></text>
</g>
<g >
<title>strcmp@plt (22 samples, 0.01%)</title><rect x="17.6" y="149" width="0.1" height="15.0" fill="rgb(253,29,35)" rx="2" ry="2" />
<text  x="20.62" y="159.5" ></text>
</g>
<g >
<title>_start (53 samples, 0.02%)</title><rect x="10.6" y="277" width="0.3" height="15.0" fill="rgb(209,34,6)" rx="2" ry="2" />
<text  x="13.61" y="287.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (171 samples, 0.07%)</title><rect x="79.1" y="69" width="0.8" height="15.0" fill="rgb(239,111,37)" rx="2" ry="2" />
<text  x="82.11" y="79.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (704 samples, 0.29%)</title><rect x="1031.2" y="69" width="3.4" height="15.0" fill="rgb(243,213,7)" rx="2" ry="2" />
<text  x="1034.20" y="79.5" ></text>
</g>
<g >
<title>std::forward&lt;waveElement const&amp;&gt; (379 samples, 0.16%)</title><rect x="1075.0" y="85" width="1.8" height="15.0" fill="rgb(210,219,23)" rx="2" ry="2" />
<text  x="1077.96" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, NodeInfo&gt;::load_object_data (32 samples, 0.01%)</title><rect x="10.2" y="133" width="0.1" height="15.0" fill="rgb(217,111,12)" rx="2" ry="2" />
<text  x="13.18" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (313 samples, 0.13%)</title><rect x="1065.3" y="101" width="1.5" height="15.0" fill="rgb(244,92,43)" rx="2" ry="2" />
<text  x="1068.26" y="111.5" ></text>
</g>
<g >
<title>malloc (33 samples, 0.01%)</title><rect x="14.4" y="149" width="0.2" height="15.0" fill="rgb(214,47,22)" rx="2" ry="2" />
<text  x="17.40" y="159.5" ></text>
</g>
<g >
<title>UnitTest::ExecuteTest&lt;UnitTest::Test&gt; (240,055 samples, 98.47%)</title><rect x="27.4" y="229" width="1162.0" height="15.0" fill="rgb(254,149,34)" rx="2" ry="2" />
<text  x="30.42" y="239.5" >UnitTest::ExecuteTest&lt;UnitTest::Test&gt;</text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (4,103 samples, 1.68%)</title><rect x="228.6" y="117" width="19.9" height="15.0" fill="rgb(232,13,15)" rx="2" ry="2" />
<text  x="231.61" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::capacity (68 samples, 0.03%)</title><rect x="221.2" y="101" width="0.4" height="15.0" fill="rgb(206,152,11)" rx="2" ry="2" />
<text  x="224.22" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (337 samples, 0.14%)</title><rect x="227.0" y="117" width="1.6" height="15.0" fill="rgb(223,98,6)" rx="2" ry="2" />
<text  x="229.98" y="127.5" ></text>
</g>
<g >
<title>[unknown] (58 samples, 0.02%)</title><rect x="17.4" y="181" width="0.3" height="15.0" fill="rgb(213,201,9)" rx="2" ry="2" />
<text  x="20.44" y="191.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (879 samples, 0.36%)</title><rect x="68.8" y="85" width="4.3" height="15.0" fill="rgb(212,62,50)" rx="2" ry="2" />
<text  x="71.80" y="95.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (755 samples, 0.31%)</title><rect x="203.9" y="85" width="3.6" height="15.0" fill="rgb(222,106,22)" rx="2" ry="2" />
<text  x="206.89" y="95.5" ></text>
</g>
<g >
<title>memcpy@plt (56 samples, 0.02%)</title><rect x="24.3" y="69" width="0.3" height="15.0" fill="rgb(220,40,12)" rx="2" ry="2" />
<text  x="27.34" y="79.5" ></text>
</g>
<g >
<title>findEuclidianDistance (2,622 samples, 1.08%)</title><rect x="423.7" y="133" width="12.7" height="15.0" fill="rgb(212,183,53)" rx="2" ry="2" />
<text  x="426.74" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (60 samples, 0.02%)</title><rect x="1138.3" y="133" width="0.3" height="15.0" fill="rgb(223,97,18)" rx="2" ry="2" />
<text  x="1141.34" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;SegmentData, std::allocator&lt;SegmentData&gt; &gt;::operator[] (344 samples, 0.14%)</title><rect x="497.0" y="117" width="1.6" height="15.0" fill="rgb(248,196,47)" rx="2" ry="2" />
<text  x="499.95" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, Feature&gt;::load_object_data (1,950 samples, 0.80%)</title><rect x="17.7" y="181" width="9.5" height="15.0" fill="rgb(219,1,40)" rx="2" ry="2" />
<text  x="20.73" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (85 samples, 0.03%)</title><rect x="10.0" y="197" width="0.5" height="15.0" fill="rgb(221,6,18)" rx="2" ry="2" />
<text  x="13.04" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::__normal_iterator (1,387 samples, 0.57%)</title><rect x="1002.1" y="37" width="6.7" height="15.0" fill="rgb(246,91,24)" rx="2" ry="2" />
<text  x="1005.12" y="47.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::begin (804 samples, 0.33%)</title><rect x="1037.5" y="117" width="3.9" height="15.0" fill="rgb(239,10,14)" rx="2" ry="2" />
<text  x="1040.46" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (295 samples, 0.12%)</title><rect x="96.9" y="117" width="1.4" height="15.0" fill="rgb(210,9,33)" rx="2" ry="2" />
<text  x="99.91" y="127.5" ></text>
</g>
<g >
<title>malloc (116 samples, 0.05%)</title><rect x="26.0" y="117" width="0.6" height="15.0" fill="rgb(223,122,21)" rx="2" ry="2" />
<text  x="29.02" y="127.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (247 samples, 0.10%)</title><rect x="1134.2" y="85" width="1.2" height="15.0" fill="rgb(250,150,32)" rx="2" ry="2" />
<text  x="1137.16" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;waveElement*, std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt; &gt;::operator+ (3,503 samples, 1.44%)</title><rect x="1112.5" y="101" width="16.9" height="15.0" fill="rgb(233,3,9)" rx="2" ry="2" />
<text  x="1115.46" y="111.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;waveElement*&gt;::operator* (503 samples, 0.21%)</title><rect x="1017.1" y="37" width="2.4" height="15.0" fill="rgb(236,191,45)" rx="2" ry="2" />
<text  x="1020.11" y="47.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (902 samples, 0.37%)</title><rect x="203.9" y="101" width="4.4" height="15.0" fill="rgb(249,195,25)" rx="2" ry="2" />
<text  x="206.89" y="111.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement@plt (24 samples, 0.01%)</title><rect x="22.7" y="101" width="0.1" height="15.0" fill="rgb(207,16,49)" rx="2" ry="2" />
<text  x="25.67" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (415 samples, 0.17%)</title><rect x="12.7" y="213" width="2.0" height="15.0" fill="rgb(218,182,51)" rx="2" ry="2" />
<text  x="15.73" y="223.5" ></text>
</g>
<g >
<title>operator new (1,844 samples, 0.76%)</title><rect x="187.7" y="69" width="8.9" height="15.0" fill="rgb(230,3,48)" rx="2" ry="2" />
<text  x="190.69" y="79.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (171 samples, 0.07%)</title><rect x="13.2" y="149" width="0.8" height="15.0" fill="rgb(205,63,17)" rx="2" ry="2" />
<text  x="16.15" y="159.5" ></text>
</g>
<g >
<title>std::__sort&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt; (25 samples, 0.01%)</title><rect x="1189.9" y="277" width="0.1" height="15.0" fill="rgb(219,223,16)" rx="2" ry="2" />
<text  x="1192.85" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;waveElement*&gt;, waveElement*&gt; (57 samples, 0.02%)</title><rect x="1061.7" y="101" width="0.3" height="15.0" fill="rgb(238,202,43)" rx="2" ry="2" />
<text  x="1064.69" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;double, double&gt;, std::allocator&lt;std::pair&lt;double, double&gt; &gt; &gt;::operator[] (440 samples, 0.18%)</title><rect x="1145.9" y="133" width="2.1" height="15.0" fill="rgb(249,171,21)" rx="2" ry="2" />
<text  x="1148.89" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (23 samples, 0.01%)</title><rect x="27.2" y="197" width="0.1" height="15.0" fill="rgb(247,139,51)" rx="2" ry="2" />
<text  x="30.16" y="207.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (79 samples, 0.03%)</title><rect x="23.4" y="101" width="0.4" height="15.0" fill="rgb(245,10,38)" rx="2" ry="2" />
<text  x="26.40" y="111.5" ></text>
</g>
</g>
</svg>
