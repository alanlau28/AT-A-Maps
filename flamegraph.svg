<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>boost::archive::detail::basic_iarchive::load_object (84 samples, 0.05%)</title><rect x="24.3" y="133" width="0.6" height="15.0" fill="rgb(223,167,15)" rx="2" ry="2" />
<text  x="27.29" y="143.5" ></text>
</g>
<g >
<title>[unknown] (148 samples, 0.10%)</title><rect x="23.1" y="149" width="1.1" height="15.0" fill="rgb(245,204,13)" rx="2" ry="2" />
<text  x="26.06" y="159.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load (55 samples, 0.04%)</title><rect x="22.6" y="165" width="0.4" height="15.0" fill="rgb(223,131,38)" rx="2" ry="2" />
<text  x="25.56" y="175.5" ></text>
</g>
<g >
<title>strcmp@plt (24 samples, 0.02%)</title><rect x="22.2" y="149" width="0.2" height="15.0" fill="rgb(228,64,20)" rx="2" ry="2" />
<text  x="25.19" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;waveElement, std::allocator&lt;waveElement&gt; &gt;::_M_realloc_insert&lt;waveElement const&amp;&gt; (24 samples, 0.02%)</title><rect x="1189.0" y="133" width="0.1" height="15.0" fill="rgb(252,63,38)" rx="2" ry="2" />
<text  x="1191.95" y="143.5" ></text>
</g>
<g >
<title>[unknown] (60 samples, 0.04%)</title><rect x="21.9" y="181" width="0.5" height="15.0" fill="rgb(223,213,48)" rx="2" ry="2" />
<text  x="24.92" y="191.5" ></text>
</g>
<g >
<title>malloc_consolidate (20 samples, 0.01%)</title><rect x="1189.6" y="101" width="0.2" height="15.0" fill="rgb(248,95,0)" rx="2" ry="2" />
<text  x="1192.61" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (14 samples, 0.01%)</title><rect x="17.3" y="149" width="0.1" height="15.0" fill="rgb(246,157,7)" rx="2" ry="2" />
<text  x="20.31" y="159.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.01%)</title><rect x="1189.6" y="149" width="0.2" height="15.0" fill="rgb(243,176,45)" rx="2" ry="2" />
<text  x="1192.61" y="159.5" ></text>
</g>
<g >
<title>Suiteinter_inter_path_perf_very_hard_public::TestMapFixturefindPathBetweenIntersections_perf_very_hard::RunImpl (151,938 samples, 97.63%)</title><rect x="37.8" y="213" width="1152.0" height="15.0" fill="rgb(230,19,53)" rx="2" ry="2" />
<text  x="40.77" y="223.5" >Suiteinter_inter_path_perf_very_hard_public::TestMapFixturefindPathBetweenIntersections_perf_very_hard::RunImpl</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,189 samples, 0.76%)</title><rect x="25.7" y="133" width="9.0" height="15.0" fill="rgb(207,29,29)" rx="2" ry="2" />
<text  x="28.69" y="143.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (115 samples, 0.07%)</title><rect x="33.8" y="85" width="0.9" height="15.0" fill="rgb(214,170,23)" rx="2" ry="2" />
<text  x="36.84" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt; (20 samples, 0.01%)</title><rect x="1189.6" y="165" width="0.2" height="15.0" fill="rgb(239,130,5)" rx="2" ry="2" />
<text  x="1192.61" y="175.5" ></text>
</g>
<g >
<title>UnitTest::TestRunner::RunTest (151,938 samples, 97.63%)</title><rect x="37.8" y="245" width="1152.0" height="15.0" fill="rgb(205,139,49)" rx="2" ry="2" />
<text  x="40.77" y="255.5" >UnitTest::TestRunner::RunTest</text>
</g>
<g >
<title>findPathBetweenIntersections (151,536 samples, 97.37%)</title><rect x="40.7" y="165" width="1148.9" height="15.0" fill="rgb(205,63,21)" rx="2" ry="2" />
<text  x="43.67" y="175.5" >findPathBetweenIntersections</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (21 samples, 0.01%)</title><rect x="24.8" y="101" width="0.1" height="15.0" fill="rgb(217,23,10)" rx="2" ry="2" />
<text  x="27.77" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;::_M_realloc_insert&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; const&amp;&gt; (32 samples, 0.02%)</title><rect x="18.5" y="181" width="0.2" height="15.0" fill="rgb(234,38,13)" rx="2" ry="2" />
<text  x="21.50" y="191.5" ></text>
</g>
<g >
<title>loadGraph (24,999 samples, 16.06%)</title><rect x="51.7" y="149" width="189.6" height="15.0" fill="rgb(211,44,6)" rx="2" ry="2" />
<text  x="54.72" y="159.5" >loadGraph</text>
</g>
<g >
<title>[unknown] (632 samples, 0.41%)</title><rect x="25.7" y="117" width="4.8" height="15.0" fill="rgb(246,87,50)" rx="2" ry="2" />
<text  x="28.69" y="127.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (64 samples, 0.04%)</title><rect x="23.3" y="133" width="0.5" height="15.0" fill="rgb(254,111,51)" rx="2" ry="2" />
<text  x="26.28" y="143.5" ></text>
</g>
<g >
<title>operator new@plt (724 samples, 0.47%)</title><rect x="235.8" y="133" width="5.5" height="15.0" fill="rgb(218,94,5)" rx="2" ry="2" />
<text  x="238.76" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash@plt (16 samples, 0.01%)</title><rect x="20.9" y="229" width="0.1" height="15.0" fill="rgb(225,91,22)" rx="2" ry="2" />
<text  x="23.86" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (91 samples, 0.06%)</title><rect x="10.1" y="181" width="0.7" height="15.0" fill="rgb(250,135,11)" rx="2" ry="2" />
<text  x="13.09" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, Feature&gt;::load_object_data (1,984 samples, 1.27%)</title><rect x="22.4" y="181" width="15.0" height="15.0" fill="rgb(225,2,49)" rx="2" ry="2" />
<text  x="25.37" y="191.5" ></text>
</g>
<g >
<title>[unknown] (27 samples, 0.02%)</title><rect x="16.1" y="133" width="0.2" height="15.0" fill="rgb(230,24,42)" rx="2" ry="2" />
<text  x="19.13" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (17 samples, 0.01%)</title><rect x="25.5" y="117" width="0.2" height="15.0" fill="rgb(249,200,39)" rx="2" ry="2" />
<text  x="28.54" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, TypedOSMID&gt;::load_object_data (126 samples, 0.08%)</title><rect x="24.2" y="149" width="0.9" height="15.0" fill="rgb(244,219,21)" rx="2" ry="2" />
<text  x="27.18" y="159.5" ></text>
</g>
<g >
<title>getStreetSegmentInfo (16 samples, 0.01%)</title><rect x="12.3" y="277" width="0.1" height="15.0" fill="rgb(211,59,16)" rx="2" ry="2" />
<text  x="15.27" y="287.5" ></text>
</g>
<g >
<title>findStreetSegmentsOfIntersection (4,169 samples, 2.68%)</title><rect x="123.1" y="133" width="31.6" height="15.0" fill="rgb(249,134,49)" rx="2" ry="2" />
<text  x="126.12" y="143.5" >fi..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (22 samples, 0.01%)</title><rect x="10.4" y="117" width="0.1" height="15.0" fill="rgb(249,38,29)" rx="2" ry="2" />
<text  x="13.37" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (448 samples, 0.29%)</title><rect x="15.3" y="213" width="3.4" height="15.0" fill="rgb(239,181,53)" rx="2" ry="2" />
<text  x="18.35" y="223.5" ></text>
</g>
<g >
<title>malloc (96 samples, 0.06%)</title><rect x="35.8" y="117" width="0.7" height="15.0" fill="rgb(215,219,19)" rx="2" ry="2" />
<text  x="38.78" y="127.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (24 samples, 0.02%)</title><rect x="22.2" y="165" width="0.2" height="15.0" fill="rgb(227,221,5)" rx="2" ry="2" />
<text  x="25.19" y="175.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (24 samples, 0.02%)</title><rect x="36.6" y="133" width="0.2" height="15.0" fill="rgb(241,181,17)" rx="2" ry="2" />
<text  x="39.63" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (348 samples, 0.22%)</title><rect x="32.1" y="101" width="2.6" height="15.0" fill="rgb(242,25,1)" rx="2" ry="2" />
<text  x="35.07" y="111.5" ></text>
</g>
<g >
<title>_int_free (36 samples, 0.02%)</title><rect x="11.5" y="245" width="0.3" height="15.0" fill="rgb(254,99,37)" rx="2" ry="2" />
<text  x="14.49" y="255.5" ></text>
</g>
<g >
<title>malloc (3,088 samples, 1.98%)</title><rect x="192.0" y="117" width="23.4" height="15.0" fill="rgb(243,184,0)" rx="2" ry="2" />
<text  x="195.04" y="127.5" >m..</text>
</g>
<g >
<title>_dl_lookup_symbol_x (40 samples, 0.03%)</title><rect x="11.2" y="197" width="0.3" height="15.0" fill="rgb(219,82,48)" rx="2" ry="2" />
<text  x="14.15" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; &gt;::load_object_data (59 samples, 0.04%)</title><rect x="15.3" y="197" width="0.5" height="15.0" fill="rgb(245,124,45)" rx="2" ry="2" />
<text  x="18.35" y="207.5" ></text>
</g>
<g >
<title>operator new (5,145 samples, 3.31%)</title><rect x="80.7" y="117" width="39.0" height="15.0" fill="rgb(251,12,27)" rx="2" ry="2" />
<text  x="83.72" y="127.5" >ope..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (222 samples, 0.14%)</title><rect x="15.9" y="181" width="1.7" height="15.0" fill="rgb(250,122,21)" rx="2" ry="2" />
<text  x="18.89" y="191.5" ></text>
</g>
<g >
<title>malloc (20 samples, 0.01%)</title><rect x="1189.6" y="133" width="0.2" height="15.0" fill="rgb(210,189,18)" rx="2" ry="2" />
<text  x="1192.61" y="143.5" ></text>
</g>
<g >
<title>malloc@plt (26 samples, 0.02%)</title><rect x="19.3" y="245" width="0.2" height="15.0" fill="rgb(215,217,17)" rx="2" ry="2" />
<text  x="22.29" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, EdgeProperties&gt;::load_object_data (203 samples, 0.13%)</title><rect x="16.0" y="165" width="1.6" height="15.0" fill="rgb(224,103,44)" rx="2" ry="2" />
<text  x="19.04" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (165 samples, 0.11%)</title><rect x="29.0" y="101" width="1.3" height="15.0" fill="rgb(243,5,33)" rx="2" ry="2" />
<text  x="32.00" y="111.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (281 samples, 0.18%)</title><rect x="26.9" y="101" width="2.1" height="15.0" fill="rgb(220,202,49)" rx="2" ry="2" />
<text  x="29.87" y="111.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (15 samples, 0.01%)</title><rect x="21.2" y="261" width="0.1" height="15.0" fill="rgb(205,14,30)" rx="2" ry="2" />
<text  x="24.16" y="271.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (89 samples, 0.06%)</title><rect x="10.1" y="165" width="0.7" height="15.0" fill="rgb(246,171,7)" rx="2" ry="2" />
<text  x="13.11" y="175.5" ></text>
</g>
<g >
<title>UnitTest::RunAllTests (151,938 samples, 97.63%)</title><rect x="37.8" y="261" width="1152.0" height="15.0" fill="rgb(220,202,47)" rx="2" ry="2" />
<text  x="40.77" y="271.5" >UnitTest::RunAllTests</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, NodeInfo&gt;::load_object_data (34 samples, 0.02%)</title><rect x="10.3" y="133" width="0.3" height="15.0" fill="rgb(208,188,15)" rx="2" ry="2" />
<text  x="13.31" y="143.5" ></text>
</g>
<g >
<title>operator new@plt (434 samples, 0.28%)</title><rect x="151.4" y="117" width="3.3" height="15.0" fill="rgb(212,82,22)" rx="2" ry="2" />
<text  x="154.44" y="127.5" ></text>
</g>
<g >
<title>loadMap (91 samples, 0.06%)</title><rect x="10.1" y="245" width="0.7" height="15.0" fill="rgb(235,71,8)" rx="2" ry="2" />
<text  x="13.09" y="255.5" ></text>
</g>
<g >
<title>malloc (30 samples, 0.02%)</title><rect x="20.0" y="229" width="0.3" height="15.0" fill="rgb(208,229,53)" rx="2" ry="2" />
<text  x="23.02" y="239.5" ></text>
</g>
<g >
<title>_dl_relocate_object (51 samples, 0.03%)</title><rect x="11.1" y="213" width="0.4" height="15.0" fill="rgb(250,125,46)" rx="2" ry="2" />
<text  x="14.07" y="223.5" ></text>
</g>
<g >
<title>getIntersectionStreetSegment (100 samples, 0.06%)</title><rect x="13.5" y="261" width="0.7" height="15.0" fill="rgb(233,26,6)" rx="2" ry="2" />
<text  x="16.47" y="271.5" ></text>
</g>
<g >
<title>getIntersectionPosition (7,200 samples, 4.63%)</title><rect x="1134.4" y="133" width="54.5" height="15.0" fill="rgb(239,85,21)" rx="2" ry="2" />
<text  x="1137.36" y="143.5" >getIn..</text>
</g>
<g >
<title>operator new (5,767 samples, 3.71%)</title><rect x="192.0" y="133" width="43.8" height="15.0" fill="rgb(247,127,24)" rx="2" ry="2" />
<text  x="195.04" y="143.5" >oper..</text>
</g>
<g >
<title>all (155,632 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(242,139,5)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize@plt (17 samples, 0.01%)</title><rect x="22.6" y="149" width="0.1" height="15.0" fill="rgb(209,227,29)" rx="2" ry="2" />
<text  x="25.59" y="159.5" ></text>
</g>
<g >
<title>getIntersectionPosition (17 samples, 0.01%)</title><rect x="13.0" y="245" width="0.1" height="15.0" fill="rgb(242,142,13)" rx="2" ry="2" />
<text  x="16.00" y="255.5" ></text>
</g>
<g >
<title>operator new (1,365 samples, 0.88%)</title><rect x="141.1" y="117" width="10.3" height="15.0" fill="rgb(233,161,7)" rx="2" ry="2" />
<text  x="144.09" y="127.5" ></text>
</g>
<g >
<title>_int_malloc (28 samples, 0.02%)</title><rect x="19.1" y="229" width="0.2" height="15.0" fill="rgb(211,168,21)" rx="2" ry="2" />
<text  x="22.08" y="239.5" ></text>
</g>
<g >
<title>path (119,007 samples, 76.47%)</title><rect x="286.8" y="149" width="902.3" height="15.0" fill="rgb(217,68,52)" rx="2" ry="2" />
<text  x="289.83" y="159.5" >path</text>
</g>
<g >
<title>_int_free (16 samples, 0.01%)</title><rect x="12.6" y="261" width="0.1" height="15.0" fill="rgb(209,153,52)" rx="2" ry="2" />
<text  x="15.56" y="271.5" ></text>
</g>
<g >
<title>main (91 samples, 0.06%)</title><rect x="10.1" y="261" width="0.7" height="15.0" fill="rgb(252,121,49)" rx="2" ry="2" />
<text  x="13.09" y="271.5" ></text>
</g>
<g >
<title>memmove@plt (408 samples, 0.26%)</title><rect x="154.7" y="133" width="3.1" height="15.0" fill="rgb(232,12,0)" rx="2" ry="2" />
<text  x="157.73" y="143.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (52 samples, 0.03%)</title><rect x="33.4" y="53" width="0.4" height="15.0" fill="rgb(227,164,4)" rx="2" ry="2" />
<text  x="36.44" y="63.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (34 samples, 0.02%)</title><rect x="22.7" y="149" width="0.3" height="15.0" fill="rgb(224,181,47)" rx="2" ry="2" />
<text  x="25.72" y="159.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (114 samples, 0.07%)</title><rect x="33.0" y="85" width="0.8" height="15.0" fill="rgb(223,105,46)" rx="2" ry="2" />
<text  x="35.97" y="95.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (91 samples, 0.06%)</title><rect x="10.1" y="229" width="0.7" height="15.0" fill="rgb(254,150,10)" rx="2" ry="2" />
<text  x="13.09" y="239.5" ></text>
</g>
<g >
<title>operator new@plt (447 samples, 0.29%)</title><rect x="119.7" y="117" width="3.4" height="15.0" fill="rgb(238,87,27)" rx="2" ry="2" />
<text  x="122.73" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (18 samples, 0.01%)</title><rect x="10.2" y="133" width="0.1" height="15.0" fill="rgb(216,130,29)" rx="2" ry="2" />
<text  x="13.17" y="143.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (25 samples, 0.02%)</title><rect x="22.0" y="165" width="0.2" height="15.0" fill="rgb(228,80,48)" rx="2" ry="2" />
<text  x="25.00" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (116 samples, 0.07%)</title><rect x="16.4" y="133" width="0.9" height="15.0" fill="rgb(240,184,20)" rx="2" ry="2" />
<text  x="19.43" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,044 samples, 1.31%)</title><rect x="21.9" y="197" width="15.5" height="15.0" fill="rgb(247,65,34)" rx="2" ry="2" />
<text  x="24.92" y="207.5" ></text>
</g>
<g >
<title>malloc (28 samples, 0.02%)</title><rect x="18.1" y="149" width="0.2" height="15.0" fill="rgb(220,30,38)" rx="2" ry="2" />
<text  x="21.08" y="159.5" ></text>
</g>
<g >
<title>memmove@plt (14 samples, 0.01%)</title><rect x="18.7" y="261" width="0.1" height="15.0" fill="rgb(252,150,4)" rx="2" ry="2" />
<text  x="21.74" y="271.5" ></text>
</g>
<g >
<title>[unknown] (41 samples, 0.03%)</title><rect x="24.3" y="117" width="0.3" height="15.0" fill="rgb(250,122,52)" rx="2" ry="2" />
<text  x="27.29" y="127.5" ></text>
</g>
<g >
<title>__libc_start_main (91 samples, 0.06%)</title><rect x="10.1" y="277" width="0.7" height="15.0" fill="rgb(235,52,10)" rx="2" ry="2" />
<text  x="13.09" y="287.5" ></text>
</g>
<g >
<title>UnitTest::ExecuteTest&lt;UnitTest::Test&gt; (151,938 samples, 97.63%)</title><rect x="37.8" y="229" width="1152.0" height="15.0" fill="rgb(241,160,49)" rx="2" ry="2" />
<text  x="40.77" y="239.5" >UnitTest::ExecuteTest&lt;UnitTest::Test&gt;</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (448 samples, 0.29%)</title><rect x="15.3" y="229" width="3.4" height="15.0" fill="rgb(223,52,27)" rx="2" ry="2" />
<text  x="18.35" y="239.5" ></text>
</g>
<g >
<title>malloc@plt (1,382 samples, 0.89%)</title><rect x="109.3" y="101" width="10.4" height="15.0" fill="rgb(248,89,10)" rx="2" ry="2" />
<text  x="112.26" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_insert_multi_node (37 samples, 0.02%)</title><rect x="19.5" y="261" width="0.3" height="15.0" fill="rgb(207,171,14)" rx="2" ry="2" />
<text  x="22.50" y="271.5" ></text>
</g>
<g >
<title>operator delete@plt (30 samples, 0.02%)</title><rect x="18.8" y="261" width="0.3" height="15.0" fill="rgb(229,61,34)" rx="2" ry="2" />
<text  x="21.85" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (28 samples, 0.02%)</title><rect x="18.1" y="133" width="0.2" height="15.0" fill="rgb(227,137,29)" rx="2" ry="2" />
<text  x="21.08" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (45 samples, 0.03%)</title><rect x="37.1" y="165" width="0.3" height="15.0" fill="rgb(252,2,2)" rx="2" ry="2" />
<text  x="40.08" y="175.5" ></text>
</g>
<g >
<title>checkOpen (645 samples, 0.41%)</title><rect x="1184.1" y="117" width="4.8" height="15.0" fill="rgb(253,222,23)" rx="2" ry="2" />
<text  x="1187.06" y="127.5" ></text>
</g>
<g >
<title>main (151,938 samples, 97.63%)</title><rect x="37.8" y="277" width="1152.0" height="15.0" fill="rgb(216,224,39)" rx="2" ry="2" />
<text  x="40.77" y="287.5" >main</text>
</g>
<g >
<title>operator new (34 samples, 0.02%)</title><rect x="20.5" y="213" width="0.3" height="15.0" fill="rgb(225,37,37)" rx="2" ry="2" />
<text  x="23.51" y="223.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (15 samples, 0.01%)</title><rect x="1189.9" y="277" width="0.1" height="15.0" fill="rgb(218,148,42)" rx="2" ry="2" />
<text  x="1192.87" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::detail::adj_list_gen&lt;boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt;, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt;::config::stored_vertex, std::allocator&lt;boost::detail::adj_list_gen&lt;boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt;, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt;::config::stored_vertex&gt; &gt;::_M_default_append (19 samples, 0.01%)</title><rect x="10.6" y="149" width="0.2" height="15.0" fill="rgb(243,88,28)" rx="2" ry="2" />
<text  x="13.64" y="159.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (18 samples, 0.01%)</title><rect x="25.5" y="133" width="0.2" height="15.0" fill="rgb(245,36,45)" rx="2" ry="2" />
<text  x="28.53" y="143.5" ></text>
</g>
<g >
<title>loadMap (1,241 samples, 0.80%)</title><rect x="12.4" y="277" width="9.4" height="15.0" fill="rgb(223,134,6)" rx="2" ry="2" />
<text  x="15.39" y="287.5" ></text>
</g>
<g >
<title>Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper::RunImpl (151,938 samples, 97.63%)</title><rect x="37.8" y="181" width="1152.0" height="15.0" fill="rgb(207,28,37)" rx="2" ry="2" />
<text  x="40.77" y="191.5" >Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper::RunImpl</text>
</g>
<g >
<title>traceBack (63 samples, 0.04%)</title><rect x="1189.1" y="149" width="0.5" height="15.0" fill="rgb(217,198,18)" rx="2" ry="2" />
<text  x="1192.14" y="159.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (17 samples, 0.01%)</title><rect x="16.9" y="85" width="0.2" height="15.0" fill="rgb(228,61,17)" rx="2" ry="2" />
<text  x="19.94" y="95.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (74 samples, 0.05%)</title><rect x="31.5" y="101" width="0.6" height="15.0" fill="rgb(226,228,54)" rx="2" ry="2" />
<text  x="34.51" y="111.5" ></text>
</g>
<g >
<title>memcpy@plt (62 samples, 0.04%)</title><rect x="33.0" y="69" width="0.4" height="15.0" fill="rgb(224,117,54)" rx="2" ry="2" />
<text  x="35.97" y="79.5" ></text>
</g>
<g >
<title>operator new (111 samples, 0.07%)</title><rect x="35.8" y="133" width="0.8" height="15.0" fill="rgb(210,221,12)" rx="2" ry="2" />
<text  x="38.78" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (21 samples, 0.01%)</title><rect x="17.4" y="149" width="0.2" height="15.0" fill="rgb(250,116,14)" rx="2" ry="2" />
<text  x="20.42" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (54 samples, 0.03%)</title><rect x="23.8" y="133" width="0.4" height="15.0" fill="rgb(222,73,1)" rx="2" ry="2" />
<text  x="26.77" y="143.5" ></text>
</g>
<g >
<title>read@plt (52 samples, 0.03%)</title><rect x="33.4" y="37" width="0.4" height="15.0" fill="rgb(230,76,22)" rx="2" ry="2" />
<text  x="36.44" y="47.5" ></text>
</g>
<g >
<title>_start (72 samples, 0.05%)</title><rect x="10.9" y="277" width="0.6" height="15.0" fill="rgb(205,44,3)" rx="2" ry="2" />
<text  x="13.91" y="287.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (43 samples, 0.03%)</title><rect x="24.6" y="117" width="0.3" height="15.0" fill="rgb(234,215,16)" rx="2" ry="2" />
<text  x="27.60" y="127.5" ></text>
</g>
<g >
<title>[unknown] (29 samples, 0.02%)</title><rect x="16.6" y="101" width="0.3" height="15.0" fill="rgb(240,14,13)" rx="2" ry="2" />
<text  x="19.63" y="111.5" ></text>
</g>
<g >
<title>_int_malloc (30 samples, 0.02%)</title><rect x="20.0" y="213" width="0.3" height="15.0" fill="rgb(223,136,21)" rx="2" ry="2" />
<text  x="23.02" y="223.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (15 samples, 0.01%)</title><rect x="24.4" y="101" width="0.1" height="15.0" fill="rgb(207,197,11)" rx="2" ry="2" />
<text  x="27.39" y="111.5" ></text>
</g>
<g >
<title>findDistanceBetweenTwoPoints (8,329 samples, 5.35%)</title><rect x="1020.1" y="133" width="63.1" height="15.0" fill="rgb(238,153,19)" rx="2" ry="2" />
<text  x="1023.09" y="143.5" >findDi..</text>
</g>
<g >
<title>_int_malloc (3,763 samples, 2.42%)</title><rect x="80.7" y="85" width="28.6" height="15.0" fill="rgb(237,192,40)" rx="2" ry="2" />
<text  x="83.72" y="95.5" >_i..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (47 samples, 0.03%)</title><rect x="20.4" y="229" width="0.4" height="15.0" fill="rgb(231,101,7)" rx="2" ry="2" />
<text  x="23.44" y="239.5" ></text>
</g>
<g >
<title>__run_exit_handlers (83 samples, 0.05%)</title><rect x="11.5" y="261" width="0.6" height="15.0" fill="rgb(215,95,12)" rx="2" ry="2" />
<text  x="14.49" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (96 samples, 0.06%)</title><rect x="35.8" y="101" width="0.7" height="15.0" fill="rgb(220,51,29)" rx="2" ry="2" />
<text  x="38.78" y="111.5" ></text>
</g>
<g >
<title>_dl_start (61 samples, 0.04%)</title><rect x="11.0" y="261" width="0.5" height="15.0" fill="rgb(238,87,42)" rx="2" ry="2" />
<text  x="13.99" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (1,549 samples, 1.00%)</title><rect x="25.1" y="149" width="11.8" height="15.0" fill="rgb(236,122,30)" rx="2" ry="2" />
<text  x="28.13" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::_M_emplace_equal&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; (23 samples, 0.01%)</title><rect x="21.0" y="261" width="0.2" height="15.0" fill="rgb(247,213,30)" rx="2" ry="2" />
<text  x="23.99" y="271.5" ></text>
</g>
<g >
<title>UnitTest::ExecuteTest&lt;Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper&gt; (151,938 samples, 97.63%)</title><rect x="37.8" y="197" width="1152.0" height="15.0" fill="rgb(242,118,16)" rx="2" ry="2" />
<text  x="40.77" y="207.5" >UnitTest::ExecuteTest&lt;Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper&gt;</text>
</g>
<g >
<title>_int_malloc (29 samples, 0.02%)</title><rect x="20.5" y="181" width="0.2" height="15.0" fill="rgb(228,110,30)" rx="2" ry="2" />
<text  x="23.51" y="191.5" ></text>
</g>
<g >
<title>operator new (53 samples, 0.03%)</title><rect x="18.1" y="165" width="0.4" height="15.0" fill="rgb(212,111,3)" rx="2" ry="2" />
<text  x="21.08" y="175.5" ></text>
</g>
<g >
<title>dl_main (60 samples, 0.04%)</title><rect x="11.0" y="229" width="0.5" height="15.0" fill="rgb(244,124,15)" rx="2" ry="2" />
<text  x="14.00" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (155 samples, 0.10%)</title><rect x="16.1" y="149" width="1.2" height="15.0" fill="rgb(205,11,24)" rx="2" ry="2" />
<text  x="19.13" y="159.5" ></text>
</g>
<g >
<title>strcmp@plt (54 samples, 0.03%)</title><rect x="23.8" y="117" width="0.4" height="15.0" fill="rgb(235,90,18)" rx="2" ry="2" />
<text  x="26.77" y="127.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (2,107 samples, 1.35%)</title><rect x="21.8" y="277" width="16.0" height="15.0" fill="rgb(233,98,21)" rx="2" ry="2" />
<text  x="24.80" y="287.5" ></text>
</g>
<g >
<title>_int_free (379 samples, 0.24%)</title><rect x="37.8" y="165" width="2.9" height="15.0" fill="rgb(241,108,12)" rx="2" ry="2" />
<text  x="40.78" y="175.5" ></text>
</g>
<g >
<title>M3_Public_Perf_ (155,632 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(206,160,35)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >M3_Public_Perf_</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (17 samples, 0.01%)</title><rect x="37.3" y="149" width="0.1" height="15.0" fill="rgb(227,15,8)" rx="2" ry="2" />
<text  x="40.29" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (2,106 samples, 1.35%)</title><rect x="21.8" y="245" width="16.0" height="15.0" fill="rgb(218,49,41)" rx="2" ry="2" />
<text  x="24.81" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;Feature, std::allocator&lt;Feature&gt; &gt;::_M_default_append (24 samples, 0.02%)</title><rect x="37.5" y="197" width="0.2" height="15.0" fill="rgb(222,123,19)" rx="2" ry="2" />
<text  x="40.54" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (91 samples, 0.06%)</title><rect x="10.1" y="197" width="0.7" height="15.0" fill="rgb(219,129,5)" rx="2" ry="2" />
<text  x="13.09" y="207.5" ></text>
</g>
<g >
<title>getStreetSegmentCurvePoint (42 samples, 0.03%)</title><rect x="13.1" y="245" width="0.3" height="15.0" fill="rgb(254,35,9)" rx="2" ry="2" />
<text  x="16.13" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (83 samples, 0.05%)</title><rect x="20.4" y="245" width="0.6" height="15.0" fill="rgb(228,100,31)" rx="2" ry="2" />
<text  x="23.36" y="255.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (62 samples, 0.04%)</title><rect x="31.0" y="85" width="0.5" height="15.0" fill="rgb(230,0,27)" rx="2" ry="2" />
<text  x="34.04" y="95.5" ></text>
</g>
<g >
<title>memcpy@plt (435 samples, 0.28%)</title><rect x="77.4" y="117" width="3.3" height="15.0" fill="rgb(250,173,26)" rx="2" ry="2" />
<text  x="80.43" y="127.5" ></text>
</g>
<g >
<title>_int_malloc (3,088 samples, 1.98%)</title><rect x="192.0" y="101" width="23.4" height="15.0" fill="rgb(250,23,7)" rx="2" ry="2" />
<text  x="195.04" y="111.5" >_..</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (52 samples, 0.03%)</title><rect x="33.4" y="69" width="0.4" height="15.0" fill="rgb(227,50,21)" rx="2" ry="2" />
<text  x="36.44" y="79.5" ></text>
</g>
<g >
<title>exit (83 samples, 0.05%)</title><rect x="11.5" y="277" width="0.6" height="15.0" fill="rgb(219,66,37)" rx="2" ry="2" />
<text  x="14.49" y="287.5" ></text>
</g>
<g >
<title>getStreetSegmentInfo (119 samples, 0.08%)</title><rect x="14.4" y="261" width="0.9" height="15.0" fill="rgb(226,27,46)" rx="2" ry="2" />
<text  x="17.44" y="271.5" ></text>
</g>
<g >
<title>malloc@plt (2,679 samples, 1.72%)</title><rect x="215.4" y="117" width="20.4" height="15.0" fill="rgb(209,89,8)" rx="2" ry="2" />
<text  x="218.45" y="127.5" ></text>
</g>
<g >
<title>cos@plt (14 samples, 0.01%)</title><rect x="12.9" y="245" width="0.1" height="15.0" fill="rgb(218,44,12)" rx="2" ry="2" />
<text  x="15.90" y="255.5" ></text>
</g>
<g >
<title>cos@plt (3,688 samples, 2.37%)</title><rect x="1055.3" y="117" width="27.9" height="15.0" fill="rgb(249,212,11)" rx="2" ry="2" />
<text  x="1058.28" y="127.5" >c..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,823 samples, 1.17%)</title><rect x="23.1" y="165" width="13.8" height="15.0" fill="rgb(221,35,47)" rx="2" ry="2" />
<text  x="26.06" y="175.5" ></text>
</g>
<g >
<title>operator delete@plt (21 samples, 0.01%)</title><rect x="11.9" y="229" width="0.2" height="15.0" fill="rgb(229,223,6)" rx="2" ry="2" />
<text  x="14.91" y="239.5" ></text>
</g>
<g >
<title>strcmp@plt (165 samples, 0.11%)</title><rect x="29.0" y="85" width="1.3" height="15.0" fill="rgb(253,123,16)" rx="2" ry="2" />
<text  x="32.00" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (141 samples, 0.09%)</title><rect x="34.7" y="133" width="1.1" height="15.0" fill="rgb(217,72,20)" rx="2" ry="2" />
<text  x="37.71" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,106 samples, 1.35%)</title><rect x="21.8" y="261" width="16.0" height="15.0" fill="rgb(206,190,19)" rx="2" ry="2" />
<text  x="24.81" y="271.5" ></text>
</g>
<g >
<title>malloc_consolidate (379 samples, 0.24%)</title><rect x="37.8" y="149" width="2.9" height="15.0" fill="rgb(232,200,9)" rx="2" ry="2" />
<text  x="40.78" y="159.5" ></text>
</g>
<g >
<title>malloc (28 samples, 0.02%)</title><rect x="19.1" y="245" width="0.2" height="15.0" fill="rgb(234,165,48)" rx="2" ry="2" />
<text  x="22.08" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (57 samples, 0.04%)</title><rect x="16.6" y="117" width="0.5" height="15.0" fill="rgb(228,103,32)" rx="2" ry="2" />
<text  x="19.63" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (23 samples, 0.01%)</title><rect x="21.4" y="261" width="0.2" height="15.0" fill="rgb(245,39,22)" rx="2" ry="2" />
<text  x="24.45" y="271.5" ></text>
</g>
<g >
<title>malloc_consolidate (36 samples, 0.02%)</title><rect x="11.5" y="229" width="0.3" height="15.0" fill="rgb(209,61,26)" rx="2" ry="2" />
<text  x="14.49" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement@plt (31 samples, 0.02%)</title><rect x="30.3" y="101" width="0.2" height="15.0" fill="rgb(220,35,4)" rx="2" ry="2" />
<text  x="33.25" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (448 samples, 0.29%)</title><rect x="15.3" y="245" width="3.4" height="15.0" fill="rgb(246,61,42)" rx="2" ry="2" />
<text  x="18.35" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt; &gt; &gt;::~vector (25 samples, 0.02%)</title><rect x="11.9" y="245" width="0.2" height="15.0" fill="rgb(209,177,34)" rx="2" ry="2" />
<text  x="14.88" y="255.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (15 samples, 0.01%)</title><rect x="16.7" y="85" width="0.1" height="15.0" fill="rgb(210,204,46)" rx="2" ry="2" />
<text  x="19.67" y="95.5" ></text>
</g>
<g >
<title>operator delete@plt (23 samples, 0.01%)</title><rect x="17.9" y="165" width="0.2" height="15.0" fill="rgb(244,25,32)" rx="2" ry="2" />
<text  x="20.91" y="175.5" ></text>
</g>
<g >
<title>memmove@plt (785 samples, 0.50%)</title><rect x="135.1" y="117" width="6.0" height="15.0" fill="rgb(252,126,9)" rx="2" ry="2" />
<text  x="138.14" y="127.5" ></text>
</g>
<g >
<title>getNumIntersectionStreetSegment (15 samples, 0.01%)</title><rect x="14.2" y="261" width="0.1" height="15.0" fill="rgb(253,157,16)" rx="2" ry="2" />
<text  x="17.23" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (26 samples, 0.02%)</title><rect x="36.9" y="165" width="0.2" height="15.0" fill="rgb(210,160,0)" rx="2" ry="2" />
<text  x="39.88" y="175.5" ></text>
</g>
<g >
<title>Feature::Feature (24 samples, 0.02%)</title><rect x="37.5" y="181" width="0.2" height="15.0" fill="rgb(212,163,20)" rx="2" ry="2" />
<text  x="40.54" y="191.5" ></text>
</g>
<g >
<title>[unknown] (19 samples, 0.01%)</title><rect x="15.9" y="165" width="0.1" height="15.0" fill="rgb(250,148,34)" rx="2" ry="2" />
<text  x="18.89" y="175.5" ></text>
</g>
<g >
<title>operator new (54 samples, 0.03%)</title><rect x="19.1" y="261" width="0.4" height="15.0" fill="rgb(214,55,43)" rx="2" ry="2" />
<text  x="22.08" y="271.5" ></text>
</g>
<g >
<title>findStreetSegmentTravelTime (6,742 samples, 4.33%)</title><rect x="1083.2" y="133" width="51.2" height="15.0" fill="rgb(224,206,2)" rx="2" ry="2" />
<text  x="1086.24" y="143.5" >findS..</text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (376 samples, 0.24%)</title><rect x="15.9" y="197" width="2.8" height="15.0" fill="rgb(218,133,20)" rx="2" ry="2" />
<text  x="18.89" y="207.5" ></text>
</g>
<g >
<title>findStreetSegmentLength (105 samples, 0.07%)</title><rect x="12.7" y="261" width="0.8" height="15.0" fill="rgb(234,188,15)" rx="2" ry="2" />
<text  x="15.68" y="271.5" ></text>
</g>
<g >
<title>malloc@plt (25 samples, 0.02%)</title><rect x="18.3" y="149" width="0.2" height="15.0" fill="rgb(210,136,33)" rx="2" ry="2" />
<text  x="21.29" y="159.5" ></text>
</g>
<g >
<title>malloc@plt (1,365 samples, 0.88%)</title><rect x="141.1" y="101" width="10.3" height="15.0" fill="rgb(251,0,26)" rx="2" ry="2" />
<text  x="144.09" y="111.5" ></text>
</g>
<g >
<title>_int_malloc (20 samples, 0.01%)</title><rect x="1189.6" y="117" width="0.2" height="15.0" fill="rgb(243,148,47)" rx="2" ry="2" />
<text  x="1192.61" y="127.5" ></text>
</g>
<g >
<title>operator new (41 samples, 0.03%)</title><rect x="20.0" y="245" width="0.3" height="15.0" fill="rgb(254,19,15)" rx="2" ry="2" />
<text  x="23.02" y="255.5" ></text>
</g>
<g >
<title>malloc (29 samples, 0.02%)</title><rect x="20.5" y="197" width="0.2" height="15.0" fill="rgb(252,209,52)" rx="2" ry="2" />
<text  x="23.51" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;Feature, std::allocator&lt;Feature&gt; &gt; &gt;::load_object_data (2,090 samples, 1.34%)</title><rect x="21.9" y="213" width="15.8" height="15.0" fill="rgb(226,17,45)" rx="2" ry="2" />
<text  x="24.87" y="223.5" ></text>
</g>
<g >
<title>__dynamic_cast (62 samples, 0.04%)</title><rect x="31.0" y="101" width="0.5" height="15.0" fill="rgb(245,56,43)" rx="2" ry="2" />
<text  x="34.04" y="111.5" ></text>
</g>
<g >
<title>malloc (3,763 samples, 2.42%)</title><rect x="80.7" y="101" width="28.6" height="15.0" fill="rgb(245,110,4)" rx="2" ry="2" />
<text  x="83.72" y="111.5" >ma..</text>
</g>
<g >
<title>operator delete@plt (4,512 samples, 2.90%)</title><rect x="157.8" y="133" width="34.2" height="15.0" fill="rgb(215,79,17)" rx="2" ry="2" />
<text  x="160.83" y="143.5" >op..</text>
</g>
<g >
<title>operator delete@plt (6,009 samples, 3.86%)</title><rect x="241.3" y="149" width="45.5" height="15.0" fill="rgb(205,178,32)" rx="2" ry="2" />
<text  x="244.27" y="159.5" >oper..</text>
</g>
<g >
<title>malloc_consolidate (16 samples, 0.01%)</title><rect x="12.6" y="245" width="0.1" height="15.0" fill="rgb(234,2,14)" rx="2" ry="2" />
<text  x="15.56" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (28 samples, 0.02%)</title><rect x="16.9" y="101" width="0.2" height="15.0" fill="rgb(234,206,35)" rx="2" ry="2" />
<text  x="19.85" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_rehash (29 samples, 0.02%)</title><rect x="19.6" y="245" width="0.2" height="15.0" fill="rgb(229,193,4)" rx="2" ry="2" />
<text  x="22.56" y="255.5" ></text>
</g>
<g >
<title>Node::Node (7,525 samples, 4.84%)</title><rect x="66.1" y="133" width="57.0" height="15.0" fill="rgb(240,117,36)" rx="2" ry="2" />
<text  x="69.07" y="143.5" >Node::..</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (557 samples, 0.36%)</title><rect x="30.5" y="117" width="4.2" height="15.0" fill="rgb(238,112,49)" rx="2" ry="2" />
<text  x="33.49" y="127.5" ></text>
</g>
<g >
<title>do_lookup_x (34 samples, 0.02%)</title><rect x="11.2" y="181" width="0.3" height="15.0" fill="rgb(234,205,22)" rx="2" ry="2" />
<text  x="14.20" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (61 samples, 0.04%)</title><rect x="10.1" y="149" width="0.5" height="15.0" fill="rgb(221,96,33)" rx="2" ry="2" />
<text  x="13.11" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,097 samples, 1.35%)</title><rect x="21.9" y="229" width="15.9" height="15.0" fill="rgb(229,132,53)" rx="2" ry="2" />
<text  x="24.87" y="239.5" ></text>
</g>
<g >
<title>malloc@plt (15 samples, 0.01%)</title><rect x="36.5" y="117" width="0.1" height="15.0" fill="rgb(223,51,41)" rx="2" ry="2" />
<text  x="39.51" y="127.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (18 samples, 0.01%)</title><rect x="25.0" y="133" width="0.1" height="15.0" fill="rgb(216,63,12)" rx="2" ry="2" />
<text  x="28.00" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (16 samples, 0.01%)</title><rect x="37.4" y="197" width="0.1" height="15.0" fill="rgb(248,103,27)" rx="2" ry="2" />
<text  x="40.42" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;int, int&gt; &gt; (147 samples, 0.09%)</title><rect x="19.9" y="261" width="1.1" height="15.0" fill="rgb(237,146,28)" rx="2" ry="2" />
<text  x="22.87" y="271.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (60 samples, 0.04%)</title><rect x="11.0" y="245" width="0.5" height="15.0" fill="rgb(249,164,51)" rx="2" ry="2" />
<text  x="14.00" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (91 samples, 0.06%)</title><rect x="10.1" y="213" width="0.7" height="15.0" fill="rgb(214,41,54)" rx="2" ry="2" />
<text  x="13.09" y="223.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (448 samples, 0.29%)</title><rect x="15.3" y="261" width="3.4" height="15.0" fill="rgb(226,19,34)" rx="2" ry="2" />
<text  x="18.35" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt;, std::allocator&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt; &gt; &gt;::_M_realloc_insert&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt; &gt; (109 samples, 0.07%)</title><rect x="17.7" y="181" width="0.8" height="15.0" fill="rgb(231,170,4)" rx="2" ry="2" />
<text  x="20.67" y="191.5" ></text>
</g>
</g>
</svg>
